//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once

//*****************************************************************************
//
// Notes on the ETW event code generated by MC:
//
// - Structures and arrays of structures are treated as an opaque binary blob.
//   The caller is responsible for packing the data for the structure into a
//   single region of memory, with no padding between values. The macro will
//   have an extra parameter for the length of the blob.
// - Arrays of nul-terminated strings must be packed by the caller into a
//   single binary blob containing the correct number of strings, with a nul
//   after each string. The size of the blob is specified in characters, and
//   includes the final nul.
// - If a SID is provided, its length will be determined by calling
//   GetLengthSid.
// - Arrays of SID are treated as a single binary blob. The caller is
//   responsible for packing the SID values into a single region of memory with
//   no padding.
// - The length attribute on the data element in the manifest is significant
//   for values with intype win:UnicodeString, win:AnsiString, or win:Binary.
//   The length attribute must be specified for win:Binary, and is optional for
//   win:UnicodeString and win:AnsiString (if no length is given, the strings
//   are assumed to be nul-terminated). For win:UnicodeString, the length is
//   measured in characters, not bytes.
// - For an array of win:UnicodeString, win:AnsiString, or win:Binary, the
//   length attribute applies to every value in the array, so every value in
//   the array must have the same length. The values in the array are provided
//   to the macro via a single pointer -- the caller is responsible for packing
//   all of the values into a single region of memory with no padding between
//   values.
// - Values of type win:CountedUnicodeString, win:CountedAnsiString, and
//   win:CountedBinary can be generated and collected on Vista or later.
//   However, they may not decode properly without the Windows 10 2018 Fall
//   Update.
// - Arrays of type win:CountedUnicodeString, win:CountedAnsiString, and
//   win:CountedBinary must be packed by the caller into a single region of
//   memory. The format for each item is a UINT16 byte-count followed by that
//   many bytes of data. When providing the array to the generated macro, you
//   must provide the total size of the packed array data, including the UINT16
//   sizes for each item. In the case of win:CountedUnicodeString, the data
//   size is specified in WCHAR (16-bit) units. In the case of
//   win:CountedAnsiString and win:CountedBinary, the data size is specified in
//   bytes.
//
//*****************************************************************************

#include <wmistr.h>
#include <evntrace.h>
#include <evntprov.h>

#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// MCGEN_USE_KERNEL_MODE_APIS macro:
// Controls whether the generated code uses kernel-mode or user-mode APIs.
// - Set to 0 to use Windows user-mode APIs such as EventRegister.
// - Set to 1 to use Windows kernel-mode APIs such as EtwRegister.
// Default is based on whether the _ETW_KM_ macro is defined (i.e. by wdm.h).
// Note that the APIs can also be overridden directly, e.g. by setting the
// MCGEN_EVENTWRITETRANSFER or MCGEN_EVENTREGISTER macros.
//
#ifndef MCGEN_USE_KERNEL_MODE_APIS
  #ifdef _ETW_KM_
    #define MCGEN_USE_KERNEL_MODE_APIS 1
  #else
    #define MCGEN_USE_KERNEL_MODE_APIS 0
  #endif
#endif // MCGEN_USE_KERNEL_MODE_APIS

//
// MCGEN_HAVE_EVENTSETINFORMATION macro:
// Controls how McGenEventSetInformation uses the EventSetInformation API.
// - Set to 0 to disable the use of EventSetInformation
//   (McGenEventSetInformation will always return an error).
// - Set to 1 to directly invoke MCGEN_EVENTSETINFORMATION.
// - Set to 2 to to locate EventSetInformation at runtime via GetProcAddress
//   (user-mode) or MmGetSystemRoutineAddress (kernel-mode).
// Default is determined as follows:
// - If MCGEN_EVENTSETINFORMATION has been customized, set to 1
//   (i.e. use MCGEN_EVENTSETINFORMATION).
// - Else if the target OS version has EventSetInformation, set to 1
//   (i.e. use MCGEN_EVENTSETINFORMATION).
// - Else set to 2 (i.e. try to dynamically locate EventSetInformation).
// Note that an McGenEventSetInformation function will only be generated if one
// or more provider in a manifest has provider traits.
//
#ifndef MCGEN_HAVE_EVENTSETINFORMATION
  #ifdef MCGEN_EVENTSETINFORMATION             // if MCGEN_EVENTSETINFORMATION has been customized,
    #define MCGEN_HAVE_EVENTSETINFORMATION   1 //   directly invoke MCGEN_EVENTSETINFORMATION(...).
  #elif MCGEN_USE_KERNEL_MODE_APIS             // else if using kernel-mode APIs,
    #if NTDDI_VERSION >= 0x06040000            //   if target OS is Windows 10 or later,
      #define MCGEN_HAVE_EVENTSETINFORMATION 1 //     directly invoke MCGEN_EVENTSETINFORMATION(...).
    #else                                      //   else
      #define MCGEN_HAVE_EVENTSETINFORMATION 2 //     find "EtwSetInformation" via MmGetSystemRoutineAddress.
    #endif                                     // else (using user-mode APIs)
  #else                                        //   if target OS and SDK is Windows 8 or later,
    #if WINVER >= 0x0602 && defined(EVENT_FILTER_TYPE_SCHEMATIZED)
      #define MCGEN_HAVE_EVENTSETINFORMATION 1 //     directly invoke MCGEN_EVENTSETINFORMATION(...).
    #else                                      //   else
      #define MCGEN_HAVE_EVENTSETINFORMATION 2 //     find "EventSetInformation" via GetModuleHandleExW/GetProcAddress.
    #endif
  #endif
#endif // MCGEN_HAVE_EVENTSETINFORMATION

//
// MCGEN_EVENTWRITETRANSFER macro:
// Override to use a custom API.
//
#ifndef MCGEN_EVENTWRITETRANSFER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTWRITETRANSFER   EtwWriteTransfer
  #else
    #define MCGEN_EVENTWRITETRANSFER   EventWriteTransfer
  #endif
#endif // MCGEN_EVENTWRITETRANSFER

//
// MCGEN_EVENTREGISTER macro:
// Override to use a custom API.
//
#ifndef MCGEN_EVENTREGISTER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTREGISTER        EtwRegister
  #else
    #define MCGEN_EVENTREGISTER        EventRegister
  #endif
#endif // MCGEN_EVENTREGISTER

//
// MCGEN_EVENTSETINFORMATION macro:
// Override to use a custom API.
// (McGenEventSetInformation also affected by MCGEN_HAVE_EVENTSETINFORMATION.)
//
#ifndef MCGEN_EVENTSETINFORMATION
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTSETINFORMATION  EtwSetInformation
  #else
    #define MCGEN_EVENTSETINFORMATION  EventSetInformation
  #endif
#endif // MCGEN_EVENTSETINFORMATION

//
// MCGEN_EVENTUNREGISTER macro:
// Override to use a custom API.
//
#ifndef MCGEN_EVENTUNREGISTER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTUNREGISTER      EtwUnregister
  #else
    #define MCGEN_EVENTUNREGISTER      EventUnregister
  #endif
#endif // MCGEN_EVENTUNREGISTER

//
// MCGEN_PENABLECALLBACK macro:
// Override to use a custom function pointer type.
// (Should match the type used by MCGEN_EVENTREGISTER.)
//
#ifndef MCGEN_PENABLECALLBACK
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_PENABLECALLBACK      PETWENABLECALLBACK
  #else
    #define MCGEN_PENABLECALLBACK      PENABLECALLBACK
  #endif
#endif // MCGEN_PENABLECALLBACK

//
// MCGEN_GETLENGTHSID macro:
// Override to use a custom API.
//
#ifndef MCGEN_GETLENGTHSID
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_GETLENGTHSID(p)      RtlLengthSid((PSID)(p))
  #else
    #define MCGEN_GETLENGTHSID(p)      GetLengthSid((PSID)(p))
  #endif
#endif // MCGEN_GETLENGTHSID

//
// MCGEN_EVENT_ENABLED macro:
// Controls how the EventWrite[EventName] macros determine whether an event is
// enabled. The default behavior is for EventWrite[EventName] to use the
// EventEnabled[EventName] macros.
//
#ifndef MCGEN_EVENT_ENABLED
#define MCGEN_EVENT_ENABLED(EventName) EventEnabled##EventName()
#endif

//
// MCGEN_EVENT_BIT_SET macro:
// Implements testing a bit in an array of ULONG, optimized for CPU type.
//
#ifndef MCGEN_EVENT_BIT_SET
#  if defined(_M_IX86) || defined(_M_X64)
#    define MCGEN_EVENT_BIT_SET(EnableBits, BitPosition) ((((const unsigned char*)EnableBits)[BitPosition >> 3] & (1u << (BitPosition & 7))) != 0)
#  else
#    define MCGEN_EVENT_BIT_SET(EnableBits, BitPosition) ((EnableBits[BitPosition >> 5] & (1u << (BitPosition & 31))) != 0)
#  endif
#endif // MCGEN_EVENT_BIT_SET

//
// MCGEN_ENABLE_CHECK macro:
// Determines whether the specified event would be considered as enabled
// based on the state of the specified context. Slightly faster than calling
// McGenEventEnabled directly.
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled && McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;      // Used as pointer to provider traits.
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level;
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif // MCGEN_TRACE_CONTEXT_DEF

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
//
// Determines whether an event with a given Level and Keyword would be
// considered as enabled based on the state of the specified context.
// Note that you may want to use MCGEN_ENABLE_CHECK instead of calling this
// function directly.
//
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;
}
#endif // MCGEN_LEVEL_KEYWORD_ENABLED_DEF

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
//
// Determines whether the specified event would be considered as enabled based
// on the state of the specified context. Note that you may want to use
// MCGEN_ENABLE_CHECK instead of calling this function directly.
//
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);
}
#endif // MCGEN_EVENT_ENABLED_DEF

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Windows Vista and later.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider.

    ControlCode - The parameter indicates whether the provider
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category
                      of events that the provider writes.

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;

        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif // MCGEN_PRIVATE_ENABLE_CALLBACK_V2

    return;
}

#endif // MCGEN_CONTROL_CALLBACK

#ifndef McGenEventWrite_def
#define McGenEventWrite_def
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventWrite(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCGUID ActivityId,
    _In_range_(1, 128) ULONG EventDataCount,
    _Inout_updates_(EventDataCount) EVENT_DATA_DESCRIPTOR* EventData
    )
{
    const USHORT UNALIGNED* Traits;

    // Some customized MCGEN_EVENTWRITETRANSFER macros might ignore ActivityId.
    UNREFERENCED_PARAMETER(ActivityId);

    Traits = (const USHORT UNALIGNED*)(UINT_PTR)Context->Logger;

    if (Traits == NULL) {
        EventData[0].Ptr = 0;
        EventData[0].Size = 0;
        EventData[0].Reserved = 0;
    } else {
        EventData[0].Ptr = (ULONG_PTR)Traits;
        EventData[0].Size = *Traits;
        EventData[0].Reserved = 2; // EVENT_DATA_DESCRIPTOR_TYPE_PROVIDER_METADATA
    }

    return MCGEN_EVENTWRITETRANSFER(
        Context->RegistrationHandle,
        Descriptor,
        ActivityId,
        NULL,
        EventDataCount,
        EventData);
}
#endif // McGenEventWrite_def

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister

#pragma warning(push)
#pragma warning(disable:6103)
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ MCGEN_PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function registers the provider with ETW.

Arguments:

    ProviderId - Provider ID to register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for the callback.

    RegHandle - Pointer to registration handle.

Remarks:

    Should not be called if the provider is already registered (i.e. should not
    be called if *RegHandle != 0). Repeatedly registering a provider is a bug
    and may indicate a race condition. However, for compatibility with previous
    behavior, this function will return SUCCESS in this case.

--*/
{
    ULONG Error;

    if (*RegHandle != 0)
    {
        Error = 0; // ERROR_SUCCESS
    }
    else
    {
        Error = MCGEN_EVENTREGISTER(ProviderId, EnableCallback, CallbackContext, RegHandle);
    }

    return Error;
}
#pragma warning(pop)

DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW and set *RegHandle = 0.

Arguments:

    RegHandle - the pointer to the provider registration handle

Remarks:

    If provider has not been registered (i.e. if *RegHandle == 0),
    return SUCCESS. It is safe to call McGenEventUnregister even if the
    call to McGenEventRegister returned an error.

--*/
{
    ULONG Error;

    if(*RegHandle == 0)
    {
        Error = 0; // ERROR_SUCCESS
    }
    else
    {
        Error = MCGEN_EVENTUNREGISTER(*RegHandle);
        *RegHandle = (REGHANDLE)0;
    }

    return Error;
}

#endif // McGenEventRegisterUnregister

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Provider "TypeMangling" event count 137
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Provider GUID = 00000000-0000-0000-0000-000000000001
EXTERN_C __declspec(selectany) const GUID TypeMangling = {0x00000000, 0x0000, 0x0000, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}};

#ifndef TypeMangling_Traits
#define TypeMangling_Traits NULL
#endif // TypeMangling_Traits

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt01 = {0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt01_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt02 = {0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt02_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt03 = {0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt03_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt04 = {0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt04_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt05 = {0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt05_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt06 = {0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt06_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt07 = {0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt07_value 0x7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt08 = {0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt08_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt09 = {0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt09_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt10 = {0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt10_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt11 = {0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt11_value 0xb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt12 = {0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt12_value 0xc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt13 = {0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt13_value 0xd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt14 = {0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt14_value 0xe
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt15 = {0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt15_value 0xf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt16 = {0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt16_value 0x10
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt17 = {0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt17_value 0x11
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt18 = {0x12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt18_value 0x12
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt19 = {0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt19_value 0x13
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt20 = {0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt20_value 0x14
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt21 = {0x15, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt21_value 0x15
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt22 = {0x16, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt22_value 0x16
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt23 = {0x17, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt23_value 0x17
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Evt24 = {0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define Evt24_value 0x18
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount01 = {0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount01_value 0x65
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount02 = {0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount02_value 0x66
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount03 = {0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount03_value 0x67
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount04 = {0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount04_value 0x68
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount05 = {0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount05_value 0x69
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount06 = {0x6a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount06_value 0x6a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount07 = {0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount07_value 0x6b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount08 = {0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount08_value 0x6c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount09 = {0x6d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount09_value 0x6d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount10 = {0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount10_value 0x6e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount11 = {0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount11_value 0x6f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount12 = {0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount12_value 0x70
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount13 = {0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount13_value 0x71
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount14 = {0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount14_value 0x72
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount15 = {0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount15_value 0x73
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount16 = {0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount16_value 0x74
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount17 = {0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount17_value 0x75
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount18 = {0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount18_value 0x76
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount19 = {0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount19_value 0x77
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount20 = {0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount20_value 0x78
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount21 = {0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount21_value 0x79
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount22 = {0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount22_value 0x7a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount23 = {0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount23_value 0x7b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount24 = {0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount24_value 0x7c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount01_0 = {0xc9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount01_0_value 0xc9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount02_0 = {0xca, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount02_0_value 0xca
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount03_0 = {0xcb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount03_0_value 0xcb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount04_0 = {0xcc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount04_0_value 0xcc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount05_0 = {0xcd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount05_0_value 0xcd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount06_0 = {0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount06_0_value 0xce
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount07_0 = {0xcf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount07_0_value 0xcf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount08_0 = {0xd0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount08_0_value 0xd0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount09_0 = {0xd1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount09_0_value 0xd1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount10_0 = {0xd2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount10_0_value 0xd2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount11_0 = {0xd3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount11_0_value 0xd3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount12_0 = {0xd4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount12_0_value 0xd4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount13_0 = {0xd5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount13_0_value 0xd5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount14_0 = {0xd6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount14_0_value 0xd6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount15_0 = {0xd7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount15_0_value 0xd7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount16_0 = {0xd8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount16_0_value 0xd8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount17_0 = {0xd9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount17_0_value 0xd9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount18_0 = {0xda, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount18_0_value 0xda
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount19_0 = {0xdb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount19_0_value 0xdb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount20_0 = {0xdc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount20_0_value 0xdc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount21_0 = {0xdd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount21_0_value 0xdd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount22_0 = {0xde, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount22_0_value 0xde
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount23_0 = {0xdf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount23_0_value 0xdf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount24_0 = {0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount24_0_value 0xe0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount01_1 = {0x12d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount01_1_value 0x12d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount02_1 = {0x12e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount02_1_value 0x12e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount03_1 = {0x12f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount03_1_value 0x12f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount04_1 = {0x130, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount04_1_value 0x130
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount05_1 = {0x131, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount05_1_value 0x131
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount06_1 = {0x132, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount06_1_value 0x132
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount07_1 = {0x133, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount07_1_value 0x133
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount08_1 = {0x134, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount08_1_value 0x134
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount09_1 = {0x135, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount09_1_value 0x135
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount10_1 = {0x136, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount10_1_value 0x136
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount11_1 = {0x137, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount11_1_value 0x137
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount12_1 = {0x138, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount12_1_value 0x138
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount13_1 = {0x139, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount13_1_value 0x139
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount14_1 = {0x13a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount14_1_value 0x13a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount15_1 = {0x13b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount15_1_value 0x13b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount16_1 = {0x13c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount16_1_value 0x13c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount17_1 = {0x13d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount17_1_value 0x13d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount18_1 = {0x13e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount18_1_value 0x13e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount19_1 = {0x13f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount19_1_value 0x13f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount20_1 = {0x140, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount20_1_value 0x140
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount21_1 = {0x141, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount21_1_value 0x141
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount22_1 = {0x142, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount22_1_value 0x142
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount23_1 = {0x143, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount23_1_value 0x143
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtFixedCount24_1 = {0x144, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtFixedCount24_1_value 0x144
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount01 = {0x191, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount01_value 0x191
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount02 = {0x192, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount02_value 0x192
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount03 = {0x193, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount03_value 0x193
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount04 = {0x194, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount04_value 0x194
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount05 = {0x195, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount05_value 0x195
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount06 = {0x196, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount06_value 0x196
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount07 = {0x197, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount07_value 0x197
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount08 = {0x198, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount08_value 0x198
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount09 = {0x199, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount09_value 0x199
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount10 = {0x19a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount10_value 0x19a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount11 = {0x19b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount11_value 0x19b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount12 = {0x19c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount12_value 0x19c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount13 = {0x19d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount13_value 0x19d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount14 = {0x19e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount14_value 0x19e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount15 = {0x19f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount15_value 0x19f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount16 = {0x1a0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount16_value 0x1a0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount17 = {0x1a1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount17_value 0x1a1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount18 = {0x1a2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount18_value 0x1a2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount19 = {0x1a3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount19_value 0x1a3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount20 = {0x1a4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount20_value 0x1a4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount21 = {0x1a5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount21_value 0x1a5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount22 = {0x1a6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount22_value 0x1a6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount23 = {0x1a7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount23_value 0x1a7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarCount24 = {0x1a8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarCount24_value 0x1a8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLength1 = {0x1f5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLength1_value 0x1f5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLength2 = {0x1f6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLength2_value 0x1f6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLength3 = {0x1f7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLength3_value 0x1f7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLength4 = {0x1f8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLength4_value 0x1f8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount1_0 = {0x259, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount1_0_value 0x259
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount2_0 = {0x25a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount2_0_value 0x25a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount3_0 = {0x25b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount3_0_value 0x25b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount4_0 = {0x25c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount4_0_value 0x25c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount1_1 = {0x25d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount1_1_value 0x25d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount2_1 = {0x25e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount2_1_value 0x25e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount3_1 = {0x25f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount3_1_value 0x25f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount4_1 = {0x260, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount4_1_value 0x260
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount1_2 = {0x261, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount1_2_value 0x261
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount2_2 = {0x262, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount2_2_value 0x262
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount3_2 = {0x263, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount3_2_value 0x263
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtVarLengthFixedCount4_2 = {0x264, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtVarLengthFixedCount4_2_value 0x264
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EvtOutTypes = {0x3e8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EvtOutTypes_value 0x3e8

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Event Enablement Bits
//
EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG TypeManglingEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG TypeManglingKeywords[1] = {0x0};
EXTERN_C __declspec(selectany) const unsigned char TypeManglingLevels[1] = {0};

//
// Provider context
//
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT TypeMangling_Context = {0, (ULONG_PTR)TypeMangling_Traits, 0, 0, 0, 0, 0, 0, 1, TypeManglingEnableBits, TypeManglingKeywords, TypeManglingLevels};

//
// Provider REGHANDLE
//
#define TypeManglingHandle (TypeMangling_Context.RegistrationHandle)

//
// This macro is set to 0, indicating that the EventWrite[Name] macros do not
// have an Activity parameter. This is controlled by the -km and -um options.
//
#define TypeMangling_EventWriteActivity 0

//
// Register with ETW using the control GUID specified in the manifest.
// Invoke this macro during module initialization (i.e. program startup,
// DLL process attach, or driver load) to initialize the provider.
// Note that if this function returns an error, the error means that
// will not work, but no action needs to be taken -- even if EventRegister
// returns an error, it is generally safe to use EventWrite and
// EventUnregister macros (they will be no-ops if EventRegister failed).
//
#ifndef EventRegisterTypeMangling
#define EventRegisterTypeMangling() McGenEventRegister(&TypeMangling, McGenControlCallbackV2, &TypeMangling_Context, &TypeManglingHandle)
#endif

//
// Register with ETW using a specific control GUID (i.e. a GUID other than what
// is specified in the manifest). Advanced scenarios only.
//
#ifndef EventRegisterByGuidTypeMangling
#define EventRegisterByGuidTypeMangling(Guid) McGenEventRegister(&(Guid), McGenControlCallbackV2, &TypeMangling_Context, &TypeManglingHandle)
#endif

//
// Unregister with ETW and close the provider.
// Invoke this macro during module shutdown (i.e. program exit, DLL process
// detach, or driver unload) to unregister the provider.
// Note that you MUST call EventUnregister before DLL or driver unload
// (not optional): failure to unregister a provider before DLL or driver unload
// will result in crashes.
//
#ifndef EventUnregisterTypeMangling
#define EventUnregisterTypeMangling() McGenEventUnregister(&TypeManglingHandle)
#endif

//
// Enablement check macro for Evt01
//
#define EventEnabledEvt01() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt01
//
#define EventWriteEvt01(Field) \
        MCGEN_EVENT_ENABLED(Evt01) \
        ? McTemplateU0z(&TypeMangling_Context, &Evt01, Field) : 0
#define EventWriteEvt01_AssumeEnabled(Field) \
        McTemplateU0z(&TypeMangling_Context, &Evt01, Field)

//
// Enablement check macro for Evt02
//
#define EventEnabledEvt02() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt02
//
#define EventWriteEvt02(Field) \
        MCGEN_EVENT_ENABLED(Evt02) \
        ? McTemplateU0s(&TypeMangling_Context, &Evt02, Field) : 0
#define EventWriteEvt02_AssumeEnabled(Field) \
        McTemplateU0s(&TypeMangling_Context, &Evt02, Field)

//
// Enablement check macro for Evt03
//
#define EventEnabledEvt03() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt03
//
#define EventWriteEvt03(Field) \
        MCGEN_EVENT_ENABLED(Evt03) \
        ? McTemplateU0c(&TypeMangling_Context, &Evt03, Field) : 0
#define EventWriteEvt03_AssumeEnabled(Field) \
        McTemplateU0c(&TypeMangling_Context, &Evt03, Field)

//
// Enablement check macro for Evt04
//
#define EventEnabledEvt04() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt04
//
#define EventWriteEvt04(Field) \
        MCGEN_EVENT_ENABLED(Evt04) \
        ? McTemplateU0u(&TypeMangling_Context, &Evt04, Field) : 0
#define EventWriteEvt04_AssumeEnabled(Field) \
        McTemplateU0u(&TypeMangling_Context, &Evt04, Field)

//
// Enablement check macro for Evt05
//
#define EventEnabledEvt05() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt05
//
#define EventWriteEvt05(Field) \
        MCGEN_EVENT_ENABLED(Evt05) \
        ? McTemplateU0l(&TypeMangling_Context, &Evt05, Field) : 0
#define EventWriteEvt05_AssumeEnabled(Field) \
        McTemplateU0l(&TypeMangling_Context, &Evt05, Field)

//
// Enablement check macro for Evt06
//
#define EventEnabledEvt06() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt06
//
#define EventWriteEvt06(Field) \
        MCGEN_EVENT_ENABLED(Evt06) \
        ? McTemplateU0h(&TypeMangling_Context, &Evt06, Field) : 0
#define EventWriteEvt06_AssumeEnabled(Field) \
        McTemplateU0h(&TypeMangling_Context, &Evt06, Field)

//
// Enablement check macro for Evt07
//
#define EventEnabledEvt07() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt07
//
#define EventWriteEvt07(Field) \
        MCGEN_EVENT_ENABLED(Evt07) \
        ? McTemplateU0d(&TypeMangling_Context, &Evt07, Field) : 0
#define EventWriteEvt07_AssumeEnabled(Field) \
        McTemplateU0d(&TypeMangling_Context, &Evt07, Field)

//
// Enablement check macro for Evt08
//
#define EventEnabledEvt08() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt08
//
#define EventWriteEvt08(Field) \
        MCGEN_EVENT_ENABLED(Evt08) \
        ? McTemplateU0q(&TypeMangling_Context, &Evt08, Field) : 0
#define EventWriteEvt08_AssumeEnabled(Field) \
        McTemplateU0q(&TypeMangling_Context, &Evt08, Field)

//
// Enablement check macro for Evt09
//
#define EventEnabledEvt09() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt09
//
#define EventWriteEvt09(Field) \
        MCGEN_EVENT_ENABLED(Evt09) \
        ? McTemplateU0i(&TypeMangling_Context, &Evt09, Field) : 0
#define EventWriteEvt09_AssumeEnabled(Field) \
        McTemplateU0i(&TypeMangling_Context, &Evt09, Field)

//
// Enablement check macro for Evt10
//
#define EventEnabledEvt10() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt10
//
#define EventWriteEvt10(Field) \
        MCGEN_EVENT_ENABLED(Evt10) \
        ? McTemplateU0x(&TypeMangling_Context, &Evt10, Field) : 0
#define EventWriteEvt10_AssumeEnabled(Field) \
        McTemplateU0x(&TypeMangling_Context, &Evt10, Field)

//
// Enablement check macro for Evt11
//
#define EventEnabledEvt11() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt11
//
#define EventWriteEvt11(Field) \
        MCGEN_EVENT_ENABLED(Evt11) \
        ? McTemplateU0f(&TypeMangling_Context, &Evt11, Field) : 0
#define EventWriteEvt11_AssumeEnabled(Field) \
        McTemplateU0f(&TypeMangling_Context, &Evt11, Field)

//
// Enablement check macro for Evt12
//
#define EventEnabledEvt12() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt12
//
#define EventWriteEvt12(Field) \
        MCGEN_EVENT_ENABLED(Evt12) \
        ? McTemplateU0g(&TypeMangling_Context, &Evt12, Field) : 0
#define EventWriteEvt12_AssumeEnabled(Field) \
        McTemplateU0g(&TypeMangling_Context, &Evt12, Field)

//
// Enablement check macro for Evt13
//
#define EventEnabledEvt13() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt13
//
#define EventWriteEvt13(Field) \
        MCGEN_EVENT_ENABLED(Evt13) \
        ? McTemplateU0t(&TypeMangling_Context, &Evt13, Field) : 0
#define EventWriteEvt13_AssumeEnabled(Field) \
        McTemplateU0t(&TypeMangling_Context, &Evt13, Field)

//
// Enablement check macro for Evt14
//
#define EventEnabledEvt14() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt14
//
#define EventWriteEvt14(Field) \
        MCGEN_EVENT_ENABLED(Evt14) \
        ? McTemplateU0b3(&TypeMangling_Context, &Evt14, Field) : 0
#define EventWriteEvt14_AssumeEnabled(Field) \
        McTemplateU0b3(&TypeMangling_Context, &Evt14, Field)

//
// Enablement check macro for Evt15
//
#define EventEnabledEvt15() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt15
//
#define EventWriteEvt15(Field) \
        MCGEN_EVENT_ENABLED(Evt15) \
        ? McTemplateU0j(&TypeMangling_Context, &Evt15, Field) : 0
#define EventWriteEvt15_AssumeEnabled(Field) \
        McTemplateU0j(&TypeMangling_Context, &Evt15, Field)

//
// Enablement check macro for Evt16
//
#define EventEnabledEvt16() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt16
//
#define EventWriteEvt16(Field) \
        MCGEN_EVENT_ENABLED(Evt16) \
        ? McTemplateU0p(&TypeMangling_Context, &Evt16, Field) : 0
#define EventWriteEvt16_AssumeEnabled(Field) \
        McTemplateU0p(&TypeMangling_Context, &Evt16, Field)

//
// Enablement check macro for Evt17
//
#define EventEnabledEvt17() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt17
//
#define EventWriteEvt17(Field) \
        MCGEN_EVENT_ENABLED(Evt17) \
        ? McTemplateU0m(&TypeMangling_Context, &Evt17, Field) : 0
#define EventWriteEvt17_AssumeEnabled(Field) \
        McTemplateU0m(&TypeMangling_Context, &Evt17, Field)

//
// Enablement check macro for Evt18
//
#define EventEnabledEvt18() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt18
//
#define EventWriteEvt18(Field) \
        MCGEN_EVENT_ENABLED(Evt18) \
        ? McTemplateU0y(&TypeMangling_Context, &Evt18, Field) : 0
#define EventWriteEvt18_AssumeEnabled(Field) \
        McTemplateU0y(&TypeMangling_Context, &Evt18, Field)

//
// Enablement check macro for Evt19
//
#define EventEnabledEvt19() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt19
//
#define EventWriteEvt19(Field) \
        MCGEN_EVENT_ENABLED(Evt19) \
        ? McTemplateU0k(&TypeMangling_Context, &Evt19, Field) : 0
#define EventWriteEvt19_AssumeEnabled(Field) \
        McTemplateU0k(&TypeMangling_Context, &Evt19, Field)

//
// Enablement check macro for Evt20
//
#define EventEnabledEvt20() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt20
//
#define EventWriteEvt20(Field) \
        MCGEN_EVENT_ENABLED(Evt20) \
        ? McTemplateU0d(&TypeMangling_Context, &Evt20, Field) : 0
#define EventWriteEvt20_AssumeEnabled(Field) \
        McTemplateU0d(&TypeMangling_Context, &Evt20, Field)

//
// Enablement check macro for Evt21
//
#define EventEnabledEvt21() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt21
//
#define EventWriteEvt21(Field) \
        MCGEN_EVENT_ENABLED(Evt21) \
        ? McTemplateU0i(&TypeMangling_Context, &Evt21, Field) : 0
#define EventWriteEvt21_AssumeEnabled(Field) \
        McTemplateU0i(&TypeMangling_Context, &Evt21, Field)

//
// Enablement check macro for Evt22
//
#define EventEnabledEvt22() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt22
//
#define EventWriteEvt22(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(Evt22) \
        ? McTemplateU0w(&TypeMangling_Context, &Evt22, Field_Len_, Field) : 0
#define EventWriteEvt22_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0w(&TypeMangling_Context, &Evt22, Field_Len_, Field)

//
// Enablement check macro for Evt23
//
#define EventEnabledEvt23() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt23
//
#define EventWriteEvt23(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(Evt23) \
        ? McTemplateU0a(&TypeMangling_Context, &Evt23, Field_Len_, Field) : 0
#define EventWriteEvt23_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0a(&TypeMangling_Context, &Evt23, Field_Len_, Field)

//
// Enablement check macro for Evt24
//
#define EventEnabledEvt24() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for Evt24
//
#define EventWriteEvt24(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(Evt24) \
        ? McTemplateU0e(&TypeMangling_Context, &Evt24, Field_Len_, Field) : 0
#define EventWriteEvt24_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0e(&TypeMangling_Context, &Evt24, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount01
//
#define EventEnabledEvtFixedCount01() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount01
//
// MC Note :: Macro for event id = 101
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtFixedCount01(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount01) \
        ? McTemplateU0ZR(&TypeMangling_Context, &EvtFixedCount01, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount01_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0ZR(&TypeMangling_Context, &EvtFixedCount01, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount02
//
#define EventEnabledEvtFixedCount02() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount02
//
// MC Note :: Macro for event id = 102
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtFixedCount02(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount02) \
        ? McTemplateU0SR(&TypeMangling_Context, &EvtFixedCount02, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount02_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0SR(&TypeMangling_Context, &EvtFixedCount02, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount03
//
#define EventEnabledEvtFixedCount03() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount03
//
#define EventWriteEvtFixedCount03(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount03) \
        ? McTemplateU0C5(&TypeMangling_Context, &EvtFixedCount03, Field) : 0
#define EventWriteEvtFixedCount03_AssumeEnabled(Field) \
        McTemplateU0C5(&TypeMangling_Context, &EvtFixedCount03, Field)

//
// Enablement check macro for EvtFixedCount04
//
#define EventEnabledEvtFixedCount04() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount04
//
#define EventWriteEvtFixedCount04(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount04) \
        ? McTemplateU0U5(&TypeMangling_Context, &EvtFixedCount04, Field) : 0
#define EventWriteEvtFixedCount04_AssumeEnabled(Field) \
        McTemplateU0U5(&TypeMangling_Context, &EvtFixedCount04, Field)

//
// Enablement check macro for EvtFixedCount05
//
#define EventEnabledEvtFixedCount05() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount05
//
#define EventWriteEvtFixedCount05(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount05) \
        ? McTemplateU0L5(&TypeMangling_Context, &EvtFixedCount05, Field) : 0
#define EventWriteEvtFixedCount05_AssumeEnabled(Field) \
        McTemplateU0L5(&TypeMangling_Context, &EvtFixedCount05, Field)

//
// Enablement check macro for EvtFixedCount06
//
#define EventEnabledEvtFixedCount06() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount06
//
#define EventWriteEvtFixedCount06(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount06) \
        ? McTemplateU0H5(&TypeMangling_Context, &EvtFixedCount06, Field) : 0
#define EventWriteEvtFixedCount06_AssumeEnabled(Field) \
        McTemplateU0H5(&TypeMangling_Context, &EvtFixedCount06, Field)

//
// Enablement check macro for EvtFixedCount07
//
#define EventEnabledEvtFixedCount07() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount07
//
#define EventWriteEvtFixedCount07(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount07) \
        ? McTemplateU0D5(&TypeMangling_Context, &EvtFixedCount07, Field) : 0
#define EventWriteEvtFixedCount07_AssumeEnabled(Field) \
        McTemplateU0D5(&TypeMangling_Context, &EvtFixedCount07, Field)

//
// Enablement check macro for EvtFixedCount08
//
#define EventEnabledEvtFixedCount08() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount08
//
#define EventWriteEvtFixedCount08(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount08) \
        ? McTemplateU0Q5(&TypeMangling_Context, &EvtFixedCount08, Field) : 0
#define EventWriteEvtFixedCount08_AssumeEnabled(Field) \
        McTemplateU0Q5(&TypeMangling_Context, &EvtFixedCount08, Field)

//
// Enablement check macro for EvtFixedCount09
//
#define EventEnabledEvtFixedCount09() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount09
//
#define EventWriteEvtFixedCount09(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount09) \
        ? McTemplateU0I5(&TypeMangling_Context, &EvtFixedCount09, Field) : 0
#define EventWriteEvtFixedCount09_AssumeEnabled(Field) \
        McTemplateU0I5(&TypeMangling_Context, &EvtFixedCount09, Field)

//
// Enablement check macro for EvtFixedCount10
//
#define EventEnabledEvtFixedCount10() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount10
//
#define EventWriteEvtFixedCount10(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount10) \
        ? McTemplateU0X5(&TypeMangling_Context, &EvtFixedCount10, Field) : 0
#define EventWriteEvtFixedCount10_AssumeEnabled(Field) \
        McTemplateU0X5(&TypeMangling_Context, &EvtFixedCount10, Field)

//
// Enablement check macro for EvtFixedCount11
//
#define EventEnabledEvtFixedCount11() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount11
//
#define EventWriteEvtFixedCount11(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount11) \
        ? McTemplateU0F5(&TypeMangling_Context, &EvtFixedCount11, Field) : 0
#define EventWriteEvtFixedCount11_AssumeEnabled(Field) \
        McTemplateU0F5(&TypeMangling_Context, &EvtFixedCount11, Field)

//
// Enablement check macro for EvtFixedCount12
//
#define EventEnabledEvtFixedCount12() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount12
//
#define EventWriteEvtFixedCount12(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount12) \
        ? McTemplateU0G5(&TypeMangling_Context, &EvtFixedCount12, Field) : 0
#define EventWriteEvtFixedCount12_AssumeEnabled(Field) \
        McTemplateU0G5(&TypeMangling_Context, &EvtFixedCount12, Field)

//
// Enablement check macro for EvtFixedCount13
//
#define EventEnabledEvtFixedCount13() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount13
//
#define EventWriteEvtFixedCount13(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount13) \
        ? McTemplateU0T5(&TypeMangling_Context, &EvtFixedCount13, Field) : 0
#define EventWriteEvtFixedCount13_AssumeEnabled(Field) \
        McTemplateU0T5(&TypeMangling_Context, &EvtFixedCount13, Field)

//
// Enablement check macro for EvtFixedCount14
//
#define EventEnabledEvtFixedCount14() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount14
//
#define EventWriteEvtFixedCount14(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount14) \
        ? McTemplateU0B15(&TypeMangling_Context, &EvtFixedCount14, Field) : 0
#define EventWriteEvtFixedCount14_AssumeEnabled(Field) \
        McTemplateU0B15(&TypeMangling_Context, &EvtFixedCount14, Field)

//
// Enablement check macro for EvtFixedCount15
//
#define EventEnabledEvtFixedCount15() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount15
//
#define EventWriteEvtFixedCount15(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount15) \
        ? McTemplateU0J5(&TypeMangling_Context, &EvtFixedCount15, Field) : 0
#define EventWriteEvtFixedCount15_AssumeEnabled(Field) \
        McTemplateU0J5(&TypeMangling_Context, &EvtFixedCount15, Field)

//
// Enablement check macro for EvtFixedCount16
//
#define EventEnabledEvtFixedCount16() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount16
//
#define EventWriteEvtFixedCount16(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount16) \
        ? McTemplateU0P5(&TypeMangling_Context, &EvtFixedCount16, Field) : 0
#define EventWriteEvtFixedCount16_AssumeEnabled(Field) \
        McTemplateU0P5(&TypeMangling_Context, &EvtFixedCount16, Field)

//
// Enablement check macro for EvtFixedCount17
//
#define EventEnabledEvtFixedCount17() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount17
//
#define EventWriteEvtFixedCount17(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount17) \
        ? McTemplateU0M5(&TypeMangling_Context, &EvtFixedCount17, Field) : 0
#define EventWriteEvtFixedCount17_AssumeEnabled(Field) \
        McTemplateU0M5(&TypeMangling_Context, &EvtFixedCount17, Field)

//
// Enablement check macro for EvtFixedCount18
//
#define EventEnabledEvtFixedCount18() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount18
//
#define EventWriteEvtFixedCount18(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount18) \
        ? McTemplateU0Y5(&TypeMangling_Context, &EvtFixedCount18, Field) : 0
#define EventWriteEvtFixedCount18_AssumeEnabled(Field) \
        McTemplateU0Y5(&TypeMangling_Context, &EvtFixedCount18, Field)

//
// Enablement check macro for EvtFixedCount19
//
#define EventEnabledEvtFixedCount19() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount19
//
// MC Note :: Macro for event id = 119
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtFixedCount19(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount19) \
        ? McTemplateU0K5(&TypeMangling_Context, &EvtFixedCount19, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount19_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0K5(&TypeMangling_Context, &EvtFixedCount19, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount20
//
#define EventEnabledEvtFixedCount20() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount20
//
#define EventWriteEvtFixedCount20(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount20) \
        ? McTemplateU0D5(&TypeMangling_Context, &EvtFixedCount20, Field) : 0
#define EventWriteEvtFixedCount20_AssumeEnabled(Field) \
        McTemplateU0D5(&TypeMangling_Context, &EvtFixedCount20, Field)

//
// Enablement check macro for EvtFixedCount21
//
#define EventEnabledEvtFixedCount21() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount21
//
#define EventWriteEvtFixedCount21(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount21) \
        ? McTemplateU0I5(&TypeMangling_Context, &EvtFixedCount21, Field) : 0
#define EventWriteEvtFixedCount21_AssumeEnabled(Field) \
        McTemplateU0I5(&TypeMangling_Context, &EvtFixedCount21, Field)

//
// Enablement check macro for EvtFixedCount22
//
#define EventEnabledEvtFixedCount22() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount22
//
// MC Note :: Macro for event id = 122
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtFixedCount22(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount22) \
        ? McTemplateU0W5(&TypeMangling_Context, &EvtFixedCount22, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount22_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0W5(&TypeMangling_Context, &EvtFixedCount22, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount23
//
#define EventEnabledEvtFixedCount23() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount23
//
// MC Note :: Macro for event id = 123
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtFixedCount23(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount23) \
        ? McTemplateU0A5(&TypeMangling_Context, &EvtFixedCount23, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount23_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0A5(&TypeMangling_Context, &EvtFixedCount23, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount24
//
#define EventEnabledEvtFixedCount24() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount24
//
// MC Note :: Macro for event id = 124
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtFixedCount24(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount24) \
        ? McTemplateU0E5(&TypeMangling_Context, &EvtFixedCount24, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount24_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0E5(&TypeMangling_Context, &EvtFixedCount24, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount01_0
//
#define EventEnabledEvtFixedCount01_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount01_0
//
#define EventWriteEvtFixedCount01_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount01_0) \
        ? McTemplateU0z(&TypeMangling_Context, &EvtFixedCount01_0, Field) : 0
#define EventWriteEvtFixedCount01_0_AssumeEnabled(Field) \
        McTemplateU0z(&TypeMangling_Context, &EvtFixedCount01_0, Field)

//
// Enablement check macro for EvtFixedCount02_0
//
#define EventEnabledEvtFixedCount02_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount02_0
//
#define EventWriteEvtFixedCount02_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount02_0) \
        ? McTemplateU0s(&TypeMangling_Context, &EvtFixedCount02_0, Field) : 0
#define EventWriteEvtFixedCount02_0_AssumeEnabled(Field) \
        McTemplateU0s(&TypeMangling_Context, &EvtFixedCount02_0, Field)

//
// Enablement check macro for EvtFixedCount03_0
//
#define EventEnabledEvtFixedCount03_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount03_0
//
#define EventWriteEvtFixedCount03_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount03_0) \
        ? McTemplateU0c(&TypeMangling_Context, &EvtFixedCount03_0, Field) : 0
#define EventWriteEvtFixedCount03_0_AssumeEnabled(Field) \
        McTemplateU0c(&TypeMangling_Context, &EvtFixedCount03_0, Field)

//
// Enablement check macro for EvtFixedCount04_0
//
#define EventEnabledEvtFixedCount04_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount04_0
//
#define EventWriteEvtFixedCount04_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount04_0) \
        ? McTemplateU0u(&TypeMangling_Context, &EvtFixedCount04_0, Field) : 0
#define EventWriteEvtFixedCount04_0_AssumeEnabled(Field) \
        McTemplateU0u(&TypeMangling_Context, &EvtFixedCount04_0, Field)

//
// Enablement check macro for EvtFixedCount05_0
//
#define EventEnabledEvtFixedCount05_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount05_0
//
#define EventWriteEvtFixedCount05_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount05_0) \
        ? McTemplateU0l(&TypeMangling_Context, &EvtFixedCount05_0, Field) : 0
#define EventWriteEvtFixedCount05_0_AssumeEnabled(Field) \
        McTemplateU0l(&TypeMangling_Context, &EvtFixedCount05_0, Field)

//
// Enablement check macro for EvtFixedCount06_0
//
#define EventEnabledEvtFixedCount06_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount06_0
//
#define EventWriteEvtFixedCount06_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount06_0) \
        ? McTemplateU0h(&TypeMangling_Context, &EvtFixedCount06_0, Field) : 0
#define EventWriteEvtFixedCount06_0_AssumeEnabled(Field) \
        McTemplateU0h(&TypeMangling_Context, &EvtFixedCount06_0, Field)

//
// Enablement check macro for EvtFixedCount07_0
//
#define EventEnabledEvtFixedCount07_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount07_0
//
#define EventWriteEvtFixedCount07_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount07_0) \
        ? McTemplateU0d(&TypeMangling_Context, &EvtFixedCount07_0, Field) : 0
#define EventWriteEvtFixedCount07_0_AssumeEnabled(Field) \
        McTemplateU0d(&TypeMangling_Context, &EvtFixedCount07_0, Field)

//
// Enablement check macro for EvtFixedCount08_0
//
#define EventEnabledEvtFixedCount08_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount08_0
//
#define EventWriteEvtFixedCount08_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount08_0) \
        ? McTemplateU0q(&TypeMangling_Context, &EvtFixedCount08_0, Field) : 0
#define EventWriteEvtFixedCount08_0_AssumeEnabled(Field) \
        McTemplateU0q(&TypeMangling_Context, &EvtFixedCount08_0, Field)

//
// Enablement check macro for EvtFixedCount09_0
//
#define EventEnabledEvtFixedCount09_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount09_0
//
#define EventWriteEvtFixedCount09_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount09_0) \
        ? McTemplateU0i(&TypeMangling_Context, &EvtFixedCount09_0, Field) : 0
#define EventWriteEvtFixedCount09_0_AssumeEnabled(Field) \
        McTemplateU0i(&TypeMangling_Context, &EvtFixedCount09_0, Field)

//
// Enablement check macro for EvtFixedCount10_0
//
#define EventEnabledEvtFixedCount10_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount10_0
//
#define EventWriteEvtFixedCount10_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount10_0) \
        ? McTemplateU0x(&TypeMangling_Context, &EvtFixedCount10_0, Field) : 0
#define EventWriteEvtFixedCount10_0_AssumeEnabled(Field) \
        McTemplateU0x(&TypeMangling_Context, &EvtFixedCount10_0, Field)

//
// Enablement check macro for EvtFixedCount11_0
//
#define EventEnabledEvtFixedCount11_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount11_0
//
#define EventWriteEvtFixedCount11_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount11_0) \
        ? McTemplateU0f(&TypeMangling_Context, &EvtFixedCount11_0, Field) : 0
#define EventWriteEvtFixedCount11_0_AssumeEnabled(Field) \
        McTemplateU0f(&TypeMangling_Context, &EvtFixedCount11_0, Field)

//
// Enablement check macro for EvtFixedCount12_0
//
#define EventEnabledEvtFixedCount12_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount12_0
//
#define EventWriteEvtFixedCount12_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount12_0) \
        ? McTemplateU0g(&TypeMangling_Context, &EvtFixedCount12_0, Field) : 0
#define EventWriteEvtFixedCount12_0_AssumeEnabled(Field) \
        McTemplateU0g(&TypeMangling_Context, &EvtFixedCount12_0, Field)

//
// Enablement check macro for EvtFixedCount13_0
//
#define EventEnabledEvtFixedCount13_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount13_0
//
#define EventWriteEvtFixedCount13_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount13_0) \
        ? McTemplateU0t(&TypeMangling_Context, &EvtFixedCount13_0, Field) : 0
#define EventWriteEvtFixedCount13_0_AssumeEnabled(Field) \
        McTemplateU0t(&TypeMangling_Context, &EvtFixedCount13_0, Field)

//
// Enablement check macro for EvtFixedCount14_0
//
#define EventEnabledEvtFixedCount14_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount14_0
//
#define EventWriteEvtFixedCount14_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount14_0) \
        ? McTemplateU0b3(&TypeMangling_Context, &EvtFixedCount14_0, Field) : 0
#define EventWriteEvtFixedCount14_0_AssumeEnabled(Field) \
        McTemplateU0b3(&TypeMangling_Context, &EvtFixedCount14_0, Field)

//
// Enablement check macro for EvtFixedCount15_0
//
#define EventEnabledEvtFixedCount15_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount15_0
//
#define EventWriteEvtFixedCount15_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount15_0) \
        ? McTemplateU0j(&TypeMangling_Context, &EvtFixedCount15_0, Field) : 0
#define EventWriteEvtFixedCount15_0_AssumeEnabled(Field) \
        McTemplateU0j(&TypeMangling_Context, &EvtFixedCount15_0, Field)

//
// Enablement check macro for EvtFixedCount16_0
//
#define EventEnabledEvtFixedCount16_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount16_0
//
#define EventWriteEvtFixedCount16_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount16_0) \
        ? McTemplateU0p(&TypeMangling_Context, &EvtFixedCount16_0, Field) : 0
#define EventWriteEvtFixedCount16_0_AssumeEnabled(Field) \
        McTemplateU0p(&TypeMangling_Context, &EvtFixedCount16_0, Field)

//
// Enablement check macro for EvtFixedCount17_0
//
#define EventEnabledEvtFixedCount17_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount17_0
//
#define EventWriteEvtFixedCount17_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount17_0) \
        ? McTemplateU0m(&TypeMangling_Context, &EvtFixedCount17_0, Field) : 0
#define EventWriteEvtFixedCount17_0_AssumeEnabled(Field) \
        McTemplateU0m(&TypeMangling_Context, &EvtFixedCount17_0, Field)

//
// Enablement check macro for EvtFixedCount18_0
//
#define EventEnabledEvtFixedCount18_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount18_0
//
#define EventWriteEvtFixedCount18_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount18_0) \
        ? McTemplateU0y(&TypeMangling_Context, &EvtFixedCount18_0, Field) : 0
#define EventWriteEvtFixedCount18_0_AssumeEnabled(Field) \
        McTemplateU0y(&TypeMangling_Context, &EvtFixedCount18_0, Field)

//
// Enablement check macro for EvtFixedCount19_0
//
#define EventEnabledEvtFixedCount19_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount19_0
//
#define EventWriteEvtFixedCount19_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount19_0) \
        ? McTemplateU0k(&TypeMangling_Context, &EvtFixedCount19_0, Field) : 0
#define EventWriteEvtFixedCount19_0_AssumeEnabled(Field) \
        McTemplateU0k(&TypeMangling_Context, &EvtFixedCount19_0, Field)

//
// Enablement check macro for EvtFixedCount20_0
//
#define EventEnabledEvtFixedCount20_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount20_0
//
#define EventWriteEvtFixedCount20_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount20_0) \
        ? McTemplateU0d(&TypeMangling_Context, &EvtFixedCount20_0, Field) : 0
#define EventWriteEvtFixedCount20_0_AssumeEnabled(Field) \
        McTemplateU0d(&TypeMangling_Context, &EvtFixedCount20_0, Field)

//
// Enablement check macro for EvtFixedCount21_0
//
#define EventEnabledEvtFixedCount21_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount21_0
//
#define EventWriteEvtFixedCount21_0(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount21_0) \
        ? McTemplateU0i(&TypeMangling_Context, &EvtFixedCount21_0, Field) : 0
#define EventWriteEvtFixedCount21_0_AssumeEnabled(Field) \
        McTemplateU0i(&TypeMangling_Context, &EvtFixedCount21_0, Field)

//
// Enablement check macro for EvtFixedCount22_0
//
#define EventEnabledEvtFixedCount22_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount22_0
//
#define EventWriteEvtFixedCount22_0(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount22_0) \
        ? McTemplateU0w(&TypeMangling_Context, &EvtFixedCount22_0, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount22_0_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0w(&TypeMangling_Context, &EvtFixedCount22_0, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount23_0
//
#define EventEnabledEvtFixedCount23_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount23_0
//
#define EventWriteEvtFixedCount23_0(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount23_0) \
        ? McTemplateU0a(&TypeMangling_Context, &EvtFixedCount23_0, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount23_0_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0a(&TypeMangling_Context, &EvtFixedCount23_0, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount24_0
//
#define EventEnabledEvtFixedCount24_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount24_0
//
#define EventWriteEvtFixedCount24_0(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount24_0) \
        ? McTemplateU0e(&TypeMangling_Context, &EvtFixedCount24_0, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount24_0_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0e(&TypeMangling_Context, &EvtFixedCount24_0, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount01_1
//
#define EventEnabledEvtFixedCount01_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount01_1
//
#define EventWriteEvtFixedCount01_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount01_1) \
        ? McTemplateU0z(&TypeMangling_Context, &EvtFixedCount01_1, Field) : 0
#define EventWriteEvtFixedCount01_1_AssumeEnabled(Field) \
        McTemplateU0z(&TypeMangling_Context, &EvtFixedCount01_1, Field)

//
// Enablement check macro for EvtFixedCount02_1
//
#define EventEnabledEvtFixedCount02_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount02_1
//
#define EventWriteEvtFixedCount02_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount02_1) \
        ? McTemplateU0s(&TypeMangling_Context, &EvtFixedCount02_1, Field) : 0
#define EventWriteEvtFixedCount02_1_AssumeEnabled(Field) \
        McTemplateU0s(&TypeMangling_Context, &EvtFixedCount02_1, Field)

//
// Enablement check macro for EvtFixedCount03_1
//
#define EventEnabledEvtFixedCount03_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount03_1
//
#define EventWriteEvtFixedCount03_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount03_1) \
        ? McTemplateU0c(&TypeMangling_Context, &EvtFixedCount03_1, Field) : 0
#define EventWriteEvtFixedCount03_1_AssumeEnabled(Field) \
        McTemplateU0c(&TypeMangling_Context, &EvtFixedCount03_1, Field)

//
// Enablement check macro for EvtFixedCount04_1
//
#define EventEnabledEvtFixedCount04_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount04_1
//
#define EventWriteEvtFixedCount04_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount04_1) \
        ? McTemplateU0u(&TypeMangling_Context, &EvtFixedCount04_1, Field) : 0
#define EventWriteEvtFixedCount04_1_AssumeEnabled(Field) \
        McTemplateU0u(&TypeMangling_Context, &EvtFixedCount04_1, Field)

//
// Enablement check macro for EvtFixedCount05_1
//
#define EventEnabledEvtFixedCount05_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount05_1
//
#define EventWriteEvtFixedCount05_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount05_1) \
        ? McTemplateU0l(&TypeMangling_Context, &EvtFixedCount05_1, Field) : 0
#define EventWriteEvtFixedCount05_1_AssumeEnabled(Field) \
        McTemplateU0l(&TypeMangling_Context, &EvtFixedCount05_1, Field)

//
// Enablement check macro for EvtFixedCount06_1
//
#define EventEnabledEvtFixedCount06_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount06_1
//
#define EventWriteEvtFixedCount06_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount06_1) \
        ? McTemplateU0h(&TypeMangling_Context, &EvtFixedCount06_1, Field) : 0
#define EventWriteEvtFixedCount06_1_AssumeEnabled(Field) \
        McTemplateU0h(&TypeMangling_Context, &EvtFixedCount06_1, Field)

//
// Enablement check macro for EvtFixedCount07_1
//
#define EventEnabledEvtFixedCount07_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount07_1
//
#define EventWriteEvtFixedCount07_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount07_1) \
        ? McTemplateU0d(&TypeMangling_Context, &EvtFixedCount07_1, Field) : 0
#define EventWriteEvtFixedCount07_1_AssumeEnabled(Field) \
        McTemplateU0d(&TypeMangling_Context, &EvtFixedCount07_1, Field)

//
// Enablement check macro for EvtFixedCount08_1
//
#define EventEnabledEvtFixedCount08_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount08_1
//
#define EventWriteEvtFixedCount08_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount08_1) \
        ? McTemplateU0q(&TypeMangling_Context, &EvtFixedCount08_1, Field) : 0
#define EventWriteEvtFixedCount08_1_AssumeEnabled(Field) \
        McTemplateU0q(&TypeMangling_Context, &EvtFixedCount08_1, Field)

//
// Enablement check macro for EvtFixedCount09_1
//
#define EventEnabledEvtFixedCount09_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount09_1
//
#define EventWriteEvtFixedCount09_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount09_1) \
        ? McTemplateU0i(&TypeMangling_Context, &EvtFixedCount09_1, Field) : 0
#define EventWriteEvtFixedCount09_1_AssumeEnabled(Field) \
        McTemplateU0i(&TypeMangling_Context, &EvtFixedCount09_1, Field)

//
// Enablement check macro for EvtFixedCount10_1
//
#define EventEnabledEvtFixedCount10_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount10_1
//
#define EventWriteEvtFixedCount10_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount10_1) \
        ? McTemplateU0x(&TypeMangling_Context, &EvtFixedCount10_1, Field) : 0
#define EventWriteEvtFixedCount10_1_AssumeEnabled(Field) \
        McTemplateU0x(&TypeMangling_Context, &EvtFixedCount10_1, Field)

//
// Enablement check macro for EvtFixedCount11_1
//
#define EventEnabledEvtFixedCount11_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount11_1
//
#define EventWriteEvtFixedCount11_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount11_1) \
        ? McTemplateU0f(&TypeMangling_Context, &EvtFixedCount11_1, Field) : 0
#define EventWriteEvtFixedCount11_1_AssumeEnabled(Field) \
        McTemplateU0f(&TypeMangling_Context, &EvtFixedCount11_1, Field)

//
// Enablement check macro for EvtFixedCount12_1
//
#define EventEnabledEvtFixedCount12_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount12_1
//
#define EventWriteEvtFixedCount12_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount12_1) \
        ? McTemplateU0g(&TypeMangling_Context, &EvtFixedCount12_1, Field) : 0
#define EventWriteEvtFixedCount12_1_AssumeEnabled(Field) \
        McTemplateU0g(&TypeMangling_Context, &EvtFixedCount12_1, Field)

//
// Enablement check macro for EvtFixedCount13_1
//
#define EventEnabledEvtFixedCount13_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount13_1
//
#define EventWriteEvtFixedCount13_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount13_1) \
        ? McTemplateU0t(&TypeMangling_Context, &EvtFixedCount13_1, Field) : 0
#define EventWriteEvtFixedCount13_1_AssumeEnabled(Field) \
        McTemplateU0t(&TypeMangling_Context, &EvtFixedCount13_1, Field)

//
// Enablement check macro for EvtFixedCount14_1
//
#define EventEnabledEvtFixedCount14_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount14_1
//
#define EventWriteEvtFixedCount14_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount14_1) \
        ? McTemplateU0b3(&TypeMangling_Context, &EvtFixedCount14_1, Field) : 0
#define EventWriteEvtFixedCount14_1_AssumeEnabled(Field) \
        McTemplateU0b3(&TypeMangling_Context, &EvtFixedCount14_1, Field)

//
// Enablement check macro for EvtFixedCount15_1
//
#define EventEnabledEvtFixedCount15_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount15_1
//
#define EventWriteEvtFixedCount15_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount15_1) \
        ? McTemplateU0j(&TypeMangling_Context, &EvtFixedCount15_1, Field) : 0
#define EventWriteEvtFixedCount15_1_AssumeEnabled(Field) \
        McTemplateU0j(&TypeMangling_Context, &EvtFixedCount15_1, Field)

//
// Enablement check macro for EvtFixedCount16_1
//
#define EventEnabledEvtFixedCount16_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount16_1
//
#define EventWriteEvtFixedCount16_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount16_1) \
        ? McTemplateU0p(&TypeMangling_Context, &EvtFixedCount16_1, Field) : 0
#define EventWriteEvtFixedCount16_1_AssumeEnabled(Field) \
        McTemplateU0p(&TypeMangling_Context, &EvtFixedCount16_1, Field)

//
// Enablement check macro for EvtFixedCount17_1
//
#define EventEnabledEvtFixedCount17_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount17_1
//
#define EventWriteEvtFixedCount17_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount17_1) \
        ? McTemplateU0m(&TypeMangling_Context, &EvtFixedCount17_1, Field) : 0
#define EventWriteEvtFixedCount17_1_AssumeEnabled(Field) \
        McTemplateU0m(&TypeMangling_Context, &EvtFixedCount17_1, Field)

//
// Enablement check macro for EvtFixedCount18_1
//
#define EventEnabledEvtFixedCount18_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount18_1
//
#define EventWriteEvtFixedCount18_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount18_1) \
        ? McTemplateU0y(&TypeMangling_Context, &EvtFixedCount18_1, Field) : 0
#define EventWriteEvtFixedCount18_1_AssumeEnabled(Field) \
        McTemplateU0y(&TypeMangling_Context, &EvtFixedCount18_1, Field)

//
// Enablement check macro for EvtFixedCount19_1
//
#define EventEnabledEvtFixedCount19_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount19_1
//
#define EventWriteEvtFixedCount19_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount19_1) \
        ? McTemplateU0k(&TypeMangling_Context, &EvtFixedCount19_1, Field) : 0
#define EventWriteEvtFixedCount19_1_AssumeEnabled(Field) \
        McTemplateU0k(&TypeMangling_Context, &EvtFixedCount19_1, Field)

//
// Enablement check macro for EvtFixedCount20_1
//
#define EventEnabledEvtFixedCount20_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount20_1
//
#define EventWriteEvtFixedCount20_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount20_1) \
        ? McTemplateU0d(&TypeMangling_Context, &EvtFixedCount20_1, Field) : 0
#define EventWriteEvtFixedCount20_1_AssumeEnabled(Field) \
        McTemplateU0d(&TypeMangling_Context, &EvtFixedCount20_1, Field)

//
// Enablement check macro for EvtFixedCount21_1
//
#define EventEnabledEvtFixedCount21_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount21_1
//
#define EventWriteEvtFixedCount21_1(Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount21_1) \
        ? McTemplateU0i(&TypeMangling_Context, &EvtFixedCount21_1, Field) : 0
#define EventWriteEvtFixedCount21_1_AssumeEnabled(Field) \
        McTemplateU0i(&TypeMangling_Context, &EvtFixedCount21_1, Field)

//
// Enablement check macro for EvtFixedCount22_1
//
#define EventEnabledEvtFixedCount22_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount22_1
//
#define EventWriteEvtFixedCount22_1(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount22_1) \
        ? McTemplateU0w(&TypeMangling_Context, &EvtFixedCount22_1, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount22_1_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0w(&TypeMangling_Context, &EvtFixedCount22_1, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount23_1
//
#define EventEnabledEvtFixedCount23_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount23_1
//
#define EventWriteEvtFixedCount23_1(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount23_1) \
        ? McTemplateU0a(&TypeMangling_Context, &EvtFixedCount23_1, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount23_1_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0a(&TypeMangling_Context, &EvtFixedCount23_1, Field_Len_, Field)

//
// Enablement check macro for EvtFixedCount24_1
//
#define EventEnabledEvtFixedCount24_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtFixedCount24_1
//
#define EventWriteEvtFixedCount24_1(Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtFixedCount24_1) \
        ? McTemplateU0e(&TypeMangling_Context, &EvtFixedCount24_1, Field_Len_, Field) : 0
#define EventWriteEvtFixedCount24_1_AssumeEnabled(Field_Len_, Field) \
        McTemplateU0e(&TypeMangling_Context, &EvtFixedCount24_1, Field_Len_, Field)

//
// Enablement check macro for EvtVarCount01
//
#define EventEnabledEvtVarCount01() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount01
//
// MC Note :: Macro for event id = 401
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtVarCount01(VarCount, Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount01) \
        ? McTemplateU0qZR(&TypeMangling_Context, &EvtVarCount01, VarCount, Field_Len_, Field) : 0
#define EventWriteEvtVarCount01_AssumeEnabled(VarCount, Field_Len_, Field) \
        McTemplateU0qZR(&TypeMangling_Context, &EvtVarCount01, VarCount, Field_Len_, Field)

//
// Enablement check macro for EvtVarCount02
//
#define EventEnabledEvtVarCount02() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount02
//
// MC Note :: Macro for event id = 402
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtVarCount02(VarCount, Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount02) \
        ? McTemplateU0qSR(&TypeMangling_Context, &EvtVarCount02, VarCount, Field_Len_, Field) : 0
#define EventWriteEvtVarCount02_AssumeEnabled(VarCount, Field_Len_, Field) \
        McTemplateU0qSR(&TypeMangling_Context, &EvtVarCount02, VarCount, Field_Len_, Field)

//
// Enablement check macro for EvtVarCount03
//
#define EventEnabledEvtVarCount03() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount03
//
#define EventWriteEvtVarCount03(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount03) \
        ? McTemplateU0qCR0(&TypeMangling_Context, &EvtVarCount03, VarCount, Field) : 0
#define EventWriteEvtVarCount03_AssumeEnabled(VarCount, Field) \
        McTemplateU0qCR0(&TypeMangling_Context, &EvtVarCount03, VarCount, Field)

//
// Enablement check macro for EvtVarCount04
//
#define EventEnabledEvtVarCount04() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount04
//
#define EventWriteEvtVarCount04(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount04) \
        ? McTemplateU0qUR0(&TypeMangling_Context, &EvtVarCount04, VarCount, Field) : 0
#define EventWriteEvtVarCount04_AssumeEnabled(VarCount, Field) \
        McTemplateU0qUR0(&TypeMangling_Context, &EvtVarCount04, VarCount, Field)

//
// Enablement check macro for EvtVarCount05
//
#define EventEnabledEvtVarCount05() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount05
//
#define EventWriteEvtVarCount05(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount05) \
        ? McTemplateU0qLR0(&TypeMangling_Context, &EvtVarCount05, VarCount, Field) : 0
#define EventWriteEvtVarCount05_AssumeEnabled(VarCount, Field) \
        McTemplateU0qLR0(&TypeMangling_Context, &EvtVarCount05, VarCount, Field)

//
// Enablement check macro for EvtVarCount06
//
#define EventEnabledEvtVarCount06() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount06
//
#define EventWriteEvtVarCount06(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount06) \
        ? McTemplateU0qHR0(&TypeMangling_Context, &EvtVarCount06, VarCount, Field) : 0
#define EventWriteEvtVarCount06_AssumeEnabled(VarCount, Field) \
        McTemplateU0qHR0(&TypeMangling_Context, &EvtVarCount06, VarCount, Field)

//
// Enablement check macro for EvtVarCount07
//
#define EventEnabledEvtVarCount07() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount07
//
#define EventWriteEvtVarCount07(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount07) \
        ? McTemplateU0qDR0(&TypeMangling_Context, &EvtVarCount07, VarCount, Field) : 0
#define EventWriteEvtVarCount07_AssumeEnabled(VarCount, Field) \
        McTemplateU0qDR0(&TypeMangling_Context, &EvtVarCount07, VarCount, Field)

//
// Enablement check macro for EvtVarCount08
//
#define EventEnabledEvtVarCount08() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount08
//
#define EventWriteEvtVarCount08(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount08) \
        ? McTemplateU0qQR0(&TypeMangling_Context, &EvtVarCount08, VarCount, Field) : 0
#define EventWriteEvtVarCount08_AssumeEnabled(VarCount, Field) \
        McTemplateU0qQR0(&TypeMangling_Context, &EvtVarCount08, VarCount, Field)

//
// Enablement check macro for EvtVarCount09
//
#define EventEnabledEvtVarCount09() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount09
//
#define EventWriteEvtVarCount09(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount09) \
        ? McTemplateU0qIR0(&TypeMangling_Context, &EvtVarCount09, VarCount, Field) : 0
#define EventWriteEvtVarCount09_AssumeEnabled(VarCount, Field) \
        McTemplateU0qIR0(&TypeMangling_Context, &EvtVarCount09, VarCount, Field)

//
// Enablement check macro for EvtVarCount10
//
#define EventEnabledEvtVarCount10() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount10
//
#define EventWriteEvtVarCount10(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount10) \
        ? McTemplateU0qXR0(&TypeMangling_Context, &EvtVarCount10, VarCount, Field) : 0
#define EventWriteEvtVarCount10_AssumeEnabled(VarCount, Field) \
        McTemplateU0qXR0(&TypeMangling_Context, &EvtVarCount10, VarCount, Field)

//
// Enablement check macro for EvtVarCount11
//
#define EventEnabledEvtVarCount11() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount11
//
#define EventWriteEvtVarCount11(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount11) \
        ? McTemplateU0qFR0(&TypeMangling_Context, &EvtVarCount11, VarCount, Field) : 0
#define EventWriteEvtVarCount11_AssumeEnabled(VarCount, Field) \
        McTemplateU0qFR0(&TypeMangling_Context, &EvtVarCount11, VarCount, Field)

//
// Enablement check macro for EvtVarCount12
//
#define EventEnabledEvtVarCount12() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount12
//
#define EventWriteEvtVarCount12(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount12) \
        ? McTemplateU0qGR0(&TypeMangling_Context, &EvtVarCount12, VarCount, Field) : 0
#define EventWriteEvtVarCount12_AssumeEnabled(VarCount, Field) \
        McTemplateU0qGR0(&TypeMangling_Context, &EvtVarCount12, VarCount, Field)

//
// Enablement check macro for EvtVarCount13
//
#define EventEnabledEvtVarCount13() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount13
//
#define EventWriteEvtVarCount13(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount13) \
        ? McTemplateU0qTR0(&TypeMangling_Context, &EvtVarCount13, VarCount, Field) : 0
#define EventWriteEvtVarCount13_AssumeEnabled(VarCount, Field) \
        McTemplateU0qTR0(&TypeMangling_Context, &EvtVarCount13, VarCount, Field)

//
// Enablement check macro for EvtVarCount14
//
#define EventEnabledEvtVarCount14() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount14
//
#define EventWriteEvtVarCount14(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount14) \
        ? McTemplateU0qB3r0(&TypeMangling_Context, &EvtVarCount14, VarCount, Field) : 0
#define EventWriteEvtVarCount14_AssumeEnabled(VarCount, Field) \
        McTemplateU0qB3r0(&TypeMangling_Context, &EvtVarCount14, VarCount, Field)

//
// Enablement check macro for EvtVarCount15
//
#define EventEnabledEvtVarCount15() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount15
//
#define EventWriteEvtVarCount15(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount15) \
        ? McTemplateU0qJR0(&TypeMangling_Context, &EvtVarCount15, VarCount, Field) : 0
#define EventWriteEvtVarCount15_AssumeEnabled(VarCount, Field) \
        McTemplateU0qJR0(&TypeMangling_Context, &EvtVarCount15, VarCount, Field)

//
// Enablement check macro for EvtVarCount16
//
#define EventEnabledEvtVarCount16() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount16
//
#define EventWriteEvtVarCount16(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount16) \
        ? McTemplateU0qPR0(&TypeMangling_Context, &EvtVarCount16, VarCount, Field) : 0
#define EventWriteEvtVarCount16_AssumeEnabled(VarCount, Field) \
        McTemplateU0qPR0(&TypeMangling_Context, &EvtVarCount16, VarCount, Field)

//
// Enablement check macro for EvtVarCount17
//
#define EventEnabledEvtVarCount17() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount17
//
#define EventWriteEvtVarCount17(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount17) \
        ? McTemplateU0qMR0(&TypeMangling_Context, &EvtVarCount17, VarCount, Field) : 0
#define EventWriteEvtVarCount17_AssumeEnabled(VarCount, Field) \
        McTemplateU0qMR0(&TypeMangling_Context, &EvtVarCount17, VarCount, Field)

//
// Enablement check macro for EvtVarCount18
//
#define EventEnabledEvtVarCount18() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount18
//
#define EventWriteEvtVarCount18(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount18) \
        ? McTemplateU0qYR0(&TypeMangling_Context, &EvtVarCount18, VarCount, Field) : 0
#define EventWriteEvtVarCount18_AssumeEnabled(VarCount, Field) \
        McTemplateU0qYR0(&TypeMangling_Context, &EvtVarCount18, VarCount, Field)

//
// Enablement check macro for EvtVarCount19
//
#define EventEnabledEvtVarCount19() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount19
//
// MC Note :: Macro for event id = 419
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtVarCount19(VarCount, Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount19) \
        ? McTemplateU0qKR0(&TypeMangling_Context, &EvtVarCount19, VarCount, Field_Len_, Field) : 0
#define EventWriteEvtVarCount19_AssumeEnabled(VarCount, Field_Len_, Field) \
        McTemplateU0qKR0(&TypeMangling_Context, &EvtVarCount19, VarCount, Field_Len_, Field)

//
// Enablement check macro for EvtVarCount20
//
#define EventEnabledEvtVarCount20() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount20
//
#define EventWriteEvtVarCount20(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount20) \
        ? McTemplateU0qDR0(&TypeMangling_Context, &EvtVarCount20, VarCount, Field) : 0
#define EventWriteEvtVarCount20_AssumeEnabled(VarCount, Field) \
        McTemplateU0qDR0(&TypeMangling_Context, &EvtVarCount20, VarCount, Field)

//
// Enablement check macro for EvtVarCount21
//
#define EventEnabledEvtVarCount21() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount21
//
#define EventWriteEvtVarCount21(VarCount, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount21) \
        ? McTemplateU0qIR0(&TypeMangling_Context, &EvtVarCount21, VarCount, Field) : 0
#define EventWriteEvtVarCount21_AssumeEnabled(VarCount, Field) \
        McTemplateU0qIR0(&TypeMangling_Context, &EvtVarCount21, VarCount, Field)

//
// Enablement check macro for EvtVarCount22
//
#define EventEnabledEvtVarCount22() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount22
//
// MC Note :: Macro for event id = 422
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtVarCount22(VarCount, Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount22) \
        ? McTemplateU0qWR0(&TypeMangling_Context, &EvtVarCount22, VarCount, Field_Len_, Field) : 0
#define EventWriteEvtVarCount22_AssumeEnabled(VarCount, Field_Len_, Field) \
        McTemplateU0qWR0(&TypeMangling_Context, &EvtVarCount22, VarCount, Field_Len_, Field)

//
// Enablement check macro for EvtVarCount23
//
#define EventEnabledEvtVarCount23() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount23
//
// MC Note :: Macro for event id = 423
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtVarCount23(VarCount, Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount23) \
        ? McTemplateU0qAR0(&TypeMangling_Context, &EvtVarCount23, VarCount, Field_Len_, Field) : 0
#define EventWriteEvtVarCount23_AssumeEnabled(VarCount, Field_Len_, Field) \
        McTemplateU0qAR0(&TypeMangling_Context, &EvtVarCount23, VarCount, Field_Len_, Field)

//
// Enablement check macro for EvtVarCount24
//
#define EventEnabledEvtVarCount24() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarCount24
//
// MC Note :: Macro for event id = 424
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEvtVarCount24(VarCount, Field_Len_, Field) \
        MCGEN_EVENT_ENABLED(EvtVarCount24) \
        ? McTemplateU0qER0(&TypeMangling_Context, &EvtVarCount24, VarCount, Field_Len_, Field) : 0
#define EventWriteEvtVarCount24_AssumeEnabled(VarCount, Field_Len_, Field) \
        McTemplateU0qER0(&TypeMangling_Context, &EvtVarCount24, VarCount, Field_Len_, Field)

//
// Enablement check macro for EvtVarLength1
//
#define EventEnabledEvtVarLength1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLength1
//
#define EventWriteEvtVarLength1(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLength1) \
        ? McTemplateU0uzr0(&TypeMangling_Context, &EvtVarLength1, VarLength, Field) : 0
#define EventWriteEvtVarLength1_AssumeEnabled(VarLength, Field) \
        McTemplateU0uzr0(&TypeMangling_Context, &EvtVarLength1, VarLength, Field)

//
// Enablement check macro for EvtVarLength2
//
#define EventEnabledEvtVarLength2() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLength2
//
#define EventWriteEvtVarLength2(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLength2) \
        ? McTemplateU0usr0(&TypeMangling_Context, &EvtVarLength2, VarLength, Field) : 0
#define EventWriteEvtVarLength2_AssumeEnabled(VarLength, Field) \
        McTemplateU0usr0(&TypeMangling_Context, &EvtVarLength2, VarLength, Field)

//
// Enablement check macro for EvtVarLength3
//
#define EventEnabledEvtVarLength3() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLength3
//
#define EventWriteEvtVarLength3(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLength3) \
        ? McTemplateU0ubr0(&TypeMangling_Context, &EvtVarLength3, VarLength, Field) : 0
#define EventWriteEvtVarLength3_AssumeEnabled(VarLength, Field) \
        McTemplateU0ubr0(&TypeMangling_Context, &EvtVarLength3, VarLength, Field)

//
// Enablement check macro for EvtVarLength4
//
#define EventEnabledEvtVarLength4() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLength4
//
#define EventWriteEvtVarLength4(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLength4) \
        ? McTemplateU0uk(&TypeMangling_Context, &EvtVarLength4, VarLength, Field) : 0
#define EventWriteEvtVarLength4_AssumeEnabled(VarLength, Field) \
        McTemplateU0uk(&TypeMangling_Context, &EvtVarLength4, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount1_0
//
#define EventEnabledEvtVarLengthFixedCount1_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount1_0
//
#define EventWriteEvtVarLengthFixedCount1_0(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount1_0) \
        ? McTemplateU0uzr0(&TypeMangling_Context, &EvtVarLengthFixedCount1_0, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount1_0_AssumeEnabled(VarLength, Field) \
        McTemplateU0uzr0(&TypeMangling_Context, &EvtVarLengthFixedCount1_0, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount2_0
//
#define EventEnabledEvtVarLengthFixedCount2_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount2_0
//
#define EventWriteEvtVarLengthFixedCount2_0(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount2_0) \
        ? McTemplateU0usr0(&TypeMangling_Context, &EvtVarLengthFixedCount2_0, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount2_0_AssumeEnabled(VarLength, Field) \
        McTemplateU0usr0(&TypeMangling_Context, &EvtVarLengthFixedCount2_0, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount3_0
//
#define EventEnabledEvtVarLengthFixedCount3_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount3_0
//
#define EventWriteEvtVarLengthFixedCount3_0(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount3_0) \
        ? McTemplateU0ubr0(&TypeMangling_Context, &EvtVarLengthFixedCount3_0, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount3_0_AssumeEnabled(VarLength, Field) \
        McTemplateU0ubr0(&TypeMangling_Context, &EvtVarLengthFixedCount3_0, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount4_0
//
#define EventEnabledEvtVarLengthFixedCount4_0() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount4_0
//
#define EventWriteEvtVarLengthFixedCount4_0(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount4_0) \
        ? McTemplateU0uk(&TypeMangling_Context, &EvtVarLengthFixedCount4_0, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount4_0_AssumeEnabled(VarLength, Field) \
        McTemplateU0uk(&TypeMangling_Context, &EvtVarLengthFixedCount4_0, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount1_1
//
#define EventEnabledEvtVarLengthFixedCount1_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount1_1
//
#define EventWriteEvtVarLengthFixedCount1_1(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount1_1) \
        ? McTemplateU0uzr0(&TypeMangling_Context, &EvtVarLengthFixedCount1_1, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount1_1_AssumeEnabled(VarLength, Field) \
        McTemplateU0uzr0(&TypeMangling_Context, &EvtVarLengthFixedCount1_1, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount2_1
//
#define EventEnabledEvtVarLengthFixedCount2_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount2_1
//
#define EventWriteEvtVarLengthFixedCount2_1(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount2_1) \
        ? McTemplateU0usr0(&TypeMangling_Context, &EvtVarLengthFixedCount2_1, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount2_1_AssumeEnabled(VarLength, Field) \
        McTemplateU0usr0(&TypeMangling_Context, &EvtVarLengthFixedCount2_1, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount3_1
//
#define EventEnabledEvtVarLengthFixedCount3_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount3_1
//
#define EventWriteEvtVarLengthFixedCount3_1(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount3_1) \
        ? McTemplateU0ubr0(&TypeMangling_Context, &EvtVarLengthFixedCount3_1, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount3_1_AssumeEnabled(VarLength, Field) \
        McTemplateU0ubr0(&TypeMangling_Context, &EvtVarLengthFixedCount3_1, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount4_1
//
#define EventEnabledEvtVarLengthFixedCount4_1() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount4_1
//
#define EventWriteEvtVarLengthFixedCount4_1(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount4_1) \
        ? McTemplateU0uk(&TypeMangling_Context, &EvtVarLengthFixedCount4_1, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount4_1_AssumeEnabled(VarLength, Field) \
        McTemplateU0uk(&TypeMangling_Context, &EvtVarLengthFixedCount4_1, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount1_2
//
#define EventEnabledEvtVarLengthFixedCount1_2() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount1_2
//
#define EventWriteEvtVarLengthFixedCount1_2(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount1_2) \
        ? McTemplateU0uzr0(&TypeMangling_Context, &EvtVarLengthFixedCount1_2, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount1_2_AssumeEnabled(VarLength, Field) \
        McTemplateU0uzr0(&TypeMangling_Context, &EvtVarLengthFixedCount1_2, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount2_2
//
#define EventEnabledEvtVarLengthFixedCount2_2() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount2_2
//
#define EventWriteEvtVarLengthFixedCount2_2(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount2_2) \
        ? McTemplateU0usr0(&TypeMangling_Context, &EvtVarLengthFixedCount2_2, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount2_2_AssumeEnabled(VarLength, Field) \
        McTemplateU0usr0(&TypeMangling_Context, &EvtVarLengthFixedCount2_2, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount3_2
//
#define EventEnabledEvtVarLengthFixedCount3_2() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount3_2
//
#define EventWriteEvtVarLengthFixedCount3_2(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount3_2) \
        ? McTemplateU0ubr0(&TypeMangling_Context, &EvtVarLengthFixedCount3_2, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount3_2_AssumeEnabled(VarLength, Field) \
        McTemplateU0ubr0(&TypeMangling_Context, &EvtVarLengthFixedCount3_2, VarLength, Field)

//
// Enablement check macro for EvtVarLengthFixedCount4_2
//
#define EventEnabledEvtVarLengthFixedCount4_2() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtVarLengthFixedCount4_2
//
#define EventWriteEvtVarLengthFixedCount4_2(VarLength, Field) \
        MCGEN_EVENT_ENABLED(EvtVarLengthFixedCount4_2) \
        ? McTemplateU0uk(&TypeMangling_Context, &EvtVarLengthFixedCount4_2, VarLength, Field) : 0
#define EventWriteEvtVarLengthFixedCount4_2_AssumeEnabled(VarLength, Field) \
        McTemplateU0uk(&TypeMangling_Context, &EvtVarLengthFixedCount4_2, VarLength, Field)

//
// Enablement check macro for EvtOutTypes
//
#define EventEnabledEvtOutTypes() MCGEN_EVENT_BIT_SET(TypeManglingEnableBits, 0)

//
// Event write macros for EvtOutTypes
//
#define EventWriteEvtOutTypes(OutData1, OutData2, OutData3, OutData4, OutData5, OutData6, OutData7, OutData8, OutData9, OutData10, OutData11, OutData12, OutData13, OutData14, OutData15, OutData16, OutData17, OutData18, OutData19, OutData20, OutData21, OutData22, OutData23, OutData24, OutData25, OutData26, OutData27, OutData28, OutData29, OutData30, OutData31, OutData32, OutData33, OutData34, OutData35, OutData36, OutData37, OutData38, OutData39, OutData40, OutData41, OutData42, OutData43, OutData44, OutData45, OutData46, OutData47, OutData48, OutData49, OutData50, OutData51, OutData52, OutData53, OutData54, OutData55, OutData56, OutData57, OutData58, OutData59, OutData60, OutData61, OutData62_Len_, OutData62, OutData63_Len_, OutData63, OutData64_Len_, OutData64, OutData65_Len_, OutData65, OutData66_Len_, OutData66, OutData67_Len_, OutData67, OutData68_Len_, OutData68, OutData69_Len_, OutData69, OutData70_Len_, OutData70, OutData71_Len_, OutData71, OutData72_Len_, OutData72) \
        MCGEN_EVENT_ENABLED(EvtOutTypes) \
        ? McTemplateU0zzzssssccuuuulhhhhddqqqqqqqqqqixxxxfgtb16b16b16b16jppppmmmyyykdddddiiwwwaaaaeeee(&TypeMangling_Context, &EvtOutTypes, OutData1, OutData2, OutData3, OutData4, OutData5, OutData6, OutData7, OutData8, OutData9, OutData10, OutData11, OutData12, OutData13, OutData14, OutData15, OutData16, OutData17, OutData18, OutData19, OutData20, OutData21, OutData22, OutData23, OutData24, OutData25, OutData26, OutData27, OutData28, OutData29, OutData30, OutData31, OutData32, OutData33, OutData34, OutData35, OutData36, OutData37, OutData38, OutData39, OutData40, OutData41, OutData42, OutData43, OutData44, OutData45, OutData46, OutData47, OutData48, OutData49, OutData50, OutData51, OutData52, OutData53, OutData54, OutData55, OutData56, OutData57, OutData58, OutData59, OutData60, OutData61, OutData62_Len_, OutData62, OutData63_Len_, OutData63, OutData64_Len_, OutData64, OutData65_Len_, OutData65, OutData66_Len_, OutData66, OutData67_Len_, OutData67, OutData68_Len_, OutData68, OutData69_Len_, OutData69, OutData70_Len_, OutData70, OutData71_Len_, OutData71, OutData72_Len_, OutData72) : 0
#define EventWriteEvtOutTypes_AssumeEnabled(OutData1, OutData2, OutData3, OutData4, OutData5, OutData6, OutData7, OutData8, OutData9, OutData10, OutData11, OutData12, OutData13, OutData14, OutData15, OutData16, OutData17, OutData18, OutData19, OutData20, OutData21, OutData22, OutData23, OutData24, OutData25, OutData26, OutData27, OutData28, OutData29, OutData30, OutData31, OutData32, OutData33, OutData34, OutData35, OutData36, OutData37, OutData38, OutData39, OutData40, OutData41, OutData42, OutData43, OutData44, OutData45, OutData46, OutData47, OutData48, OutData49, OutData50, OutData51, OutData52, OutData53, OutData54, OutData55, OutData56, OutData57, OutData58, OutData59, OutData60, OutData61, OutData62_Len_, OutData62, OutData63_Len_, OutData63, OutData64_Len_, OutData64, OutData65_Len_, OutData65, OutData66_Len_, OutData66, OutData67_Len_, OutData67, OutData68_Len_, OutData68, OutData69_Len_, OutData69, OutData70_Len_, OutData70, OutData71_Len_, OutData71, OutData72_Len_, OutData72) \
        McTemplateU0zzzssssccuuuulhhhhddqqqqqqqqqqixxxxfgtb16b16b16b16jppppmmmyyykdddddiiwwwaaaaeeee(&TypeMangling_Context, &EvtOutTypes, OutData1, OutData2, OutData3, OutData4, OutData5, OutData6, OutData7, OutData8, OutData9, OutData10, OutData11, OutData12, OutData13, OutData14, OutData15, OutData16, OutData17, OutData18, OutData19, OutData20, OutData21, OutData22, OutData23, OutData24, OutData25, OutData26, OutData27, OutData28, OutData29, OutData30, OutData31, OutData32, OutData33, OutData34, OutData35, OutData36, OutData37, OutData38, OutData39, OutData40, OutData41, OutData42, OutData43, OutData44, OutData45, OutData46, OutData47, OutData48, OutData49, OutData50, OutData51, OutData52, OutData53, OutData54, OutData55, OutData56, OutData57, OutData58, OutData59, OutData60, OutData61, OutData62_Len_, OutData62, OutData63_Len_, OutData63, OutData64_Len_, OutData64, OutData65_Len_, OutData65, OutData66_Len_, OutData66, OutData67_Len_, OutData67, OutData68_Len_, OutData68, OutData69_Len_, OutData69, OutData70_Len_, OutData70, OutData71_Len_, OutData71, OutData72_Len_, OutData72)

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions
//
//
//Template from manifest : TemplateFixedCount23
//
#ifndef McTemplateU0A5_def
#define McTemplateU0A5_def
ETW_INLINE
ULONG
McTemplateU0A5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ ULONG _Arg0_Len_,
    _In_reads_(_Arg0_Len_) const char*  _Arg0
    )
{
#define McTemplateU0A5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0A5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, (USHORT)(sizeof(char)*_Arg0_Len_)); // Blob contains data for 5 chunks; each chunk is a 16-bit ByteCount followed by ByteCount bytes of data.

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0A5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0A5_def

//
//Template from manifest : TemplateFixedCount14
//
#ifndef McTemplateU0B15_def
#define McTemplateU0B15_def
ETW_INLINE
ULONG
McTemplateU0B15(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(3*5) const unsigned char*  _Arg0
    )
{
#define McTemplateU0B15_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0B15_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, (ULONG)sizeof(char)*3*5);  // Blob containing 5 concatenated strings; each string has the same length (3)

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0B15_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0B15_def

//
//Template from manifest : TemplateFixedCount03
//
#ifndef McTemplateU0C5_def
#define McTemplateU0C5_def
ETW_INLINE
ULONG
McTemplateU0C5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const signed char *_Arg0
    )
{
#define McTemplateU0C5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0C5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const signed char)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0C5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0C5_def

//
//Template from manifest : TemplateFixedCount07
//
#ifndef McTemplateU0D5_def
#define McTemplateU0D5_def
ETW_INLINE
ULONG
McTemplateU0D5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const signed int *_Arg0
    )
{
#define McTemplateU0D5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0D5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const signed int)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0D5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0D5_def

//
//Template from manifest : TemplateFixedCount24
//
#ifndef McTemplateU0E5_def
#define McTemplateU0E5_def
ETW_INLINE
ULONG
McTemplateU0E5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ ULONG _Arg0_Len_,
    _In_reads_(_Arg0_Len_) const unsigned char*  _Arg0
    )
{
#define McTemplateU0E5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0E5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, (USHORT)(sizeof(char)*_Arg0_Len_)); // Blob contains data for 5 chunks; each chunk is a 16-bit ByteCount followed by ByteCount bytes of data.

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0E5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0E5_def

//
//Template from manifest : TemplateFixedCount11
//
#ifndef McTemplateU0F5_def
#define McTemplateU0F5_def
ETW_INLINE
ULONG
McTemplateU0F5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const float *_Arg0
    )
{
#define McTemplateU0F5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0F5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const float)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0F5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0F5_def

//
//Template from manifest : TemplateFixedCount12
//
#ifndef McTemplateU0G5_def
#define McTemplateU0G5_def
ETW_INLINE
ULONG
McTemplateU0G5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const double *_Arg0
    )
{
#define McTemplateU0G5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0G5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const double)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0G5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0G5_def

//
//Template from manifest : TemplateFixedCount06
//
#ifndef McTemplateU0H5_def
#define McTemplateU0H5_def
ETW_INLINE
ULONG
McTemplateU0H5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const unsigned short *_Arg0
    )
{
#define McTemplateU0H5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0H5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const unsigned short)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0H5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0H5_def

//
//Template from manifest : TemplateFixedCount09
//
#ifndef McTemplateU0I5_def
#define McTemplateU0I5_def
ETW_INLINE
ULONG
McTemplateU0I5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const signed __int64 *_Arg0
    )
{
#define McTemplateU0I5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0I5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const signed __int64)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0I5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0I5_def

//
//Template from manifest : TemplateFixedCount15
//
#ifndef McTemplateU0J5_def
#define McTemplateU0J5_def
ETW_INLINE
ULONG
McTemplateU0J5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const GUID*  _Arg0
    )
{
#define McTemplateU0J5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0J5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(GUID)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0J5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0J5_def

//
//Template from manifest : TemplateFixedCount19
//
#ifndef McTemplateU0K5_def
#define McTemplateU0K5_def
ETW_INLINE
ULONG
McTemplateU0K5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ ULONG _Arg0_Len_,
    _In_reads_(_Arg0_Len_) const unsigned char*  _Arg0
    )
{
#define McTemplateU0K5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0K5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, _Arg0_Len_);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0K5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0K5_def

//
//Template from manifest : TemplateFixedCount05
//
#ifndef McTemplateU0L5_def
#define McTemplateU0L5_def
ETW_INLINE
ULONG
McTemplateU0L5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const signed short *_Arg0
    )
{
#define McTemplateU0L5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0L5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const signed short)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0L5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0L5_def

//
//Template from manifest : TemplateFixedCount17
//
#ifndef McTemplateU0M5_def
#define McTemplateU0M5_def
ETW_INLINE
ULONG
McTemplateU0M5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const FILETIME*  _Arg0
    )
{
#define McTemplateU0M5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0M5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(FILETIME)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0M5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0M5_def

//
//Template from manifest : TemplateFixedCount16
//
#ifndef McTemplateU0P5_def
#define McTemplateU0P5_def
ETW_INLINE
ULONG
McTemplateU0P5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const void* *_Arg0
    )
{
#define McTemplateU0P5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0P5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const void*)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0P5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0P5_def

//
//Template from manifest : TemplateFixedCount08
//
#ifndef McTemplateU0Q5_def
#define McTemplateU0Q5_def
ETW_INLINE
ULONG
McTemplateU0Q5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const unsigned int *_Arg0
    )
{
#define McTemplateU0Q5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0Q5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const unsigned int)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0Q5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0Q5_def

//
//Template from manifest : TemplateFixedCount02
//
#ifndef McTemplateU0SR_def
#define McTemplateU0SR_def
ETW_INLINE
ULONG
McTemplateU0SR(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ ULONG _Arg0_Len_,
    _In_reads_(_Arg0_Len_) PCSTR  _Arg0
    )
{
#define McTemplateU0SR_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0SR_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, (ULONG)(sizeof(char)*_Arg0_Len_)); // Blob containing 5 concatenated nul-terminated strings

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0SR_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0SR_def

//
//Template from manifest : TemplateFixedCount13
//
#ifndef McTemplateU0T5_def
#define McTemplateU0T5_def
ETW_INLINE
ULONG
McTemplateU0T5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const signed int *_Arg0
    )
{
#define McTemplateU0T5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0T5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const signed int)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0T5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0T5_def

//
//Template from manifest : TemplateFixedCount04
//
#ifndef McTemplateU0U5_def
#define McTemplateU0U5_def
ETW_INLINE
ULONG
McTemplateU0U5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const unsigned char *_Arg0
    )
{
#define McTemplateU0U5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0U5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const unsigned char)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0U5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0U5_def

//
//Template from manifest : TemplateFixedCount22
//
#ifndef McTemplateU0W5_def
#define McTemplateU0W5_def
ETW_INLINE
ULONG
McTemplateU0W5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ ULONG _Arg0_Len_,
    _In_reads_(_Arg0_Len_) const WCHAR*  _Arg0
    )
{
#define McTemplateU0W5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0W5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, (USHORT)(sizeof(WCHAR)*_Arg0_Len_)); // Blob contains data for 5 chunks; each chunk is a 16-bit ByteCount followed by ByteCount bytes of data.

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0W5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0W5_def

//
//Template from manifest : TemplateFixedCount10
//
#ifndef McTemplateU0X5_def
#define McTemplateU0X5_def
ETW_INLINE
ULONG
McTemplateU0X5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const unsigned __int64 *_Arg0
    )
{
#define McTemplateU0X5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0X5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1], _Arg0, sizeof(const unsigned __int64)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0X5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0X5_def

//
//Template from manifest : TemplateFixedCount18
//
#ifndef McTemplateU0Y5_def
#define McTemplateU0Y5_def
ETW_INLINE
ULONG
McTemplateU0Y5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(5) const SYSTEMTIME*  _Arg0
    )
{
#define McTemplateU0Y5_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0Y5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0Y5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0Y5_def

//
//Template from manifest : TemplateFixedCount01
//
#ifndef McTemplateU0ZR_def
#define McTemplateU0ZR_def
ETW_INLINE
ULONG
McTemplateU0ZR(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ ULONG _Arg0_Len_,
    _In_reads_(_Arg0_Len_) PCWSTR  _Arg0
    )
{
#define McTemplateU0ZR_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0ZR_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, (ULONG)(sizeof(WCHAR)*_Arg0_Len_)); // Blob containing 5 concatenated nul-terminated strings

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0ZR_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0ZR_def

//
//Template from manifest : Template23
//
#ifndef McTemplateU0a_def
#define McTemplateU0a_def
ETW_INLINE
ULONG
McTemplateU0a(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ ULONG _Arg0_Len_,
    _In_reads_(_Arg0_Len_) const char*  _Arg0
    )
{
#define McTemplateU0a_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0a_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&EventData[2].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[2], _Arg0, (USHORT)(sizeof(char)*_Arg0_Len_));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0a_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0a_def

//
//Template from manifest : Template14
//
#ifndef McTemplateU0b3_def
#define McTemplateU0b3_def
ETW_INLINE
ULONG
McTemplateU0b3(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_reads_(3) const unsigned char*  _Arg0
    )
{
#define McTemplateU0b3_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0b3_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, (ULONG)sizeof(char)*3);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0b3_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0b3_def

//
//Template from manifest : Template03
//
#ifndef McTemplateU0c_def
#define McTemplateU0c_def
ETW_INLINE
ULONG
McTemplateU0c(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const signed char  _Arg0
    )
{
#define McTemplateU0c_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0c_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const signed char)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0c_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0c_def

//
//Template from manifest : Template07
//
#ifndef McTemplateU0d_def
#define McTemplateU0d_def
ETW_INLINE
ULONG
McTemplateU0d(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const signed int  _Arg0
    )
{
#define McTemplateU0d_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0d_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const signed int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0d_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0d_def

//
//Template from manifest : Template24
//
#ifndef McTemplateU0e_def
#define McTemplateU0e_def
ETW_INLINE
ULONG
McTemplateU0e(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ ULONG _Arg0_Len_,
    _In_reads_(_Arg0_Len_) const unsigned char*  _Arg0
    )
{
#define McTemplateU0e_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0e_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&EventData[2].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[2], _Arg0, (USHORT)(sizeof(char)*_Arg0_Len_));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0e_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0e_def

//
//Template from manifest : Template11
//
#ifndef McTemplateU0f_def
#define McTemplateU0f_def
ETW_INLINE
ULONG
McTemplateU0f(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const float  _Arg0
    )
{
#define McTemplateU0f_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0f_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const float)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0f_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0f_def

//
//Template from manifest : Template12
//
#ifndef McTemplateU0g_def
#define McTemplateU0g_def
ETW_INLINE
ULONG
McTemplateU0g(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const double  _Arg0
    )
{
#define McTemplateU0g_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0g_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const double)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0g_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0g_def

//
//Template from manifest : Template06
//
#ifndef McTemplateU0h_def
#define McTemplateU0h_def
ETW_INLINE
ULONG
McTemplateU0h(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned short  _Arg0
    )
{
#define McTemplateU0h_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0h_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned short)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0h_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0h_def

//
//Template from manifest : Template09
//
#ifndef McTemplateU0i_def
#define McTemplateU0i_def
ETW_INLINE
ULONG
McTemplateU0i(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const signed __int64  _Arg0
    )
{
#define McTemplateU0i_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0i_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const signed __int64)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0i_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0i_def

//
//Template from manifest : Template15
//
#ifndef McTemplateU0j_def
#define McTemplateU0j_def
ETW_INLINE
ULONG
McTemplateU0j(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const GUID*  _Arg0
    )
{
#define McTemplateU0j_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0j_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(GUID)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0j_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0j_def

//
//Template from manifest : Template19
//
#ifndef McTemplateU0k_def
#define McTemplateU0k_def
ETW_INLINE
ULONG
McTemplateU0k(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SID*  _Arg0
    )
{
#define McTemplateU0k_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0k_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],(_Arg0 != NULL) ? _Arg0 : (const void*)"\0\0\0\0\0\0\0", (_Arg0 != NULL) ? MCGEN_GETLENGTHSID(_Arg0) : 8);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0k_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0k_def

//
//Template from manifest : Template05
//
#ifndef McTemplateU0l_def
#define McTemplateU0l_def
ETW_INLINE
ULONG
McTemplateU0l(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const signed short  _Arg0
    )
{
#define McTemplateU0l_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0l_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const signed short)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0l_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0l_def

//
//Template from manifest : Template17
//
#ifndef McTemplateU0m_def
#define McTemplateU0m_def
ETW_INLINE
ULONG
McTemplateU0m(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const FILETIME*  _Arg0
    )
{
#define McTemplateU0m_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0m_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(FILETIME)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0m_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0m_def

//
//Template from manifest : Template16
//
#ifndef McTemplateU0p_def
#define McTemplateU0p_def
ETW_INLINE
ULONG
McTemplateU0p(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const void*  _Arg0
    )
{
#define McTemplateU0p_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0p_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const void*)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0p_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0p_def

//
//Template from manifest : Template08
//
#ifndef McTemplateU0q_def
#define McTemplateU0q_def
ETW_INLINE
ULONG
McTemplateU0q(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0
    )
{
#define McTemplateU0q_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0q_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0q_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0q_def

//
//Template from manifest : TemplateVarCount23
//
#ifndef McTemplateU0qAR0_def
#define McTemplateU0qAR0_def
ETW_INLINE
ULONG
McTemplateU0qAR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ ULONG _Arg1_Len_,
    _In_reads_(_Arg1_Len_) const char*  _Arg1
    )
{
#define McTemplateU0qAR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qAR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],_Arg1, (USHORT)(sizeof(char)*_Arg1_Len_)); // Blob contains data for _Arg0 chunks; each chunk is a 16-bit ByteCount followed by ByteCount bytes of data.

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qAR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qAR0_def

//
//Template from manifest : TemplateVarCount14
//
#ifndef McTemplateU0qB3r0_def
#define McTemplateU0qB3r0_def
ETW_INLINE
ULONG
McTemplateU0qB3r0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(3*_Arg0) const unsigned char*  _Arg1
    )
{
#define McTemplateU0qB3r0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qB3r0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],_Arg1, (ULONG)sizeof(char)*3*_Arg0);  // Blob containing _Arg0 concatenated strings; each string has the same length (3)

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qB3r0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qB3r0_def

//
//Template from manifest : TemplateVarCount03
//
#ifndef McTemplateU0qCR0_def
#define McTemplateU0qCR0_def
ETW_INLINE
ULONG
McTemplateU0qCR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const signed char *_Arg1
    )
{
#define McTemplateU0qCR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qCR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const signed char)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qCR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qCR0_def

//
//Template from manifest : TemplateVarCount07
//
#ifndef McTemplateU0qDR0_def
#define McTemplateU0qDR0_def
ETW_INLINE
ULONG
McTemplateU0qDR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const signed int *_Arg1
    )
{
#define McTemplateU0qDR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qDR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const signed int)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qDR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qDR0_def

//
//Template from manifest : TemplateVarCount24
//
#ifndef McTemplateU0qER0_def
#define McTemplateU0qER0_def
ETW_INLINE
ULONG
McTemplateU0qER0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ ULONG _Arg1_Len_,
    _In_reads_(_Arg1_Len_) const unsigned char*  _Arg1
    )
{
#define McTemplateU0qER0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qER0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],_Arg1, (USHORT)(sizeof(char)*_Arg1_Len_)); // Blob contains data for _Arg0 chunks; each chunk is a 16-bit ByteCount followed by ByteCount bytes of data.

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qER0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qER0_def

//
//Template from manifest : TemplateVarCount11
//
#ifndef McTemplateU0qFR0_def
#define McTemplateU0qFR0_def
ETW_INLINE
ULONG
McTemplateU0qFR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const float *_Arg1
    )
{
#define McTemplateU0qFR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qFR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const float)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qFR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qFR0_def

//
//Template from manifest : TemplateVarCount12
//
#ifndef McTemplateU0qGR0_def
#define McTemplateU0qGR0_def
ETW_INLINE
ULONG
McTemplateU0qGR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const double *_Arg1
    )
{
#define McTemplateU0qGR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qGR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const double)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qGR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qGR0_def

//
//Template from manifest : TemplateVarCount06
//
#ifndef McTemplateU0qHR0_def
#define McTemplateU0qHR0_def
ETW_INLINE
ULONG
McTemplateU0qHR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const unsigned short *_Arg1
    )
{
#define McTemplateU0qHR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qHR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const unsigned short)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qHR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qHR0_def

//
//Template from manifest : TemplateVarCount09
//
#ifndef McTemplateU0qIR0_def
#define McTemplateU0qIR0_def
ETW_INLINE
ULONG
McTemplateU0qIR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const signed __int64 *_Arg1
    )
{
#define McTemplateU0qIR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qIR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const signed __int64)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qIR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qIR0_def

//
//Template from manifest : TemplateVarCount15
//
#ifndef McTemplateU0qJR0_def
#define McTemplateU0qJR0_def
ETW_INLINE
ULONG
McTemplateU0qJR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const GUID*  _Arg1
    )
{
#define McTemplateU0qJR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qJR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],_Arg1, sizeof(GUID)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qJR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qJR0_def

//
//Template from manifest : TemplateVarCount19
//
#ifndef McTemplateU0qKR0_def
#define McTemplateU0qKR0_def
ETW_INLINE
ULONG
McTemplateU0qKR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ ULONG _Arg1_Len_,
    _In_reads_(_Arg1_Len_) const unsigned char*  _Arg1
    )
{
#define McTemplateU0qKR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qKR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, _Arg1_Len_);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qKR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qKR0_def

//
//Template from manifest : TemplateVarCount05
//
#ifndef McTemplateU0qLR0_def
#define McTemplateU0qLR0_def
ETW_INLINE
ULONG
McTemplateU0qLR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const signed short *_Arg1
    )
{
#define McTemplateU0qLR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qLR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const signed short)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qLR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qLR0_def

//
//Template from manifest : TemplateVarCount17
//
#ifndef McTemplateU0qMR0_def
#define McTemplateU0qMR0_def
ETW_INLINE
ULONG
McTemplateU0qMR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const FILETIME*  _Arg1
    )
{
#define McTemplateU0qMR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qMR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],_Arg1, sizeof(FILETIME)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qMR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qMR0_def

//
//Template from manifest : TemplateVarCount16
//
#ifndef McTemplateU0qPR0_def
#define McTemplateU0qPR0_def
ETW_INLINE
ULONG
McTemplateU0qPR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const void* *_Arg1
    )
{
#define McTemplateU0qPR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qPR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const void*)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qPR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qPR0_def

//
//Template from manifest : TemplateVarCount08
//
#ifndef McTemplateU0qQR0_def
#define McTemplateU0qQR0_def
ETW_INLINE
ULONG
McTemplateU0qQR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const unsigned int *_Arg1
    )
{
#define McTemplateU0qQR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qQR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const unsigned int)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qQR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qQR0_def

//
//Template from manifest : TemplateVarCount02
//
#ifndef McTemplateU0qSR_def
#define McTemplateU0qSR_def
ETW_INLINE
ULONG
McTemplateU0qSR(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ ULONG _Arg1_Len_,
    _In_reads_(_Arg0) PCSTR  _Arg1
    )
{
#define McTemplateU0qSR_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qSR_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],_Arg1, (ULONG)(sizeof(char)*_Arg1_Len_)); // Blob containing _Arg0 concatenated nul-terminated strings

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qSR_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qSR_def

//
//Template from manifest : TemplateVarCount13
//
#ifndef McTemplateU0qTR0_def
#define McTemplateU0qTR0_def
ETW_INLINE
ULONG
McTemplateU0qTR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const signed int *_Arg1
    )
{
#define McTemplateU0qTR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qTR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const signed int)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qTR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qTR0_def

//
//Template from manifest : TemplateVarCount04
//
#ifndef McTemplateU0qUR0_def
#define McTemplateU0qUR0_def
ETW_INLINE
ULONG
McTemplateU0qUR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const unsigned char *_Arg1
    )
{
#define McTemplateU0qUR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qUR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const unsigned char)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qUR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qUR0_def

//
//Template from manifest : TemplateVarCount22
//
#ifndef McTemplateU0qWR0_def
#define McTemplateU0qWR0_def
ETW_INLINE
ULONG
McTemplateU0qWR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ ULONG _Arg1_Len_,
    _In_reads_(_Arg1_Len_) const WCHAR*  _Arg1
    )
{
#define McTemplateU0qWR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qWR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],_Arg1, (USHORT)(sizeof(WCHAR)*_Arg1_Len_)); // Blob contains data for _Arg0 chunks; each chunk is a 16-bit ByteCount followed by ByteCount bytes of data.

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qWR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qWR0_def

//
//Template from manifest : TemplateVarCount10
//
#ifndef McTemplateU0qXR0_def
#define McTemplateU0qXR0_def
ETW_INLINE
ULONG
McTemplateU0qXR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const unsigned __int64 *_Arg1
    )
{
#define McTemplateU0qXR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qXR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], _Arg1, sizeof(const unsigned __int64)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qXR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qXR0_def

//
//Template from manifest : TemplateVarCount18
//
#ifndef McTemplateU0qYR0_def
#define McTemplateU0qYR0_def
ETW_INLINE
ULONG
McTemplateU0qYR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_reads_(_Arg0) const SYSTEMTIME*  _Arg1
    )
{
#define McTemplateU0qYR0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qYR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],_Arg1, sizeof(SYSTEMTIME)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qYR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qYR0_def

//
//Template from manifest : TemplateVarCount01
//
#ifndef McTemplateU0qZR_def
#define McTemplateU0qZR_def
ETW_INLINE
ULONG
McTemplateU0qZR(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ ULONG _Arg1_Len_,
    _In_reads_(_Arg0) PCWSTR  _Arg1
    )
{
#define McTemplateU0qZR_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0qZR_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],_Arg1, (ULONG)(sizeof(WCHAR)*_Arg1_Len_)); // Blob containing _Arg0 concatenated nul-terminated strings

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0qZR_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0qZR_def

//
//Template from manifest : Template02
//
#ifndef McTemplateU0s_def
#define McTemplateU0s_def
ETW_INLINE
ULONG
McTemplateU0s(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCSTR  _Arg0
    )
{
#define McTemplateU0s_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0s_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0s_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0s_def

//
//Template from manifest : Template13
//
#ifndef McTemplateU0t_def
#define McTemplateU0t_def
ETW_INLINE
ULONG
McTemplateU0t(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const signed int  _Arg0
    )
{
#define McTemplateU0t_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0t_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const signed int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0t_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0t_def

//
//Template from manifest : Template04
//
#ifndef McTemplateU0u_def
#define McTemplateU0u_def
ETW_INLINE
ULONG
McTemplateU0u(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0
    )
{
#define McTemplateU0u_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0u_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0u_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0u_def

//
//Template from manifest : TemplateVarLength3
//
#ifndef McTemplateU0ubr0_def
#define McTemplateU0ubr0_def
ETW_INLINE
ULONG
McTemplateU0ubr0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0,
    _In_reads_(_Arg0) const unsigned char*  _Arg1
    )
{
#define McTemplateU0ubr0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0ubr0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[2],_Arg1, (ULONG)sizeof(char)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0ubr0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0ubr0_def

//
//Template from manifest : TemplateVarLength4
//
#ifndef McTemplateU0uk_def
#define McTemplateU0uk_def
ETW_INLINE
ULONG
McTemplateU0uk(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0,
    _In_ const SID*  _Arg1
    )
{
#define McTemplateU0uk_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0uk_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[2],(_Arg1 != NULL) ? _Arg1 : (const void*)"\0\0\0\0\0\0\0", (_Arg1 != NULL) ? MCGEN_GETLENGTHSID(_Arg1) : 8);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0uk_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0uk_def

//
//Template from manifest : TemplateVarLength2
//
#ifndef McTemplateU0usr0_def
#define McTemplateU0usr0_def
ETW_INLINE
ULONG
McTemplateU0usr0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0,
    _In_reads_(_Arg0) const char*  _Arg1
    )
{
#define McTemplateU0usr0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0usr0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[2],_Arg1, (ULONG)(sizeof(char)*_Arg0));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0usr0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0usr0_def

//
//Template from manifest : TemplateVarLength1
//
#ifndef McTemplateU0uzr0_def
#define McTemplateU0uzr0_def
ETW_INLINE
ULONG
McTemplateU0uzr0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0,
    _In_reads_(_Arg0) const WCHAR*  _Arg1
    )
{
#define McTemplateU0uzr0_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0uzr0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[2],_Arg1, (ULONG)(sizeof(WCHAR)*_Arg0));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0uzr0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0uzr0_def

//
//Template from manifest : Template22
//
#ifndef McTemplateU0w_def
#define McTemplateU0w_def
ETW_INLINE
ULONG
McTemplateU0w(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ ULONG _Arg0_Len_,
    _In_reads_(_Arg0_Len_) const WCHAR*  _Arg0
    )
{
#define McTemplateU0w_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0w_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&EventData[2].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[2], _Arg0, (USHORT)(sizeof(WCHAR)*_Arg0_Len_));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0w_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0w_def

//
//Template from manifest : Template10
//
#ifndef McTemplateU0x_def
#define McTemplateU0x_def
ETW_INLINE
ULONG
McTemplateU0x(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned __int64  _Arg0
    )
{
#define McTemplateU0x_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0x_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned __int64)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0x_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0x_def

//
//Template from manifest : Template18
//
#ifndef McTemplateU0y_def
#define McTemplateU0y_def
ETW_INLINE
ULONG
McTemplateU0y(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0
    )
{
#define McTemplateU0y_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0y_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0y_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0y_def

//
//Template from manifest : Template01
//
#ifndef McTemplateU0z_def
#define McTemplateU0z_def
ETW_INLINE
ULONG
McTemplateU0z(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0
    )
{
#define McTemplateU0z_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0z_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0z_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0z_def

//
//Template from manifest : TemplateOutTypes
//
#ifndef McTemplateU0zzzssssccuuuulhhhhddqqqqqqqqqqixxxxfgtb16b16b16b16jppppmmmyyykdddddiiwwwaaaaeeee_def
#define McTemplateU0zzzssssccuuuulhhhhddqqqqqqqqqqixxxxfgtb16b16b16b16jppppmmmyyykdddddiiwwwaaaaeeee_def
ETW_INLINE
ULONG
McTemplateU0zzzssssccuuuulhhhhddqqqqqqqqqqixxxxfgtb16b16b16b16jppppmmmyyykdddddiiwwwaaaaeeee(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_opt_ PCSTR  _Arg3,
    _In_opt_ PCSTR  _Arg4,
    _In_opt_ PCSTR  _Arg5,
    _In_opt_ PCSTR  _Arg6,
    _In_ const signed char  _Arg7,
    _In_ const signed char  _Arg8,
    _In_ const unsigned char  _Arg9,
    _In_ const unsigned char  _Arg10,
    _In_ const unsigned char  _Arg11,
    _In_ const unsigned char  _Arg12,
    _In_ const signed short  _Arg13,
    _In_ const unsigned short  _Arg14,
    _In_ const unsigned short  _Arg15,
    _In_ const unsigned short  _Arg16,
    _In_ const unsigned short  _Arg17,
    _In_ const signed int  _Arg18,
    _In_ const signed int  _Arg19,
    _In_ const unsigned int  _Arg20,
    _In_ const unsigned int  _Arg21,
    _In_ const unsigned int  _Arg22,
    _In_ const unsigned int  _Arg23,
    _In_ const unsigned int  _Arg24,
    _In_ const unsigned int  _Arg25,
    _In_ const unsigned int  _Arg26,
    _In_ const unsigned int  _Arg27,
    _In_ const unsigned int  _Arg28,
    _In_ const unsigned int  _Arg29,
    _In_ const signed __int64  _Arg30,
    _In_ const unsigned __int64  _Arg31,
    _In_ const unsigned __int64  _Arg32,
    _In_ const unsigned __int64  _Arg33,
    _In_ const unsigned __int64  _Arg34,
    _In_ const float  _Arg35,
    _In_ const double  _Arg36,
    _In_ const signed int  _Arg37,
    _In_reads_(16) const unsigned char*  _Arg38,
    _In_reads_(16) const unsigned char*  _Arg39,
    _In_reads_(16) const unsigned char*  _Arg40,
    _In_reads_(16) const unsigned char*  _Arg41,
    _In_ const GUID*  _Arg42,
    _In_opt_ const void*  _Arg43,
    _In_opt_ const void*  _Arg44,
    _In_opt_ const void*  _Arg45,
    _In_opt_ const void*  _Arg46,
    _In_ const FILETIME*  _Arg47,
    _In_ const FILETIME*  _Arg48,
    _In_ const FILETIME*  _Arg49,
    _In_ const SYSTEMTIME*  _Arg50,
    _In_ const SYSTEMTIME*  _Arg51,
    _In_ const SYSTEMTIME*  _Arg52,
    _In_ const SID*  _Arg53,
    _In_ const signed int  _Arg54,
    _In_ const signed int  _Arg55,
    _In_ const signed int  _Arg56,
    _In_ const signed int  _Arg57,
    _In_ const signed int  _Arg58,
    _In_ const signed __int64  _Arg59,
    _In_ const signed __int64  _Arg60,
    _In_ ULONG _Arg61_Len_,
    _In_reads_(_Arg61_Len_) const WCHAR*  _Arg61,
    _In_ ULONG _Arg62_Len_,
    _In_reads_(_Arg62_Len_) const WCHAR*  _Arg62,
    _In_ ULONG _Arg63_Len_,
    _In_reads_(_Arg63_Len_) const WCHAR*  _Arg63,
    _In_ ULONG _Arg64_Len_,
    _In_reads_(_Arg64_Len_) const char*  _Arg64,
    _In_ ULONG _Arg65_Len_,
    _In_reads_(_Arg65_Len_) const char*  _Arg65,
    _In_ ULONG _Arg66_Len_,
    _In_reads_(_Arg66_Len_) const char*  _Arg66,
    _In_ ULONG _Arg67_Len_,
    _In_reads_(_Arg67_Len_) const char*  _Arg67,
    _In_ ULONG _Arg68_Len_,
    _In_reads_(_Arg68_Len_) const unsigned char*  _Arg68,
    _In_ ULONG _Arg69_Len_,
    _In_reads_(_Arg69_Len_) const unsigned char*  _Arg69,
    _In_ ULONG _Arg70_Len_,
    _In_reads_(_Arg70_Len_) const unsigned char*  _Arg70,
    _In_ ULONG _Arg71_Len_,
    _In_reads_(_Arg71_Len_) const unsigned char*  _Arg71
    )
{
#define McTemplateU0zzzssssccuuuulhhhhddqqqqqqqqqqixxxxfgtb16b16b16b16jppppmmmyyykdddddiiwwwaaaaeeee_ARGCOUNT 83

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0zzzssssccuuuulhhhhddqqqqqqqqqqixxxxfgtb16b16b16b16jppppmmmyyykdddddiiwwwaaaaeeee_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : "NULL",
                        (_Arg3 != NULL) ? (ULONG)((strlen(_Arg3) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[5],
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : "NULL",
                        (_Arg5 != NULL) ? (ULONG)((strlen(_Arg5) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[7],
                        (_Arg6 != NULL) ? _Arg6 : "NULL",
                        (_Arg6 != NULL) ? (ULONG)((strlen(_Arg6) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const signed char)  );

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const signed char)  );

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[13],&_Arg12, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[14],&_Arg13, sizeof(const signed short)  );

    EventDataDescCreate(&EventData[15],&_Arg14, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[16],&_Arg15, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[17],&_Arg16, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[18],&_Arg17, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[19],&_Arg18, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[20],&_Arg19, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[21],&_Arg20, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[22],&_Arg21, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[23],&_Arg22, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[24],&_Arg23, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[25],&_Arg24, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[26],&_Arg25, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[27],&_Arg26, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[28],&_Arg27, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[29],&_Arg28, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[30],&_Arg29, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[31],&_Arg30, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[32],&_Arg31, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[33],&_Arg32, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[34],&_Arg33, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[35],&_Arg34, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[36],&_Arg35, sizeof(const float)  );

    EventDataDescCreate(&EventData[37],&_Arg36, sizeof(const double)  );

    EventDataDescCreate(&EventData[38],&_Arg37, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[39],_Arg38, (ULONG)sizeof(char)*16);

    EventDataDescCreate(&EventData[40],_Arg39, (ULONG)sizeof(char)*16);

    EventDataDescCreate(&EventData[41],_Arg40, (ULONG)sizeof(char)*16);

    EventDataDescCreate(&EventData[42],_Arg41, (ULONG)sizeof(char)*16);

    EventDataDescCreate(&EventData[43],_Arg42, sizeof(GUID)  );

    EventDataDescCreate(&EventData[44],&_Arg43, sizeof(const void*)  );

    EventDataDescCreate(&EventData[45],&_Arg44, sizeof(const void*)  );

    EventDataDescCreate(&EventData[46],&_Arg45, sizeof(const void*)  );

    EventDataDescCreate(&EventData[47],&_Arg46, sizeof(const void*)  );

    EventDataDescCreate(&EventData[48],_Arg47, sizeof(FILETIME)  );

    EventDataDescCreate(&EventData[49],_Arg48, sizeof(FILETIME)  );

    EventDataDescCreate(&EventData[50],_Arg49, sizeof(FILETIME)  );

    EventDataDescCreate(&EventData[51],_Arg50, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[52],_Arg51, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[53],_Arg52, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[54],(_Arg53 != NULL) ? _Arg53 : (const void*)"\0\0\0\0\0\0\0", (_Arg53 != NULL) ? MCGEN_GETLENGTHSID(_Arg53) : 8);

    EventDataDescCreate(&EventData[55],&_Arg54, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[56],&_Arg55, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[57],&_Arg56, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[58],&_Arg57, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[59],&_Arg58, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[60],&_Arg59, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[61],&_Arg60, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[62],&EventData[63].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[63], _Arg61, (USHORT)(sizeof(WCHAR)*_Arg61_Len_));

    EventDataDescCreate(&EventData[64],&EventData[65].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[65], _Arg62, (USHORT)(sizeof(WCHAR)*_Arg62_Len_));

    EventDataDescCreate(&EventData[66],&EventData[67].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[67], _Arg63, (USHORT)(sizeof(WCHAR)*_Arg63_Len_));

    EventDataDescCreate(&EventData[68],&EventData[69].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[69], _Arg64, (USHORT)(sizeof(char)*_Arg64_Len_));

    EventDataDescCreate(&EventData[70],&EventData[71].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[71], _Arg65, (USHORT)(sizeof(char)*_Arg65_Len_));

    EventDataDescCreate(&EventData[72],&EventData[73].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[73], _Arg66, (USHORT)(sizeof(char)*_Arg66_Len_));

    EventDataDescCreate(&EventData[74],&EventData[75].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[75], _Arg67, (USHORT)(sizeof(char)*_Arg67_Len_));

    EventDataDescCreate(&EventData[76],&EventData[77].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[77], _Arg68, (USHORT)(sizeof(char)*_Arg68_Len_));

    EventDataDescCreate(&EventData[78],&EventData[79].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[79], _Arg69, (USHORT)(sizeof(char)*_Arg69_Len_));

    EventDataDescCreate(&EventData[80],&EventData[81].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[81], _Arg70, (USHORT)(sizeof(char)*_Arg70_Len_));

    EventDataDescCreate(&EventData[82],&EventData[83].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[83], _Arg71, (USHORT)(sizeof(char)*_Arg71_Len_));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0zzzssssccuuuulhhhhddqqqqqqqqqqixxxxfgtb16b16b16b16jppppmmmyyykdddddiiwwwaaaaeeee_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0zzzssssccuuuulhhhhddqqqqqqqqqqixxxxfgtb16b16b16b16jppppmmmyyykdddddiiwwwaaaaeeee_def

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif
