//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once

//*****************************************************************************
//
// Notes on the ETW event code generated by MC:
//
// - Structures and arrays of structures are treated as an opaque binary blob.
//   The caller is responsible for packing the data for the structure into a
//   single region of memory, with no padding between values. The macro will
//   have an extra parameter for the length of the blob.
// - Arrays of nul-terminated strings must be packed by the caller into a
//   single binary blob containing the correct number of strings, with a nul
//   after each string. The size of the blob is specified in characters, and
//   includes the final nul.
// - If a SID is provided, its length will be determined by calling
//   GetLengthSid.
// - Arrays of SID are treated as a single binary blob. The caller is
//   responsible for packing the SID values into a single region of memory with
//   no padding.
// - The length attribute on the data element in the manifest is significant
//   for values with intype win:UnicodeString, win:AnsiString, or win:Binary.
//   The length attribute must be specified for win:Binary, and is optional for
//   win:UnicodeString and win:AnsiString (if no length is given, the strings
//   are assumed to be nul-terminated). For win:UnicodeString, the length is
//   measured in characters, not bytes.
// - For an array of win:UnicodeString, win:AnsiString, or win:Binary, the
//   length attribute applies to every value in the array, so every value in
//   the array must have the same length. The values in the array are provided
//   to the macro via a single pointer -- the caller is responsible for packing
//   all of the values into a single region of memory with no padding between
//   values.
// - Values of type win:CountedUnicodeString, win:CountedAnsiString, and
//   win:CountedBinary can be generated and collected on Vista or later.
//   However, they may not decode properly without the Windows 10 2018 Fall
//   Update.
// - Arrays of type win:CountedUnicodeString, win:CountedAnsiString, and
//   win:CountedBinary must be packed by the caller into a single region of
//   memory. The format for each item is a UINT16 byte-count followed by that
//   many bytes of data. When providing the array to the generated macro, you
//   must provide the total size of the packed array data, including the UINT16
//   sizes for each item. In the case of win:CountedUnicodeString, the data
//   size is specified in WCHAR (16-bit) units. In the case of
//   win:CountedAnsiString and win:CountedBinary, the data size is specified in
//   bytes.
//
//*****************************************************************************

#include <wmistr.h>
#include <evntrace.h>
#include <evntprov.h>

#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// MCGEN_USE_KERNEL_MODE_APIS macro:
// Controls whether the generated code uses kernel-mode or user-mode APIs.
// - Set to 0 to use Windows user-mode APIs such as EventRegister.
// - Set to 1 to use Windows kernel-mode APIs such as EtwRegister.
// Default is based on whether the _ETW_KM_ macro is defined (i.e. by wdm.h).
// Note that the APIs can also be overridden directly, e.g. by setting the
// MCGEN_EVENTWRITETRANSFER or MCGEN_EVENTREGISTER macros.
//
#ifndef MCGEN_USE_KERNEL_MODE_APIS
  #ifdef _ETW_KM_
    #define MCGEN_USE_KERNEL_MODE_APIS 1
  #else
    #define MCGEN_USE_KERNEL_MODE_APIS 0
  #endif
#endif // MCGEN_USE_KERNEL_MODE_APIS

//
// MCGEN_HAVE_EVENTSETINFORMATION macro:
// Controls how McGenEventSetInformation uses the EventSetInformation API.
// - Set to 0 to disable the use of EventSetInformation
//   (McGenEventSetInformation will always return an error).
// - Set to 1 to directly invoke MCGEN_EVENTSETINFORMATION.
// - Set to 2 to to locate EventSetInformation at runtime via GetProcAddress
//   (user-mode) or MmGetSystemRoutineAddress (kernel-mode).
// Default is determined as follows:
// - If MCGEN_EVENTSETINFORMATION has been customized, set to 1
//   (i.e. use MCGEN_EVENTSETINFORMATION).
// - Else if the target OS version has EventSetInformation, set to 1
//   (i.e. use MCGEN_EVENTSETINFORMATION).
// - Else set to 2 (i.e. try to dynamically locate EventSetInformation).
// Note that an McGenEventSetInformation function will only be generated if one
// or more provider in a manifest has provider traits.
//
#ifndef MCGEN_HAVE_EVENTSETINFORMATION
  #ifdef MCGEN_EVENTSETINFORMATION             // if MCGEN_EVENTSETINFORMATION has been customized,
    #define MCGEN_HAVE_EVENTSETINFORMATION   1 //   directly invoke MCGEN_EVENTSETINFORMATION(...).
  #elif MCGEN_USE_KERNEL_MODE_APIS             // else if using kernel-mode APIs,
    #if NTDDI_VERSION >= 0x06040000            //   if target OS is Windows 10 or later,
      #define MCGEN_HAVE_EVENTSETINFORMATION 1 //     directly invoke MCGEN_EVENTSETINFORMATION(...).
    #else                                      //   else
      #define MCGEN_HAVE_EVENTSETINFORMATION 2 //     find "EtwSetInformation" via MmGetSystemRoutineAddress.
    #endif                                     // else (using user-mode APIs)
  #else                                        //   if target OS and SDK is Windows 8 or later,
    #if WINVER >= 0x0602 && defined(EVENT_FILTER_TYPE_SCHEMATIZED)
      #define MCGEN_HAVE_EVENTSETINFORMATION 1 //     directly invoke MCGEN_EVENTSETINFORMATION(...).
    #else                                      //   else
      #define MCGEN_HAVE_EVENTSETINFORMATION 2 //     find "EventSetInformation" via GetModuleHandleExW/GetProcAddress.
    #endif
  #endif
#endif // MCGEN_HAVE_EVENTSETINFORMATION

//
// MCGEN_EVENTWRITETRANSFER macro:
// Override to use a custom API.
//
#ifndef MCGEN_EVENTWRITETRANSFER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTWRITETRANSFER   EtwWriteTransfer
  #else
    #define MCGEN_EVENTWRITETRANSFER   EventWriteTransfer
  #endif
#endif // MCGEN_EVENTWRITETRANSFER

//
// MCGEN_EVENTREGISTER macro:
// Override to use a custom API.
//
#ifndef MCGEN_EVENTREGISTER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTREGISTER        EtwRegister
  #else
    #define MCGEN_EVENTREGISTER        EventRegister
  #endif
#endif // MCGEN_EVENTREGISTER

//
// MCGEN_EVENTSETINFORMATION macro:
// Override to use a custom API.
// (McGenEventSetInformation also affected by MCGEN_HAVE_EVENTSETINFORMATION.)
//
#ifndef MCGEN_EVENTSETINFORMATION
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTSETINFORMATION  EtwSetInformation
  #else
    #define MCGEN_EVENTSETINFORMATION  EventSetInformation
  #endif
#endif // MCGEN_EVENTSETINFORMATION

//
// MCGEN_EVENTUNREGISTER macro:
// Override to use a custom API.
//
#ifndef MCGEN_EVENTUNREGISTER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTUNREGISTER      EtwUnregister
  #else
    #define MCGEN_EVENTUNREGISTER      EventUnregister
  #endif
#endif // MCGEN_EVENTUNREGISTER

//
// MCGEN_PENABLECALLBACK macro:
// Override to use a custom function pointer type.
// (Should match the type used by MCGEN_EVENTREGISTER.)
//
#ifndef MCGEN_PENABLECALLBACK
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_PENABLECALLBACK      PETWENABLECALLBACK
  #else
    #define MCGEN_PENABLECALLBACK      PENABLECALLBACK
  #endif
#endif // MCGEN_PENABLECALLBACK

//
// MCGEN_GETLENGTHSID macro:
// Override to use a custom API.
//
#ifndef MCGEN_GETLENGTHSID
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_GETLENGTHSID(p)      RtlLengthSid((PSID)(p))
  #else
    #define MCGEN_GETLENGTHSID(p)      GetLengthSid((PSID)(p))
  #endif
#endif // MCGEN_GETLENGTHSID

//
// MCGEN_EVENT_ENABLED macro:
// Controls how the EventWrite[EventName] macros determine whether an event is
// enabled. The default behavior is for EventWrite[EventName] to use the
// EventEnabled[EventName] macros.
//
#ifndef MCGEN_EVENT_ENABLED
#define MCGEN_EVENT_ENABLED(EventName) EventEnabled##EventName()
#endif

//
// MCGEN_EVENT_BIT_SET macro:
// Implements testing a bit in an array of ULONG, optimized for CPU type.
//
#ifndef MCGEN_EVENT_BIT_SET
#  if defined(_M_IX86) || defined(_M_X64)
#    define MCGEN_EVENT_BIT_SET(EnableBits, BitPosition) ((((const unsigned char*)EnableBits)[BitPosition >> 3] & (1u << (BitPosition & 7))) != 0)
#  else
#    define MCGEN_EVENT_BIT_SET(EnableBits, BitPosition) ((EnableBits[BitPosition >> 5] & (1u << (BitPosition & 31))) != 0)
#  endif
#endif // MCGEN_EVENT_BIT_SET

//
// MCGEN_ENABLE_CHECK macro:
// Determines whether the specified event would be considered as enabled
// based on the state of the specified context. Slightly faster than calling
// McGenEventEnabled directly.
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled && McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;      // Used as pointer to provider traits.
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level;
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif // MCGEN_TRACE_CONTEXT_DEF

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
//
// Determines whether an event with a given Level and Keyword would be
// considered as enabled based on the state of the specified context.
// Note that you may want to use MCGEN_ENABLE_CHECK instead of calling this
// function directly.
//
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;
}
#endif // MCGEN_LEVEL_KEYWORD_ENABLED_DEF

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
//
// Determines whether the specified event would be considered as enabled based
// on the state of the specified context. Note that you may want to use
// MCGEN_ENABLE_CHECK instead of calling this function directly.
//
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);
}
#endif // MCGEN_EVENT_ENABLED_DEF

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Windows Vista and later.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider.

    ControlCode - The parameter indicates whether the provider
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category
                      of events that the provider writes.

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;

        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif // MCGEN_PRIVATE_ENABLE_CALLBACK_V2

    return;
}

#endif // MCGEN_CONTROL_CALLBACK

#ifndef McGenEventWrite_def
#define McGenEventWrite_def
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventWrite(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCGUID ActivityId,
    _In_range_(1, 128) ULONG EventDataCount,
    _Inout_updates_(EventDataCount) EVENT_DATA_DESCRIPTOR* EventData
    )
{
    const USHORT UNALIGNED* Traits;

    // Some customized MCGEN_EVENTWRITETRANSFER macros might ignore ActivityId.
    UNREFERENCED_PARAMETER(ActivityId);

    Traits = (const USHORT UNALIGNED*)(UINT_PTR)Context->Logger;

    if (Traits == NULL) {
        EventData[0].Ptr = 0;
        EventData[0].Size = 0;
        EventData[0].Reserved = 0;
    } else {
        EventData[0].Ptr = (ULONG_PTR)Traits;
        EventData[0].Size = *Traits;
        EventData[0].Reserved = 2; // EVENT_DATA_DESCRIPTOR_TYPE_PROVIDER_METADATA
    }

    return MCGEN_EVENTWRITETRANSFER(
        Context->RegistrationHandle,
        Descriptor,
        ActivityId,
        NULL,
        EventDataCount,
        EventData);
}
#endif // McGenEventWrite_def

#ifndef McGenEventSetInformation_def
#define McGenEventSetInformation_def
_IRQL_requires_max_(PASSIVE_LEVEL)
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventSetInformation(
    _In_ REGHANDLE RegHandle,
    _In_ EVENT_INFO_CLASS InformationClass,
    _In_opt_bytecount_(InformationLength) PVOID EventInformation,
    _In_ ULONG InformationLength
    )
/*++

Routine Description:

    This function invokes EventSetInformation to provide additional information
    to the ETW runtime.

    Note that the implementation of this function depends on the values of
    the MCGEN_HAVE_EVENTSETINFORMATION and MCGEN_EVENTSETINFORMATION macros.
    Depending on the values of these macros, this function may call
    EventSetInformation directly, may dynamically-load EventSetInformation
    via GetProcAddress, or may call a replacement function.

Arguments:

    RegHandle - Registration handle returned by EventRegister.

    InformationClass - Type of operation to be performed on the registration
                       object.

    EventInformation - The input buffer.

    InformationLength - Size of the input buffer.

--*/
{
    ULONG Error;

#if MCGEN_HAVE_EVENTSETINFORMATION == 1

#pragma warning(suppress: 6387) // It's ok for EventInformation to be null if InformationLength is 0.
    Error = MCGEN_EVENTSETINFORMATION(
        RegHandle,
        InformationClass,
        EventInformation,
        InformationLength);

#elif MCGEN_HAVE_EVENTSETINFORMATION == 2

#if MCGEN_USE_KERNEL_MODE_APIS
    typedef NTSTATUS(NTAPI* PFEtwSetInformation)(
        _In_ REGHANDLE regHandle,
        _In_ EVENT_INFO_CLASS informationClass,
        _In_opt_bytecount_(informationLength) PVOID eventInformation,
        _In_ ULONG informationLength);
    static UNICODE_STRING strEtwSetInformation = {
        sizeof(L"EtwSetInformation") - 2,
        sizeof(L"EtwSetInformation") - 2,
        L"EtwSetInformation"
    };
    PFEtwSetInformation pfEtwSetInformation;
#pragma warning(push)
#pragma warning(disable: 4055) // Allow the cast from a PVOID to a PFN
    pfEtwSetInformation = (PFEtwSetInformation)MmGetSystemRoutineAddress(&strEtwSetInformation);
#pragma warning(pop)
    if (pfEtwSetInformation)
    {
        Error = pfEtwSetInformation(
            RegHandle,
            InformationClass,
            EventInformation,
            InformationLength);
    }
    else
    {
        Error = STATUS_NOT_SUPPORTED;
    }
#else // !MCGEN_USE_KERNEL_MODE_APIS
    HMODULE hEventing;
    Error = ERROR_NOT_SUPPORTED;
    if (GetModuleHandleExW(0, L"api-ms-win-eventing-provider-l1-1-0", &hEventing) ||
        GetModuleHandleExW(0, L"advapi32", &hEventing))
    {
        typedef ULONG(WINAPI* PFEventSetInformation)(
            _In_ REGHANDLE regHandle,
            _In_ EVENT_INFO_CLASS informationClass,
            _In_opt_bytecount_(informationLength) PVOID eventInformation,
            _In_ ULONG informationLength);
        PFEventSetInformation pfEventSetInformation =
            (PFEventSetInformation)GetProcAddress(hEventing, "EventSetInformation");
        if (pfEventSetInformation)
        {
            Error = pfEventSetInformation(
                RegHandle,
                InformationClass,
                EventInformation,
                InformationLength);
        }

        FreeLibrary(hEventing);
    }
#endif // MCGEN_USE_KERNEL_MODE_APIS

#else // MCGEN_HAVE_EVENTSETINFORMATION == 0

    (void)RegHandle;
    (void)InformationClass;
    (void)EventInformation;
    (void)InformationLength;

  #if MCGEN_USE_KERNEL_MODE_APIS
    Error = STATUS_NOT_SUPPORTED;
  #else // !MCGEN_USE_KERNEL_MODE_APIS
    Error = ERROR_NOT_SUPPORTED;
  #endif // MCGEN_USE_KERNEL_MODE_APIS

#endif // MCGEN_HAVE_EVENTSETINFORMATION

    return Error;
}
#endif // McGenEventSetInformation_def

#ifndef McGenEventRegisterContext_def
#define McGenEventRegisterContext_def
#pragma warning(push)
#pragma warning(disable:6103)
_IRQL_requires_max_(PASSIVE_LEVEL)
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegisterContext(
    _In_ LPCGUID ProviderId,
    _In_opt_ MCGEN_PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ MCGEN_TRACE_CONTEXT* Context
    )
/*++

Routine Description:

    This function registers the provider with ETW and registers provider
    traits. The EventRegister[ProviderName] macro will use this function
    instead of McGenEventRegister if the provider has traits to be registered.

Arguments:

    ProviderId - Provider ID to register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for the callback.

    Context - Provider context.

Remarks:

    Should not be called if the provider is already registered (i.e. should not
    be called if Context->RegistrationHandle != 0). Repeatedly registering a
    provider is a bug and may indicate a race condition.

--*/
{
    ULONG Error;

    if (Context->RegistrationHandle != 0)
    {
#if MCGEN_USE_KERNEL_MODE_APIS
        Error = (ULONG)STATUS_INVALID_PARAMETER;
#else
        Error = ERROR_INVALID_PARAMETER;
#endif
    }
    else
    {
        Error = MCGEN_EVENTREGISTER(
            ProviderId,
            EnableCallback,
            CallbackContext,
            &Context->RegistrationHandle);
        if (Error == 0 && Context->Logger != 0)
        {
            (void)McGenEventSetInformation(
                Context->RegistrationHandle,
                (EVENT_INFO_CLASS)2, // EventProviderSetTraits
                (void*)Context->Logger,
                *(USHORT const UNALIGNED*)Context->Logger);
        }
    }

    return Error;
}
#pragma warning(pop)
#endif // McGenEventRegisterContext_def

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister

#pragma warning(push)
#pragma warning(disable:6103)
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ MCGEN_PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function registers the provider with ETW.

Arguments:

    ProviderId - Provider ID to register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for the callback.

    RegHandle - Pointer to registration handle.

Remarks:

    Should not be called if the provider is already registered (i.e. should not
    be called if *RegHandle != 0). Repeatedly registering a provider is a bug
    and may indicate a race condition. However, for compatibility with previous
    behavior, this function will return SUCCESS in this case.

--*/
{
    ULONG Error;

    if (*RegHandle != 0)
    {
        Error = 0; // ERROR_SUCCESS
    }
    else
    {
        Error = MCGEN_EVENTREGISTER(ProviderId, EnableCallback, CallbackContext, RegHandle);
    }

    return Error;
}
#pragma warning(pop)

DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW and set *RegHandle = 0.

Arguments:

    RegHandle - the pointer to the provider registration handle

Remarks:

    If provider has not been registered (i.e. if *RegHandle == 0),
    return SUCCESS. It is safe to call McGenEventUnregister even if the
    call to McGenEventRegister returned an error.

--*/
{
    ULONG Error;

    if(*RegHandle == 0)
    {
        Error = 0; // ERROR_SUCCESS
    }
    else
    {
        Error = MCGEN_EVENTUNREGISTER(*RegHandle);
        *RegHandle = (REGHANDLE)0;
    }

    return Error;
}

#endif // McGenEventRegisterUnregister

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Provider "ProviderName1.716EFEF75AC24EE08277D9226411A155" event count 10
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Provider GUID = 716efef7-5ac2-4ee0-8277-d9226411a155
EXTERN_C __declspec(selectany) const GUID ProviderSym1 = {0x716efef7, 0x5ac2, 0x4ee0, {0x82, 0x77, 0xd9, 0x22, 0x64, 0x11, 0xa1, 0x55}};

// Control GUID = 35919cde-6e0d-458f-84c1-d8930e18ac57
EXTERN_C __declspec(selectany) const GUID ProviderSym1_ControlGuid = {0x35919cde, 0x6e0d, 0x458f, {0x84, 0xc1, 0xd8, 0x93, 0x0e, 0x18, 0xac, 0x57}};

#ifndef ProviderSym1_Traits
#define ProviderSym1_Traits ( \
    "\x57\x00" /* Total size of traits = 87 */ \
    "ProviderName1.716EFEF75AC24EE08277D9226411A155\x00" /* Provider name */ \
    "\x13\x00\x01\xFD\xE8\xA0\x5F\xC9\x0A\xE1\x4E\x98\xDE\x73\xC6\x99\x12\xE6\xD1" /* Group guid */ \
    "\x13\x00\x02\xF7\xFE\x6E\x71\xC2\x5A\xE0\x4E\x82\x77\xD9\x22\x64\x11\xA1\x55" /* Decode guid */ \
    )
#endif // ProviderSym1_Traits

//
// Channel
//
#define ProviderSym1_CHANNEL_Channel1 0x14
#define ProviderSym1_CHANNEL_P1_ChannelName2 0x11
#define ChannelSym3 0x10
#define ChannelSym4 0xff
#define ProviderSym1_CHANNEL_Security 0xa
#define ProviderSym1_CHANNEL_Application 0x9
#define ProviderSym1_CHANNEL_System 0x8
#define ProviderSym1_CHANNEL_TraceClassic 0x0

//
// Levels
//
#define LevelSym1 0x69
#define ProviderSym1_LEVEL_ns2_LevelName2 0x68
#define LevelSym3 0x67
#define LevelSym4 0x66
#define LevelSym5 0x65
#define LevelSym6 0x6a
#define LevelSym7 0x6b
#define LevelSym8 0x6c
#define LevelSym9 0xff

//
// Opcodes
//
#define OpcodeSym3 0x67
#define ProviderSym1_OPCODE_ns2_OpcodeName2 0xa
#define OpcodeSym1 0xef

//
// Tasks
//
#define TaskSym1 0x67
EXTERN_C __declspec(selectany) const GUID ns1_TaskName1Id = {0xd0883fa6, 0xf3fd, 0x43c3, {0xa0, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}};
#define ProviderSym1_TASK_ns2_TaskName2 0x66
#define TaskSym3 0x65
#define TaskSym4 0xffff
EXTERN_C __declspec(selectany) const GUID TaskName4Id = {0xd0883fa6, 0xf3fd, 0x43c3, {0xa0, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03}};

//
// Keyword
//
#define KeywordSym1 0x400000000000
#define ProviderSym1_KEYWORD_KeywordName2 0x800000000000
#define ProviderSym1_KEYWORD_KeywordName0000000000000001 0x1
#define ProviderSym1_KEYWORD_KeywordName0000000000000002 0x2
#define ProviderSym1_KEYWORD_KeywordName0000000000000004 0x4
#define ProviderSym1_KEYWORD_KeywordName0000000000000008 0x8
#define ProviderSym1_KEYWORD_KeywordName0000000000000010 0x10
#define ProviderSym1_KEYWORD_KeywordName0000000000000020 0x20
#define ProviderSym1_KEYWORD_KeywordName0000000000000040 0x40
#define ProviderSym1_KEYWORD_KeywordName0000000000000080 0x80
#define ProviderSym1_KEYWORD_KeywordName0000000000000100 0x100
#define ProviderSym1_KEYWORD_KeywordName0000000000000200 0x200
#define ProviderSym1_KEYWORD_KeywordName0000000000000400 0x400
#define ProviderSym1_KEYWORD_KeywordName0000000000000800 0x800
#define ProviderSym1_KEYWORD_KeywordName0000000000001000 0x1000
#define ProviderSym1_KEYWORD_KeywordName0000000000002000 0x2000
#define ProviderSym1_KEYWORD_KeywordName0000000000004000 0x4000
#define ProviderSym1_KEYWORD_KeywordName0000000000008000 0x8000
#define ProviderSym1_KEYWORD_KeywordName0000000000010000 0x10000
#define ProviderSym1_KEYWORD_KeywordName0000000000020000 0x20000
#define ProviderSym1_KEYWORD_KeywordName0000000000040000 0x40000
#define ProviderSym1_KEYWORD_KeywordName0000000000080000 0x80000
#define ProviderSym1_KEYWORD_KeywordName0000000000100000 0x100000
#define ProviderSym1_KEYWORD_KeywordName0000000000200000 0x200000
#define ProviderSym1_KEYWORD_KeywordName0000000000400000 0x400000
#define ProviderSym1_KEYWORD_KeywordName0000000000800000 0x800000
#define ProviderSym1_KEYWORD_KeywordName0000000001000000 0x1000000
#define ProviderSym1_KEYWORD_KeywordName0000000002000000 0x2000000
#define ProviderSym1_KEYWORD_KeywordName0000000004000000 0x4000000
#define ProviderSym1_KEYWORD_KeywordName0000000008000000 0x8000000
#define ProviderSym1_KEYWORD_KeywordName0000000010000000 0x10000000
#define ProviderSym1_KEYWORD_KeywordName0000000020000000 0x20000000
#define ProviderSym1_KEYWORD_KeywordName0000000040000000 0x40000000
#define ProviderSym1_KEYWORD_KeywordName0000000080000000 0x80000000
#define ProviderSym1_KEYWORD_KeywordName0000000100000000 0x100000000
#define ProviderSym1_KEYWORD_KeywordName0000000200000000 0x200000000
#define ProviderSym1_KEYWORD_KeywordName0000000400000000 0x400000000
#define ProviderSym1_KEYWORD_KeywordName0000000800000000 0x800000000

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ProviderSym1_EVENT_0x5_b_11_69_ef_67_4000c00000000000 = {0x5, 0xb, 0x11, 0x69, 0xef, 0x67, 0x4000c00000000000};
#define ProviderSym1_EVENT_0x5_b_11_69_ef_67_4000c00000000000_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ProviderSym1_EVENT_0x4_0_c_0_0_0_0 = {0x4, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0};
#define ProviderSym1_EVENT_0x4_0_c_0_0_0_0_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EventSym4 = {0x2, 0x2c, 0xc, 0x66, 0xef, 0x0, 0x0};
#define EventSym4_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EventSym5 = {0x1, 0x37, 0xc, 0x65, 0x0, 0x0, 0x400000000000};
#define EventSym5_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EventSym6 = {0x6, 0x42, 0xc, 0x6a, 0x0, 0x0, 0xc00000000000};
#define EventSym6_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EventSym7 = {0x7, 0x0, 0xc, 0x6b, 0x0, 0x0, 0xc00000000000};
#define EventSym7_value 0x7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EventSym8 = {0x8, 0x0, 0xc, 0x2, 0x0, 0x0, 0x1c00000000000};
#define EventSym8_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ProviderSym1_EVENT_0x9_fe_c_ff_0_0_c00000000000 = {0x9, 0xfe, 0xc, 0xff, 0x0, 0x0, 0xc00000000000};
#define ProviderSym1_EVENT_0x9_fe_c_ff_0_0_c00000000000_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ProviderSym1_EVENT_0xffff_ff_c_6c_0_0_c00000000000 = {0xffff, 0xff, 0xc, 0x6c, 0x0, 0x0, 0xc00000000000};
#define ProviderSym1_EVENT_0xffff_ff_c_6c_0_0_c00000000000_value 0xffff

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#ifndef _BitMapSym1_def
#define _BitMapSym1_def
typedef enum _BitMapSym1
{
    BitMapSym1BitMap1ItemSym1 = 4,
    BitMapSym1BitMap1ItemSym3 = -2147483648,
} BitMapSym1;
#endif // _BitMapSym1_def

#ifndef _ValueMapSym1_def
#define _ValueMapSym1_def
typedef enum _ValueMapSym1
{
    ValueMapSym1ValueMap1ItemSym1 = 22,
    ValueMapSym1ValueMap1ItemSym3 = 0,
    ValueMapSym1ValueMap1ItemSym2 = -1,
} ValueMapSym1;
#endif // _ValueMapSym1_def

//
// Event Enablement Bits
//
EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG ProviderName1_716EFEF75AC24EE08277D9226411A155Keywords[10] = {0x4000c00000000000, 0x0, 0x0, 0x0, 0x400000000000, 0xc00000000000, 0xc00000000000, 0x1c00000000000, 0xc00000000000, 0xc00000000000};
EXTERN_C __declspec(selectany) const unsigned char ProviderName1_716EFEF75AC24EE08277D9226411A155Levels[10] = {105, 0, 103, 102, 101, 106, 107, 2, 255, 108};

//
// Provider context
//
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT ProviderSym1_Context = {0, (ULONG_PTR)ProviderSym1_Traits, 0, 0, 0, 0, 0, 0, 10, ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits, ProviderName1_716EFEF75AC24EE08277D9226411A155Keywords, ProviderName1_716EFEF75AC24EE08277D9226411A155Levels};

//
// Provider REGHANDLE
//
#define ProviderSym1_Handle (ProviderSym1_Context.RegistrationHandle)

//
// This macro is set to 0, indicating that the EventWrite[Name] macros do not
// have an Activity parameter. This is controlled by the -km and -um options.
//
#define ProviderSym1_EventWriteActivity 0

//
// Register with ETW using the control GUID specified in the manifest.
// Invoke this macro during module initialization (i.e. program startup,
// DLL process attach, or driver load) to initialize the provider.
// Note that if this function returns an error, the error means that
// will not work, but no action needs to be taken -- even if EventRegister
// returns an error, it is generally safe to use EventWrite and
// EventUnregister macros (they will be no-ops if EventRegister failed).
//
#ifndef EventRegister_ProviderSym1
#define EventRegister_ProviderSym1() McGenEventRegisterContext(&ProviderSym1_ControlGuid, McGenControlCallbackV2, &ProviderSym1_Context, &ProviderSym1_Context)
#endif

//
// Register with ETW using a specific control GUID (i.e. a GUID other than what
// is specified in the manifest). Advanced scenarios only.
//
#ifndef EventRegisterByGuid_ProviderSym1
#define EventRegisterByGuid_ProviderSym1(Guid) McGenEventRegisterContext(&(Guid), McGenControlCallbackV2, &ProviderSym1_Context, &ProviderSym1_Context)
#endif

//
// Unregister with ETW and close the provider.
// Invoke this macro during module shutdown (i.e. program exit, DLL process
// detach, or driver unload) to unregister the provider.
// Note that you MUST call EventUnregister before DLL or driver unload
// (not optional): failure to unregister a provider before DLL or driver unload
// will result in crashes.
//
#ifndef EventUnregister_ProviderSym1
#define EventUnregister_ProviderSym1() McGenEventUnregister(&ProviderSym1_Handle)
#endif

//
// Enablement check macro for ProviderSym1_EVENT_0x5_b_11_69_ef_67_4000c00000000000
//
#define EventEnabledProviderSym1_EVENT_0x5_b_11_69_ef_67_4000c00000000000() MCGEN_EVENT_BIT_SET(ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits, 0)

//
// Event write macros for ProviderSym1_EVENT_0x5_b_11_69_ef_67_4000c00000000000
//
#define EventWriteProviderSym1_EVENT_0x5_b_11_69_ef_67_4000c00000000000(Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22_Len_, Data22, Data23_Len_, Data23, Data24_Len_, Data24) \
        MCGEN_EVENT_ENABLED(ProviderSym1_EVENT_0x5_b_11_69_ef_67_4000c00000000000) \
        ? McTemplateU0zsculhdqixfgtb3jpmykdiwae(&ProviderSym1_Context, &ProviderSym1_EVENT_0x5_b_11_69_ef_67_4000c00000000000, Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22_Len_, Data22, Data23_Len_, Data23, Data24_Len_, Data24) : 0
#define EventWriteProviderSym1_EVENT_0x5_b_11_69_ef_67_4000c00000000000_AssumeEnabled(Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22_Len_, Data22, Data23_Len_, Data23, Data24_Len_, Data24) \
        McTemplateU0zsculhdqixfgtb3jpmykdiwae(&ProviderSym1_Context, &ProviderSym1_EVENT_0x5_b_11_69_ef_67_4000c00000000000, Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22_Len_, Data22, Data23_Len_, Data23, Data24_Len_, Data24)

//
// Enablement check macro for ProviderSym1_EVENT_0x4_0_c_0_0_0_0
//
#define EventEnabledProviderSym1_EVENT_0x4_0_c_0_0_0_0() MCGEN_EVENT_BIT_SET(ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits, 1)

//
// Event write macros for ProviderSym1_EVENT_0x4_0_c_0_0_0_0
//
#define EventWriteProviderSym1_EVENT_0x4_0_c_0_0_0_0() \
        MCGEN_EVENT_ENABLED(ProviderSym1_EVENT_0x4_0_c_0_0_0_0) \
        ? McTemplateU0(&ProviderSym1_Context, &ProviderSym1_EVENT_0x4_0_c_0_0_0_0) : 0
#define EventWriteProviderSym1_EVENT_0x4_0_c_0_0_0_0_AssumeEnabled() \
        McTemplateU0(&ProviderSym1_Context, &ProviderSym1_EVENT_0x4_0_c_0_0_0_0)

//
// Enablement check macro for EventSym4
//
#define EventEnabledEventSym4() MCGEN_EVENT_BIT_SET(ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits, 3)

//
// Event write macros for EventSym4
//
#define EventWriteEventSym4(Data4, Data6, Data8, Data22) \
        MCGEN_EVENT_ENABLED(EventSym4) \
        ? McTemplateU0uhqd(&ProviderSym1_Context, &EventSym4, Data4, Data6, Data8, Data22) : 0
#define EventWriteEventSym4_AssumeEnabled(Data4, Data6, Data8, Data22) \
        McTemplateU0uhqd(&ProviderSym1_Context, &EventSym4, Data4, Data6, Data8, Data22)

//
// Enablement check macro for EventSym5
//
#define EventEnabledEventSym5() MCGEN_EVENT_BIT_SET(ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits, 4)

//
// Event write macros for EventSym5
//
// MC Note :: Macro for event id = 1
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEventSym5(CountData1, CountData2, CountData3_Len_, CountData3, CountData4_Len_, CountData4, CountData5, CountData6, CountData7, CountData8, CountData9, CountData10, CountData11, CountData12, CountData13, CountData14, CountData15, CountData16, CountData17, CountData18, CountData19, CountData20, CountData21_Len_, CountData21, CountData22, CountData23) \
        MCGEN_EVENT_ENABLED(EventSym5) \
        ? McTemplateU0ucZRSRC4U5L5H5D5Q5I5X5F5G5T5B15J5P5M5Y5K5D5I5(&ProviderSym1_Context, &EventSym5, CountData1, CountData2, CountData3_Len_, CountData3, CountData4_Len_, CountData4, CountData5, CountData6, CountData7, CountData8, CountData9, CountData10, CountData11, CountData12, CountData13, CountData14, CountData15, CountData16, CountData17, CountData18, CountData19, CountData20, CountData21_Len_, CountData21, CountData22, CountData23) : 0
#define EventWriteEventSym5_AssumeEnabled(CountData1, CountData2, CountData3_Len_, CountData3, CountData4_Len_, CountData4, CountData5, CountData6, CountData7, CountData8, CountData9, CountData10, CountData11, CountData12, CountData13, CountData14, CountData15, CountData16, CountData17, CountData18, CountData19, CountData20, CountData21_Len_, CountData21, CountData22, CountData23) \
        McTemplateU0ucZRSRC4U5L5H5D5Q5I5X5F5G5T5B15J5P5M5Y5K5D5I5(&ProviderSym1_Context, &EventSym5, CountData1, CountData2, CountData3_Len_, CountData3, CountData4_Len_, CountData4, CountData5, CountData6, CountData7, CountData8, CountData9, CountData10, CountData11, CountData12, CountData13, CountData14, CountData15, CountData16, CountData17, CountData18, CountData19, CountData20, CountData21_Len_, CountData21, CountData22, CountData23)

//
// Enablement check macro for EventSym6
//
#define EventEnabledEventSym6() MCGEN_EVENT_BIT_SET(ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits, 5)

//
// Event write macros for EventSym6
//
// MC Note :: Macro for event id = 6
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEventSym6(Count1, Count2, Count3, VarCountData1, VarCountData2, VarCountData3_Len_, VarCountData3, VarCountData4_Len_, VarCountData4, VarCountData5, VarCountData6, VarCountData7, VarCountData8, VarCountData9, VarCountData10, VarCountData11, VarCountData12, VarCountData13, VarCountData14, VarCountData15, VarCountData16, VarCountData17, VarCountData18, VarCountData19, VarCountData20, VarCountData21_Len_, VarCountData21, VarCountData22, VarCountData23) \
        MCGEN_EVENT_ENABLED(EventSym6) \
        ? McTemplateU0uuuUR0CR1ZRSRCR0UR0LR0HR0DR0QR0IR0XR0FR0GR0TR0B3r0JR0PR0MR0YR0KR0DR0IR0(&ProviderSym1_Context, &EventSym6, Count1, Count2, Count3, VarCountData1, VarCountData2, VarCountData3_Len_, VarCountData3, VarCountData4_Len_, VarCountData4, VarCountData5, VarCountData6, VarCountData7, VarCountData8, VarCountData9, VarCountData10, VarCountData11, VarCountData12, VarCountData13, VarCountData14, VarCountData15, VarCountData16, VarCountData17, VarCountData18, VarCountData19, VarCountData20, VarCountData21_Len_, VarCountData21, VarCountData22, VarCountData23) : 0
#define EventWriteEventSym6_AssumeEnabled(Count1, Count2, Count3, VarCountData1, VarCountData2, VarCountData3_Len_, VarCountData3, VarCountData4_Len_, VarCountData4, VarCountData5, VarCountData6, VarCountData7, VarCountData8, VarCountData9, VarCountData10, VarCountData11, VarCountData12, VarCountData13, VarCountData14, VarCountData15, VarCountData16, VarCountData17, VarCountData18, VarCountData19, VarCountData20, VarCountData21_Len_, VarCountData21, VarCountData22, VarCountData23) \
        McTemplateU0uuuUR0CR1ZRSRCR0UR0LR0HR0DR0QR0IR0XR0FR0GR0TR0B3r0JR0PR0MR0YR0KR0DR0IR0(&ProviderSym1_Context, &EventSym6, Count1, Count2, Count3, VarCountData1, VarCountData2, VarCountData3_Len_, VarCountData3, VarCountData4_Len_, VarCountData4, VarCountData5, VarCountData6, VarCountData7, VarCountData8, VarCountData9, VarCountData10, VarCountData11, VarCountData12, VarCountData13, VarCountData14, VarCountData15, VarCountData16, VarCountData17, VarCountData18, VarCountData19, VarCountData20, VarCountData21_Len_, VarCountData21, VarCountData22, VarCountData23)

//
// Enablement check macro for EventSym7
//
#define EventEnabledEventSym7() MCGEN_EVENT_BIT_SET(ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits, 6)

//
// Event write macros for EventSym7
//
#define EventWriteEventSym7(LengthData1, LengthData2, LengthData3, LengthData4, LengthData5, LengthData6, LengthData7, LengthData8, LengthData9, LengthData10, LengthData11) \
        MCGEN_EVENT_ENABLED(EventSym7) \
        ? McTemplateU0zz1z2ss1s2b1b2kkk(&ProviderSym1_Context, &EventSym7, LengthData1, LengthData2, LengthData3, LengthData4, LengthData5, LengthData6, LengthData7, LengthData8, LengthData9, LengthData10, LengthData11) : 0
#define EventWriteEventSym7_AssumeEnabled(LengthData1, LengthData2, LengthData3, LengthData4, LengthData5, LengthData6, LengthData7, LengthData8, LengthData9, LengthData10, LengthData11) \
        McTemplateU0zz1z2ss1s2b1b2kkk(&ProviderSym1_Context, &EventSym7, LengthData1, LengthData2, LengthData3, LengthData4, LengthData5, LengthData6, LengthData7, LengthData8, LengthData9, LengthData10, LengthData11)

//
// Enablement check macro for EventSym8
//
#define EventEnabledEventSym8() MCGEN_EVENT_BIT_SET(ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits, 7)

//
// Event write macros for EventSym8
//
// MC Note :: Macro for event id = 8
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteEventSym8(Length1, Length2, Length3, VarLengthData3, VarLengthData4, VarLengthData16, VarLengthData21_Len_, VarLengthData21) \
        MCGEN_EVENT_ENABLED(EventSym8) \
        ? McTemplateU0uuuzr0sr1br2KR2(&ProviderSym1_Context, &EventSym8, Length1, Length2, Length3, VarLengthData3, VarLengthData4, VarLengthData16, VarLengthData21_Len_, VarLengthData21) : 0
#define EventWriteEventSym8_AssumeEnabled(Length1, Length2, Length3, VarLengthData3, VarLengthData4, VarLengthData16, VarLengthData21_Len_, VarLengthData21) \
        McTemplateU0uuuzr0sr1br2KR2(&ProviderSym1_Context, &EventSym8, Length1, Length2, Length3, VarLengthData3, VarLengthData4, VarLengthData16, VarLengthData21_Len_, VarLengthData21)

//
// Enablement check macro for ProviderSym1_EVENT_0x9_fe_c_ff_0_0_c00000000000
//
#define EventEnabledProviderSym1_EVENT_0x9_fe_c_ff_0_0_c00000000000() MCGEN_EVENT_BIT_SET(ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits, 8)

//
// Event write macros for ProviderSym1_EVENT_0x9_fe_c_ff_0_0_c00000000000
//
// MC Note :: Macro for event id = 9
// This event contains complex types that require the caller to pack the data.
// Refer to the note at the top of this header for additional details.
//
#define EventWriteProviderSym1_EVENT_0x9_fe_c_ff_0_0_c00000000000(Count1, Count2, Count3, Length1, Length2, Length3, CountLengthData1_L0_C0, CountLengthData1_L0_C1, CountLengthData1_L0_C2_Len_, CountLengthData1_L0_C2, CountLengthData1_L1_C0, CountLengthData1_L1_C1, CountLengthData1_L1_C2, CountLengthData1_L2_C0, CountLengthData1_L2_C1, CountLengthData1_L2_C2, CountLengthData1_LV_C0, CountLengthData1_LV_C1, CountLengthData1_LV_C2, CountLengthData1_L0_CV_Len_, CountLengthData1_L0_CV, CountLengthData1_L1_CV, CountLengthData1_L2_CV, CountLengthData1_LV1_CV3, CountLengthData1_LV2_CV2, CountLengthData1_LV3_CV1, CountLengthData2_L0_C0, CountLengthData2_L0_C1, CountLengthData2_L0_C2_Len_, CountLengthData2_L0_C2, CountLengthData2_L1_C0, CountLengthData2_L1_C1, CountLengthData2_L1_C2, CountLengthData2_L2_C0, CountLengthData2_L2_C1, CountLengthData2_L2_C2, CountLengthData2_LV_C0, CountLengthData2_LV_C1, CountLengthData2_LV_C2, CountLengthData2_L0_CV_Len_, CountLengthData2_L0_CV, CountLengthData2_L1_CV, CountLengthData2_L2_CV, CountLengthData2_LV1_CV3, CountLengthData2_LV2_CV2, CountLengthData2_LV3_CV1, CountLengthData3_L1_C0, CountLengthData3_L1_C1, CountLengthData3_L1_C2, CountLengthData3_L2_C0, CountLengthData3_L2_C1, CountLengthData3_L2_C2, CountLengthData3_LV_C0, CountLengthData3_LV_C1, CountLengthData3_LV_C2, CountLengthData3_L1_CV, CountLengthData3_L2_CV, CountLengthData3_LV1_CV3, CountLengthData3_LV2_CV2, CountLengthData3_LV3_CV1, CountLengthData4_L0_C0, CountLengthData4_L0_C1, CountLengthData4_L0_C2_Len_, CountLengthData4_L0_C2, CountLengthData4_L1_C0, CountLengthData4_L1_C1, CountLengthData4_L1_C2_Len_, CountLengthData4_L1_C2, CountLengthData4_L2_C0, CountLengthData4_L2_C1, CountLengthData4_L2_C2_Len_, CountLengthData4_L2_C2, CountLengthData4_LV_C0, CountLengthData4_LV_C1, CountLengthData4_LV_C2_Len_, CountLengthData4_LV_C2, CountLengthData4_L0_CV_Len_, CountLengthData4_L0_CV, CountLengthData4_L1_CV_Len_, CountLengthData4_L1_CV, CountLengthData4_L2_CV_Len_, CountLengthData4_L2_CV, CountLengthData4_LV1_CV3_Len_, CountLengthData4_LV1_CV3, CountLengthData4_LV2_CV2_Len_, CountLengthData4_LV2_CV2, CountLengthData4_LV3_CV1_Len_, CountLengthData4_LV3_CV1) \
        MCGEN_EVENT_ENABLED(ProviderSym1_EVENT_0x9_fe_c_ff_0_0_c00000000000) \
        ? McTemplateU0uuuuuuzzZRz1z1Z2z2z2Z4zr5zr4Z2r3ZRZ1r1Z2r0Zr3R2Zr4R1Zr5R0ssSRs1s1S2s2s2S4sr5sr4S2r3SRS1r1S2r0Sr3R2Sr4R1Sr5R0b1b1B2b2b2B4br5br4B2r3B1r1B2r0Br3R2Br4R1Br5R0kkK2kkK2kkK2kkK2KR2KR1KR0KR2KR1KR0(&ProviderSym1_Context, &ProviderSym1_EVENT_0x9_fe_c_ff_0_0_c00000000000, Count1, Count2, Count3, Length1, Length2, Length3, CountLengthData1_L0_C0, CountLengthData1_L0_C1, CountLengthData1_L0_C2_Len_, CountLengthData1_L0_C2, CountLengthData1_L1_C0, CountLengthData1_L1_C1, CountLengthData1_L1_C2, CountLengthData1_L2_C0, CountLengthData1_L2_C1, CountLengthData1_L2_C2, CountLengthData1_LV_C0, CountLengthData1_LV_C1, CountLengthData1_LV_C2, CountLengthData1_L0_CV_Len_, CountLengthData1_L0_CV, CountLengthData1_L1_CV, CountLengthData1_L2_CV, CountLengthData1_LV1_CV3, CountLengthData1_LV2_CV2, CountLengthData1_LV3_CV1, CountLengthData2_L0_C0, CountLengthData2_L0_C1, CountLengthData2_L0_C2_Len_, CountLengthData2_L0_C2, CountLengthData2_L1_C0, CountLengthData2_L1_C1, CountLengthData2_L1_C2, CountLengthData2_L2_C0, CountLengthData2_L2_C1, CountLengthData2_L2_C2, CountLengthData2_LV_C0, CountLengthData2_LV_C1, CountLengthData2_LV_C2, CountLengthData2_L0_CV_Len_, CountLengthData2_L0_CV, CountLengthData2_L1_CV, CountLengthData2_L2_CV, CountLengthData2_LV1_CV3, CountLengthData2_LV2_CV2, CountLengthData2_LV3_CV1, CountLengthData3_L1_C0, CountLengthData3_L1_C1, CountLengthData3_L1_C2, CountLengthData3_L2_C0, CountLengthData3_L2_C1, CountLengthData3_L2_C2, CountLengthData3_LV_C0, CountLengthData3_LV_C1, CountLengthData3_LV_C2, CountLengthData3_L1_CV, CountLengthData3_L2_CV, CountLengthData3_LV1_CV3, CountLengthData3_LV2_CV2, CountLengthData3_LV3_CV1, CountLengthData4_L0_C0, CountLengthData4_L0_C1, CountLengthData4_L0_C2_Len_, CountLengthData4_L0_C2, CountLengthData4_L1_C0, CountLengthData4_L1_C1, CountLengthData4_L1_C2_Len_, CountLengthData4_L1_C2, CountLengthData4_L2_C0, CountLengthData4_L2_C1, CountLengthData4_L2_C2_Len_, CountLengthData4_L2_C2, CountLengthData4_LV_C0, CountLengthData4_LV_C1, CountLengthData4_LV_C2_Len_, CountLengthData4_LV_C2, CountLengthData4_L0_CV_Len_, CountLengthData4_L0_CV, CountLengthData4_L1_CV_Len_, CountLengthData4_L1_CV, CountLengthData4_L2_CV_Len_, CountLengthData4_L2_CV, CountLengthData4_LV1_CV3_Len_, CountLengthData4_LV1_CV3, CountLengthData4_LV2_CV2_Len_, CountLengthData4_LV2_CV2, CountLengthData4_LV3_CV1_Len_, CountLengthData4_LV3_CV1) : 0
#define EventWriteProviderSym1_EVENT_0x9_fe_c_ff_0_0_c00000000000_AssumeEnabled(Count1, Count2, Count3, Length1, Length2, Length3, CountLengthData1_L0_C0, CountLengthData1_L0_C1, CountLengthData1_L0_C2_Len_, CountLengthData1_L0_C2, CountLengthData1_L1_C0, CountLengthData1_L1_C1, CountLengthData1_L1_C2, CountLengthData1_L2_C0, CountLengthData1_L2_C1, CountLengthData1_L2_C2, CountLengthData1_LV_C0, CountLengthData1_LV_C1, CountLengthData1_LV_C2, CountLengthData1_L0_CV_Len_, CountLengthData1_L0_CV, CountLengthData1_L1_CV, CountLengthData1_L2_CV, CountLengthData1_LV1_CV3, CountLengthData1_LV2_CV2, CountLengthData1_LV3_CV1, CountLengthData2_L0_C0, CountLengthData2_L0_C1, CountLengthData2_L0_C2_Len_, CountLengthData2_L0_C2, CountLengthData2_L1_C0, CountLengthData2_L1_C1, CountLengthData2_L1_C2, CountLengthData2_L2_C0, CountLengthData2_L2_C1, CountLengthData2_L2_C2, CountLengthData2_LV_C0, CountLengthData2_LV_C1, CountLengthData2_LV_C2, CountLengthData2_L0_CV_Len_, CountLengthData2_L0_CV, CountLengthData2_L1_CV, CountLengthData2_L2_CV, CountLengthData2_LV1_CV3, CountLengthData2_LV2_CV2, CountLengthData2_LV3_CV1, CountLengthData3_L1_C0, CountLengthData3_L1_C1, CountLengthData3_L1_C2, CountLengthData3_L2_C0, CountLengthData3_L2_C1, CountLengthData3_L2_C2, CountLengthData3_LV_C0, CountLengthData3_LV_C1, CountLengthData3_LV_C2, CountLengthData3_L1_CV, CountLengthData3_L2_CV, CountLengthData3_LV1_CV3, CountLengthData3_LV2_CV2, CountLengthData3_LV3_CV1, CountLengthData4_L0_C0, CountLengthData4_L0_C1, CountLengthData4_L0_C2_Len_, CountLengthData4_L0_C2, CountLengthData4_L1_C0, CountLengthData4_L1_C1, CountLengthData4_L1_C2_Len_, CountLengthData4_L1_C2, CountLengthData4_L2_C0, CountLengthData4_L2_C1, CountLengthData4_L2_C2_Len_, CountLengthData4_L2_C2, CountLengthData4_LV_C0, CountLengthData4_LV_C1, CountLengthData4_LV_C2_Len_, CountLengthData4_LV_C2, CountLengthData4_L0_CV_Len_, CountLengthData4_L0_CV, CountLengthData4_L1_CV_Len_, CountLengthData4_L1_CV, CountLengthData4_L2_CV_Len_, CountLengthData4_L2_CV, CountLengthData4_LV1_CV3_Len_, CountLengthData4_LV1_CV3, CountLengthData4_LV2_CV2_Len_, CountLengthData4_LV2_CV2, CountLengthData4_LV3_CV1_Len_, CountLengthData4_LV3_CV1) \
        McTemplateU0uuuuuuzzZRz1z1Z2z2z2Z4zr5zr4Z2r3ZRZ1r1Z2r0Zr3R2Zr4R1Zr5R0ssSRs1s1S2s2s2S4sr5sr4S2r3SRS1r1S2r0Sr3R2Sr4R1Sr5R0b1b1B2b2b2B4br5br4B2r3B1r1B2r0Br3R2Br4R1Br5R0kkK2kkK2kkK2kkK2KR2KR1KR0KR2KR1KR0(&ProviderSym1_Context, &ProviderSym1_EVENT_0x9_fe_c_ff_0_0_c00000000000, Count1, Count2, Count3, Length1, Length2, Length3, CountLengthData1_L0_C0, CountLengthData1_L0_C1, CountLengthData1_L0_C2_Len_, CountLengthData1_L0_C2, CountLengthData1_L1_C0, CountLengthData1_L1_C1, CountLengthData1_L1_C2, CountLengthData1_L2_C0, CountLengthData1_L2_C1, CountLengthData1_L2_C2, CountLengthData1_LV_C0, CountLengthData1_LV_C1, CountLengthData1_LV_C2, CountLengthData1_L0_CV_Len_, CountLengthData1_L0_CV, CountLengthData1_L1_CV, CountLengthData1_L2_CV, CountLengthData1_LV1_CV3, CountLengthData1_LV2_CV2, CountLengthData1_LV3_CV1, CountLengthData2_L0_C0, CountLengthData2_L0_C1, CountLengthData2_L0_C2_Len_, CountLengthData2_L0_C2, CountLengthData2_L1_C0, CountLengthData2_L1_C1, CountLengthData2_L1_C2, CountLengthData2_L2_C0, CountLengthData2_L2_C1, CountLengthData2_L2_C2, CountLengthData2_LV_C0, CountLengthData2_LV_C1, CountLengthData2_LV_C2, CountLengthData2_L0_CV_Len_, CountLengthData2_L0_CV, CountLengthData2_L1_CV, CountLengthData2_L2_CV, CountLengthData2_LV1_CV3, CountLengthData2_LV2_CV2, CountLengthData2_LV3_CV1, CountLengthData3_L1_C0, CountLengthData3_L1_C1, CountLengthData3_L1_C2, CountLengthData3_L2_C0, CountLengthData3_L2_C1, CountLengthData3_L2_C2, CountLengthData3_LV_C0, CountLengthData3_LV_C1, CountLengthData3_LV_C2, CountLengthData3_L1_CV, CountLengthData3_L2_CV, CountLengthData3_LV1_CV3, CountLengthData3_LV2_CV2, CountLengthData3_LV3_CV1, CountLengthData4_L0_C0, CountLengthData4_L0_C1, CountLengthData4_L0_C2_Len_, CountLengthData4_L0_C2, CountLengthData4_L1_C0, CountLengthData4_L1_C1, CountLengthData4_L1_C2_Len_, CountLengthData4_L1_C2, CountLengthData4_L2_C0, CountLengthData4_L2_C1, CountLengthData4_L2_C2_Len_, CountLengthData4_L2_C2, CountLengthData4_LV_C0, CountLengthData4_LV_C1, CountLengthData4_LV_C2_Len_, CountLengthData4_LV_C2, CountLengthData4_L0_CV_Len_, CountLengthData4_L0_CV, CountLengthData4_L1_CV_Len_, CountLengthData4_L1_CV, CountLengthData4_L2_CV_Len_, CountLengthData4_L2_CV, CountLengthData4_LV1_CV3_Len_, CountLengthData4_LV1_CV3, CountLengthData4_LV2_CV2_Len_, CountLengthData4_LV2_CV2, CountLengthData4_LV3_CV1_Len_, CountLengthData4_LV3_CV1)

//
// Enablement check macro for ProviderSym1_EVENT_0xffff_ff_c_6c_0_0_c00000000000
//
#define EventEnabledProviderSym1_EVENT_0xffff_ff_c_6c_0_0_c00000000000() MCGEN_EVENT_BIT_SET(ProviderName1_716EFEF75AC24EE08277D9226411A155EnableBits, 9)

//
// Event write macros for ProviderSym1_EVENT_0xffff_ff_c_6c_0_0_c00000000000
//
#define EventWriteProviderSym1_EVENT_0xffff_ff_c_6c_0_0_c00000000000(Struct1_Len_, Struct1, Field2, Struct3_Len_, Struct3, Struct4_Len_, Struct4, Struct5_Len_, Struct5, Field6, Field7, Struct8_Len_, Struct8) \
        MCGEN_EVENT_ENABLED(ProviderSym1_EVENT_0xffff_ff_c_6c_0_0_c00000000000) \
        ? McTemplateU0nunnN3uuNR5(&ProviderSym1_Context, &ProviderSym1_EVENT_0xffff_ff_c_6c_0_0_c00000000000, Struct1_Len_, Struct1, Field2, Struct3_Len_, Struct3, Struct4_Len_, Struct4, Struct5_Len_, Struct5, Field6, Field7, Struct8_Len_, Struct8) : 0
#define EventWriteProviderSym1_EVENT_0xffff_ff_c_6c_0_0_c00000000000_AssumeEnabled(Struct1_Len_, Struct1, Field2, Struct3_Len_, Struct3, Struct4_Len_, Struct4, Struct5_Len_, Struct5, Field6, Field7, Struct8_Len_, Struct8) \
        McTemplateU0nunnN3uuNR5(&ProviderSym1_Context, &ProviderSym1_EVENT_0xffff_ff_c_6c_0_0_c00000000000, Struct1_Len_, Struct1, Field2, Struct3_Len_, Struct3, Struct4_Len_, Struct4, Struct5_Len_, Struct5, Field6, Field7, Struct8_Len_, Struct8)

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Provider "ProviderName2" event count 1
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Provider GUID = d2eb3575-b9ae-4b4f-a0b7-61034a28c267
EXTERN_C __declspec(selectany) const GUID ProviderSym2 = {0xd2eb3575, 0xb9ae, 0x4b4f, {0xa0, 0xb7, 0x61, 0x03, 0x4a, 0x28, 0xc2, 0x67}};

#ifndef ProviderSym2_Traits
#define ProviderSym2_Traits NULL
#endif // ProviderSym2_Traits

//
// Channel
//
#define ProviderSym2_CHANNEL_Channel2 0x2c
#define ProviderSym2_CHANNEL_Channel1 0x21

//
// Levels
//
#define ProviderSym2_LEVEL_LevelName5 0x69
#define ProviderSym2_LEVEL_LevelName1 0x65
#define ProviderSym2_LEVEL_LevelName2 0x66
#define ProviderSym2_LEVEL_LevelName3 0x67
#define ProviderSym2_LEVEL_LevelName4 0x68
#define ProviderSym2_LEVEL_LevelName6 0x6a
#define ProviderSym2_LEVEL_LevelName7 0x6b
#define ProviderSym2_LEVEL_LevelName8 0x6c
#define ProviderSym2_LEVEL_LevelName9 0x6d

//
// Opcodes
//
#define OpcodeSym2 0x16
#define OpcodeSym1 0xb

//
// Tasks
//
#define TaskSym3 0x67
#define TaskSym1 0x65
EXTERN_C __declspec(selectany) const GUID TaskName1Id = {0xd0883fa6, 0xf3fd, 0x43c3, {0xa0, 0xe4, 0x1f, 0xce, 0xcc, 0x87, 0xaf, 0x8b}};
#define TaskSym2 0x66

//
// Keyword
//
#define ProviderSym2_KEYWORD_KeywordName3 0x400000000000
#define ProviderSym2_KEYWORD_KeywordName1 0x100000000000
#define ProviderSym2_KEYWORD_KeywordName2 0x200000000000

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EventSym1 = {0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
#define EventSym1_value 0x1

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Event Enablement Bits
//
EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG ProviderName2EnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG ProviderName2Keywords[1] = {0x0};
EXTERN_C __declspec(selectany) const unsigned char ProviderName2Levels[1] = {0};

//
// Provider context
//
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT ProviderSym2_Context = {0, (ULONG_PTR)ProviderSym2_Traits, 0, 0, 0, 0, 0, 0, 1, ProviderName2EnableBits, ProviderName2Keywords, ProviderName2Levels};

//
// Provider REGHANDLE
//
#define ProviderName2Handle (ProviderSym2_Context.RegistrationHandle)

//
// This macro is set to 0, indicating that the EventWrite[Name] macros do not
// have an Activity parameter. This is controlled by the -km and -um options.
//
#define ProviderSym2_EventWriteActivity 0

//
// Register with ETW using the control GUID specified in the manifest.
// Invoke this macro during module initialization (i.e. program startup,
// DLL process attach, or driver load) to initialize the provider.
// Note that if this function returns an error, the error means that
// will not work, but no action needs to be taken -- even if EventRegister
// returns an error, it is generally safe to use EventWrite and
// EventUnregister macros (they will be no-ops if EventRegister failed).
//
#ifndef EventRegisterProviderName2
#define EventRegisterProviderName2() McGenEventRegister(&ProviderSym2, McGenControlCallbackV2, &ProviderSym2_Context, &ProviderName2Handle)
#endif

//
// Register with ETW using a specific control GUID (i.e. a GUID other than what
// is specified in the manifest). Advanced scenarios only.
//
#ifndef EventRegisterByGuidProviderName2
#define EventRegisterByGuidProviderName2(Guid) McGenEventRegister(&(Guid), McGenControlCallbackV2, &ProviderSym2_Context, &ProviderName2Handle)
#endif

//
// Unregister with ETW and close the provider.
// Invoke this macro during module shutdown (i.e. program exit, DLL process
// detach, or driver unload) to unregister the provider.
// Note that you MUST call EventUnregister before DLL or driver unload
// (not optional): failure to unregister a provider before DLL or driver unload
// will result in crashes.
//
#ifndef EventUnregisterProviderName2
#define EventUnregisterProviderName2() McGenEventUnregister(&ProviderName2Handle)
#endif

//
// Enablement check macro for EventSym1
//
#define EventEnabledEventSym1() MCGEN_EVENT_BIT_SET(ProviderName2EnableBits, 0)

//
// Event write macros for EventSym1
//
#define EventWriteEventSym1() \
        MCGEN_EVENT_ENABLED(EventSym1) \
        ? McTemplateU0(&ProviderSym2_Context, &EventSym1) : 0
#define EventWriteEventSym1_AssumeEnabled() \
        McTemplateU0(&ProviderSym2_Context, &EventSym1)

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Provider "ProviderName3" event count 1
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Provider GUID = d2eb3575-b9ae-4b4f-a0b7-61034a28c268
EXTERN_C __declspec(selectany) const GUID ProviderSym3 = {0xd2eb3575, 0xb9ae, 0x4b4f, {0xa0, 0xb7, 0x61, 0x03, 0x4a, 0x28, 0xc2, 0x68}};

#ifndef ProviderSym3_Traits
#define ProviderSym3_Traits NULL
#endif // ProviderSym3_Traits

//
// Channel
//
#define ProviderSym3_CHANNEL_Channel1 0x21

//
// Opcodes
//
#define OpcodeSym1 0xb
#define OpcodeSym2 0x16

//
// Tasks
//
#define TaskSym1 0x65
EXTERN_C __declspec(selectany) const GUID TaskName1Id = {0xd0883fa6, 0xf3fd, 0x43c3, {0xa0, 0xe4, 0x1f, 0xce, 0xcc, 0x87, 0xaf, 0x8b}};
#define TaskSym2 0x66
#define TaskSym3 0x67

//
// Keyword
//
#define ProviderSym3_KEYWORD_KeywordName1 0x100000000000
#define ProviderSym3_KEYWORD_KeywordName2 0x200000000000
#define ProviderSym3_KEYWORD_KeywordName3 0x400000000000

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EventSym1 = {0x1, 0x0, 0x21, 0x0, 0x0, 0x0, 0x8000000000000000};
#define EventSym1_value 0x1

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Event Enablement Bits
//
EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG ProviderName3EnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG ProviderName3Keywords[1] = {0x8000000000000000};
EXTERN_C __declspec(selectany) const unsigned char ProviderName3Levels[1] = {0};

//
// Provider context
//
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT ProviderSym3_Context = {0, (ULONG_PTR)ProviderSym3_Traits, 0, 0, 0, 0, 0, 0, 1, ProviderName3EnableBits, ProviderName3Keywords, ProviderName3Levels};

//
// Provider REGHANDLE
//
#define ProviderName3Handle (ProviderSym3_Context.RegistrationHandle)

//
// This macro is set to 0, indicating that the EventWrite[Name] macros do not
// have an Activity parameter. This is controlled by the -km and -um options.
//
#define ProviderSym3_EventWriteActivity 0

//
// Register with ETW using the control GUID specified in the manifest.
// Invoke this macro during module initialization (i.e. program startup,
// DLL process attach, or driver load) to initialize the provider.
// Note that if this function returns an error, the error means that
// will not work, but no action needs to be taken -- even if EventRegister
// returns an error, it is generally safe to use EventWrite and
// EventUnregister macros (they will be no-ops if EventRegister failed).
//
#ifndef EventRegisterProviderName3
#define EventRegisterProviderName3() McGenEventRegister(&ProviderSym3, McGenControlCallbackV2, &ProviderSym3_Context, &ProviderName3Handle)
#endif

//
// Register with ETW using a specific control GUID (i.e. a GUID other than what
// is specified in the manifest). Advanced scenarios only.
//
#ifndef EventRegisterByGuidProviderName3
#define EventRegisterByGuidProviderName3(Guid) McGenEventRegister(&(Guid), McGenControlCallbackV2, &ProviderSym3_Context, &ProviderName3Handle)
#endif

//
// Unregister with ETW and close the provider.
// Invoke this macro during module shutdown (i.e. program exit, DLL process
// detach, or driver unload) to unregister the provider.
// Note that you MUST call EventUnregister before DLL or driver unload
// (not optional): failure to unregister a provider before DLL or driver unload
// will result in crashes.
//
#ifndef EventUnregisterProviderName3
#define EventUnregisterProviderName3() McGenEventUnregister(&ProviderName3Handle)
#endif

//
// Enablement check macro for EventSym1
//
#define EventEnabledEventSym1() MCGEN_EVENT_BIT_SET(ProviderName3EnableBits, 0)

//
// Event write macros for EventSym1
//
#define EventWriteEventSym1(Field1) \
        MCGEN_EVENT_ENABLED(EventSym1) \
        ? McTemplateU0u(&ProviderSym3_Context, &EventSym1, Field1) : 0
#define EventWriteEventSym1_AssumeEnabled(Field1) \
        McTemplateU0u(&ProviderSym3_Context, &EventSym1, Field1)

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Provider "ProviderName4" event count 0
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Provider GUID = 13bcf70a-af93-4ad6-bb33-d9b383a110b8
EXTERN_C __declspec(selectany) const GUID ProviderSym4 = {0x13bcf70a, 0xaf93, 0x4ad6, {0xbb, 0x33, 0xd9, 0xb3, 0x83, 0xa1, 0x10, 0xb8}};

#ifndef ProviderSym4_Traits
#define ProviderSym4_Traits NULL
#endif // ProviderSym4_Traits

//
// Event Descriptors
//

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Provider context
//
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT ProviderSym4_Context = {0, (ULONG_PTR)ProviderSym4_Traits};

//
// Provider REGHANDLE
//
#define ProviderName4Handle (ProviderSym4_Context.RegistrationHandle)

//
// This macro is set to 0, indicating that the EventWrite[Name] macros do not
// have an Activity parameter. This is controlled by the -km and -um options.
//
#define ProviderSym4_EventWriteActivity 0

//
// Register with ETW using the control GUID specified in the manifest.
// Invoke this macro during module initialization (i.e. program startup,
// DLL process attach, or driver load) to initialize the provider.
// Note that if this function returns an error, the error means that
// will not work, but no action needs to be taken -- even if EventRegister
// returns an error, it is generally safe to use EventWrite and
// EventUnregister macros (they will be no-ops if EventRegister failed).
//
#ifndef EventRegisterProviderName4
#define EventRegisterProviderName4() McGenEventRegister(&ProviderSym4, McGenControlCallbackV2, &ProviderSym4_Context, &ProviderName4Handle)
#endif

//
// Register with ETW using a specific control GUID (i.e. a GUID other than what
// is specified in the manifest). Advanced scenarios only.
//
#ifndef EventRegisterByGuidProviderName4
#define EventRegisterByGuidProviderName4(Guid) McGenEventRegister(&(Guid), McGenControlCallbackV2, &ProviderSym4_Context, &ProviderName4Handle)
#endif

//
// Unregister with ETW and close the provider.
// Invoke this macro during module shutdown (i.e. program exit, DLL process
// detach, or driver unload) to unregister the provider.
// Note that you MUST call EventUnregister before DLL or driver unload
// (not optional): failure to unregister a provider before DLL or driver unload
// will result in crashes.
//
#ifndef EventUnregisterProviderName4
#define EventUnregisterProviderName4() McGenEventUnregister(&ProviderName4Handle)
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions
//
//
//Template from manifest : (null)
//
#ifndef McTemplateU0_def
#define McTemplateU0_def
ETW_INLINE
ULONG
McTemplateU0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor
    )
{
#define McTemplateU0_ARGCOUNT 0

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0_ARGCOUNT + 1];

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0_def

//
//Template from manifest : Template9
//
#ifndef McTemplateU0nunnN3uuNR5_def
#define McTemplateU0nunnN3uuNR5_def
ETW_INLINE
ULONG
McTemplateU0nunnN3uuNR5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ ULONG _Arg0_Len_,
    _In_ const void*  _Arg0,
    _In_ const unsigned char  _Arg1,
    _In_ ULONG _Arg2_Len_,
    _In_ const void*  _Arg2,
    _In_ ULONG _Arg3_Len_,
    _In_ const void*  _Arg3,
    _In_ ULONG _Arg4_Len_,
    _In_ const void*  _Arg4,
    _In_ const unsigned char  _Arg5,
    _In_ const unsigned char  _Arg6,
    _In_ ULONG _Arg7_Len_,
    _In_ const void*  _Arg7
    )
{
#define McTemplateU0nunnN3uuNR5_ARGCOUNT 8

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0nunnN3uuNR5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, _Arg0_Len_);

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[3],_Arg2, _Arg2_Len_);

    EventDataDescCreate(&EventData[4],_Arg3, _Arg3_Len_);

    EventDataDescCreate(&EventData[5],_Arg4, 3 * _Arg4_Len_);

    EventDataDescCreate(&EventData[6],&_Arg5, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[8],_Arg7, _Arg5 * _Arg7_Len_);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0nunnN3uuNR5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0nunnN3uuNR5_def

//
//Template from manifest : Template4
//
#ifndef McTemplateU0u_def
#define McTemplateU0u_def
ETW_INLINE
ULONG
McTemplateU0u(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0
    )
{
#define McTemplateU0u_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0u_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0u_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0u_def

//
//Template from manifest : Template4
//
#ifndef McTemplateU0ucZRSRC4U5L5H5D5Q5I5X5F5G5T5B15J5P5M5Y5K5D5I5_def
#define McTemplateU0ucZRSRC4U5L5H5D5Q5I5X5F5G5T5B15J5P5M5Y5K5D5I5_def
ETW_INLINE
ULONG
McTemplateU0ucZRSRC4U5L5H5D5Q5I5X5F5G5T5B15J5P5M5Y5K5D5I5(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0,
    _In_ const signed char  _Arg1,
    _In_ ULONG _Arg2_Len_,
    _In_reads_(_Arg2_Len_) PCWSTR  _Arg2,
    _In_ ULONG _Arg3_Len_,
    _In_reads_(_Arg3_Len_) PCSTR  _Arg3,
    _In_reads_(4) const signed char *_Arg4,
    _In_reads_(5) const unsigned char *_Arg5,
    _In_reads_(5) const signed short *_Arg6,
    _In_reads_(5) const unsigned short *_Arg7,
    _In_reads_(5) const signed int *_Arg8,
    _In_reads_(5) const unsigned int *_Arg9,
    _In_reads_(5) const signed __int64 *_Arg10,
    _In_reads_(5) const unsigned __int64 *_Arg11,
    _In_reads_(5) const float *_Arg12,
    _In_reads_(5) const double *_Arg13,
    _In_reads_(5) const signed int *_Arg14,
    _In_reads_(3*5) const unsigned char*  _Arg15,
    _In_reads_(5) const GUID*  _Arg16,
    _In_reads_(5) const void* *_Arg17,
    _In_reads_(5) const FILETIME*  _Arg18,
    _In_reads_(5) const SYSTEMTIME*  _Arg19,
    _In_ ULONG _Arg20_Len_,
    _In_reads_(_Arg20_Len_) const unsigned char*  _Arg20,
    _In_reads_(5) const signed int *_Arg21,
    _In_reads_(5) const signed __int64 *_Arg22
    )
{
#define McTemplateU0ucZRSRC4U5L5H5D5Q5I5X5F5G5T5B15J5P5M5Y5K5D5I5_ARGCOUNT 23

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0ucZRSRC4U5L5H5D5Q5I5X5F5G5T5B15J5P5M5Y5K5D5I5_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed char)  );

    EventDataDescCreate(&EventData[3],_Arg2, (ULONG)(sizeof(WCHAR)*_Arg2_Len_)); // Blob containing 2 concatenated nul-terminated strings

    EventDataDescCreate(&EventData[4],_Arg3, (ULONG)(sizeof(char)*_Arg3_Len_)); // Blob containing 3 concatenated nul-terminated strings

    EventDataDescCreate(&EventData[5], _Arg4, sizeof(const signed char)*4);

    EventDataDescCreate(&EventData[6], _Arg5, sizeof(const unsigned char)*5);

    EventDataDescCreate(&EventData[7], _Arg6, sizeof(const signed short)*5);

    EventDataDescCreate(&EventData[8], _Arg7, sizeof(const unsigned short)*5);

    EventDataDescCreate(&EventData[9], _Arg8, sizeof(const signed int)*5);

    EventDataDescCreate(&EventData[10], _Arg9, sizeof(const unsigned int)*5);

    EventDataDescCreate(&EventData[11], _Arg10, sizeof(const signed __int64)*5);

    EventDataDescCreate(&EventData[12], _Arg11, sizeof(const unsigned __int64)*5);

    EventDataDescCreate(&EventData[13], _Arg12, sizeof(const float)*5);

    EventDataDescCreate(&EventData[14], _Arg13, sizeof(const double)*5);

    EventDataDescCreate(&EventData[15], _Arg14, sizeof(const signed int)*5);

    EventDataDescCreate(&EventData[16],_Arg15, (ULONG)sizeof(char)*3*5);  // Blob containing 5 concatenated strings; each string has the same length (3)

    EventDataDescCreate(&EventData[17],_Arg16, sizeof(GUID)*5);

    EventDataDescCreate(&EventData[18], _Arg17, sizeof(const void*)*5);

    EventDataDescCreate(&EventData[19],_Arg18, sizeof(FILETIME)*5);

    EventDataDescCreate(&EventData[20],_Arg19, sizeof(SYSTEMTIME)*5);

    EventDataDescCreate(&EventData[21], _Arg20, _Arg20_Len_);

    EventDataDescCreate(&EventData[22], _Arg21, sizeof(const signed int)*5);

    EventDataDescCreate(&EventData[23], _Arg22, sizeof(const signed __int64)*5);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0ucZRSRC4U5L5H5D5Q5I5X5F5G5T5B15J5P5M5Y5K5D5I5_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0ucZRSRC4U5L5H5D5Q5I5X5F5G5T5B15J5P5M5Y5K5D5I5_def

//
//Template from manifest : Template3
//
#ifndef McTemplateU0uhqd_def
#define McTemplateU0uhqd_def
ETW_INLINE
ULONG
McTemplateU0uhqd(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0,
    _In_ const unsigned short  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const signed int  _Arg3
    )
{
#define McTemplateU0uhqd_ARGCOUNT 4

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0uhqd_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0uhqd_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0uhqd_def

//
//Template from manifest : Template5
//
#ifndef McTemplateU0uuuUR0CR1ZRSRCR0UR0LR0HR0DR0QR0IR0XR0FR0GR0TR0B3r0JR0PR0MR0YR0KR0DR0IR0_def
#define McTemplateU0uuuUR0CR1ZRSRCR0UR0LR0HR0DR0QR0IR0XR0FR0GR0TR0B3r0JR0PR0MR0YR0KR0DR0IR0_def
ETW_INLINE
ULONG
McTemplateU0uuuUR0CR1ZRSRCR0UR0LR0HR0DR0QR0IR0XR0FR0GR0TR0B3r0JR0PR0MR0YR0KR0DR0IR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0,
    _In_ const unsigned char  _Arg1,
    _In_ const unsigned char  _Arg2,
    _In_reads_(_Arg0) const unsigned char *_Arg3,
    _In_reads_(_Arg1) const signed char *_Arg4,
    _In_ ULONG _Arg5_Len_,
    _In_reads_(_Arg2) PCWSTR  _Arg5,
    _In_ ULONG _Arg6_Len_,
    _In_reads_(_Arg0) PCSTR  _Arg6,
    _In_reads_(_Arg0) const signed char *_Arg7,
    _In_reads_(_Arg0) const unsigned char *_Arg8,
    _In_reads_(_Arg0) const signed short *_Arg9,
    _In_reads_(_Arg0) const unsigned short *_Arg10,
    _In_reads_(_Arg0) const signed int *_Arg11,
    _In_reads_(_Arg0) const unsigned int *_Arg12,
    _In_reads_(_Arg0) const signed __int64 *_Arg13,
    _In_reads_(_Arg0) const unsigned __int64 *_Arg14,
    _In_reads_(_Arg0) const float *_Arg15,
    _In_reads_(_Arg0) const double *_Arg16,
    _In_reads_(_Arg0) const signed int *_Arg17,
    _In_reads_(3*_Arg0) const unsigned char*  _Arg18,
    _In_reads_(_Arg0) const GUID*  _Arg19,
    _In_reads_(_Arg0) const void* *_Arg20,
    _In_reads_(_Arg0) const FILETIME*  _Arg21,
    _In_reads_(_Arg0) const SYSTEMTIME*  _Arg22,
    _In_ ULONG _Arg23_Len_,
    _In_reads_(_Arg23_Len_) const unsigned char*  _Arg23,
    _In_reads_(_Arg0) const signed int *_Arg24,
    _In_reads_(_Arg0) const signed __int64 *_Arg25
    )
{
#define McTemplateU0uuuUR0CR1ZRSRCR0UR0LR0HR0DR0QR0IR0XR0FR0GR0TR0B3r0JR0PR0MR0YR0KR0DR0IR0_ARGCOUNT 26

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0uuuUR0CR1ZRSRCR0UR0LR0HR0DR0QR0IR0XR0FR0GR0TR0B3r0JR0PR0MR0YR0KR0DR0IR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[4], _Arg3, sizeof(const unsigned char)*_Arg0);

    EventDataDescCreate(&EventData[5], _Arg4, sizeof(const signed char)*_Arg1);

    EventDataDescCreate(&EventData[6],_Arg5, (ULONG)(sizeof(WCHAR)*_Arg5_Len_)); // Blob containing _Arg2 concatenated nul-terminated strings

    EventDataDescCreate(&EventData[7],_Arg6, (ULONG)(sizeof(char)*_Arg6_Len_)); // Blob containing _Arg0 concatenated nul-terminated strings

    EventDataDescCreate(&EventData[8], _Arg7, sizeof(const signed char)*_Arg0);

    EventDataDescCreate(&EventData[9], _Arg8, sizeof(const unsigned char)*_Arg0);

    EventDataDescCreate(&EventData[10], _Arg9, sizeof(const signed short)*_Arg0);

    EventDataDescCreate(&EventData[11], _Arg10, sizeof(const unsigned short)*_Arg0);

    EventDataDescCreate(&EventData[12], _Arg11, sizeof(const signed int)*_Arg0);

    EventDataDescCreate(&EventData[13], _Arg12, sizeof(const unsigned int)*_Arg0);

    EventDataDescCreate(&EventData[14], _Arg13, sizeof(const signed __int64)*_Arg0);

    EventDataDescCreate(&EventData[15], _Arg14, sizeof(const unsigned __int64)*_Arg0);

    EventDataDescCreate(&EventData[16], _Arg15, sizeof(const float)*_Arg0);

    EventDataDescCreate(&EventData[17], _Arg16, sizeof(const double)*_Arg0);

    EventDataDescCreate(&EventData[18], _Arg17, sizeof(const signed int)*_Arg0);

    EventDataDescCreate(&EventData[19],_Arg18, (ULONG)sizeof(char)*3*_Arg0);  // Blob containing _Arg0 concatenated strings; each string has the same length (3)

    EventDataDescCreate(&EventData[20],_Arg19, sizeof(GUID)*_Arg0);

    EventDataDescCreate(&EventData[21], _Arg20, sizeof(const void*)*_Arg0);

    EventDataDescCreate(&EventData[22],_Arg21, sizeof(FILETIME)*_Arg0);

    EventDataDescCreate(&EventData[23],_Arg22, sizeof(SYSTEMTIME)*_Arg0);

    EventDataDescCreate(&EventData[24], _Arg23, _Arg23_Len_);

    EventDataDescCreate(&EventData[25], _Arg24, sizeof(const signed int)*_Arg0);

    EventDataDescCreate(&EventData[26], _Arg25, sizeof(const signed __int64)*_Arg0);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0uuuUR0CR1ZRSRCR0UR0LR0HR0DR0QR0IR0XR0FR0GR0TR0B3r0JR0PR0MR0YR0KR0DR0IR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0uuuUR0CR1ZRSRCR0UR0LR0HR0DR0QR0IR0XR0FR0GR0TR0B3r0JR0PR0MR0YR0KR0DR0IR0_def

//
//Template from manifest : Template8
//
#ifndef McTemplateU0uuuuuuzzZRz1z1Z2z2z2Z4zr5zr4Z2r3ZRZ1r1Z2r0Zr3R2Zr4R1Zr5R0ssSRs1s1S2s2s2S4sr5sr4S2r3SRS1r1S2r0Sr3R2Sr4R1Sr5R0b1b1B2b2b2B4br5br4B2r3B1r1B2r0Br3R2Br4R1Br5R0kkK2kkK2kkK2kkK2KR2KR1KR0KR2KR1KR0_def
#define McTemplateU0uuuuuuzzZRz1z1Z2z2z2Z4zr5zr4Z2r3ZRZ1r1Z2r0Zr3R2Zr4R1Zr5R0ssSRs1s1S2s2s2S4sr5sr4S2r3SRS1r1S2r0Sr3R2Sr4R1Sr5R0b1b1B2b2b2B4br5br4B2r3B1r1B2r0Br3R2Br4R1Br5R0kkK2kkK2kkK2kkK2KR2KR1KR0KR2KR1KR0_def
ETW_INLINE
ULONG
McTemplateU0uuuuuuzzZRz1z1Z2z2z2Z4zr5zr4Z2r3ZRZ1r1Z2r0Zr3R2Zr4R1Zr5R0ssSRs1s1S2s2s2S4sr5sr4S2r3SRS1r1S2r0Sr3R2Sr4R1Sr5R0b1b1B2b2b2B4br5br4B2r3B1r1B2r0Br3R2Br4R1Br5R0kkK2kkK2kkK2kkK2KR2KR1KR0KR2KR1KR0(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0,
    _In_ const unsigned char  _Arg1,
    _In_ const unsigned char  _Arg2,
    _In_ const unsigned char  _Arg3,
    _In_ const unsigned char  _Arg4,
    _In_ const unsigned char  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_ ULONG _Arg8_Len_,
    _In_reads_(_Arg8_Len_) PCWSTR  _Arg8,
    _In_reads_(1) const WCHAR*  _Arg9,
    _In_reads_(1) const WCHAR*  _Arg10,
    _In_reads_(1*2) const WCHAR*  _Arg11,
    _In_reads_(2) const WCHAR*  _Arg12,
    _In_reads_(2) const WCHAR*  _Arg13,
    _In_reads_(2*2) const WCHAR*  _Arg14,
    _In_reads_(_Arg5) const WCHAR*  _Arg15,
    _In_reads_(_Arg4) const WCHAR*  _Arg16,
    _In_reads_(_Arg3*2) const WCHAR*  _Arg17,
    _In_ ULONG _Arg18_Len_,
    _In_reads_(_Arg2) PCWSTR  _Arg18,
    _In_reads_(1*_Arg1) const WCHAR*  _Arg19,
    _In_reads_(2*_Arg0) const WCHAR*  _Arg20,
    _In_reads_(_Arg3*_Arg2) const WCHAR*  _Arg21,
    _In_reads_(_Arg4*_Arg1) const WCHAR*  _Arg22,
    _In_reads_(_Arg5*_Arg0) const WCHAR*  _Arg23,
    _In_opt_ PCSTR  _Arg24,
    _In_opt_ PCSTR  _Arg25,
    _In_ ULONG _Arg26_Len_,
    _In_reads_(_Arg26_Len_) PCSTR  _Arg26,
    _In_reads_(1) const char*  _Arg27,
    _In_reads_(1) const char*  _Arg28,
    _In_reads_(1*2) const char*  _Arg29,
    _In_reads_(2) const char*  _Arg30,
    _In_reads_(2) const char*  _Arg31,
    _In_reads_(2*2) const char*  _Arg32,
    _In_reads_(_Arg5) const char*  _Arg33,
    _In_reads_(_Arg4) const char*  _Arg34,
    _In_reads_(_Arg3*2) const char*  _Arg35,
    _In_ ULONG _Arg36_Len_,
    _In_reads_(_Arg2) PCSTR  _Arg36,
    _In_reads_(1*_Arg1) const char*  _Arg37,
    _In_reads_(2*_Arg0) const char*  _Arg38,
    _In_reads_(_Arg3*_Arg2) const char*  _Arg39,
    _In_reads_(_Arg4*_Arg1) const char*  _Arg40,
    _In_reads_(_Arg5*_Arg0) const char*  _Arg41,
    _In_reads_(1) const unsigned char*  _Arg42,
    _In_reads_(1) const unsigned char*  _Arg43,
    _In_reads_(1*2) const unsigned char*  _Arg44,
    _In_reads_(2) const unsigned char*  _Arg45,
    _In_reads_(2) const unsigned char*  _Arg46,
    _In_reads_(2*2) const unsigned char*  _Arg47,
    _In_reads_(_Arg5) const unsigned char*  _Arg48,
    _In_reads_(_Arg4) const unsigned char*  _Arg49,
    _In_reads_(_Arg3*2) const unsigned char*  _Arg50,
    _In_reads_(1*_Arg1) const unsigned char*  _Arg51,
    _In_reads_(2*_Arg0) const unsigned char*  _Arg52,
    _In_reads_(_Arg3*_Arg2) const unsigned char*  _Arg53,
    _In_reads_(_Arg4*_Arg1) const unsigned char*  _Arg54,
    _In_reads_(_Arg5*_Arg0) const unsigned char*  _Arg55,
    _In_ const SID*  _Arg56,
    _In_ const SID*  _Arg57,
    _In_ ULONG _Arg58_Len_,
    _In_reads_(_Arg58_Len_) const unsigned char*  _Arg58,
    _In_ const SID*  _Arg59,
    _In_ const SID*  _Arg60,
    _In_ ULONG _Arg61_Len_,
    _In_reads_(_Arg61_Len_) const unsigned char*  _Arg61,
    _In_ const SID*  _Arg62,
    _In_ const SID*  _Arg63,
    _In_ ULONG _Arg64_Len_,
    _In_reads_(_Arg64_Len_) const unsigned char*  _Arg64,
    _In_ const SID*  _Arg65,
    _In_ const SID*  _Arg66,
    _In_ ULONG _Arg67_Len_,
    _In_reads_(_Arg67_Len_) const unsigned char*  _Arg67,
    _In_ ULONG _Arg68_Len_,
    _In_reads_(_Arg68_Len_) const unsigned char*  _Arg68,
    _In_ ULONG _Arg69_Len_,
    _In_reads_(_Arg69_Len_) const unsigned char*  _Arg69,
    _In_ ULONG _Arg70_Len_,
    _In_reads_(_Arg70_Len_) const unsigned char*  _Arg70,
    _In_ ULONG _Arg71_Len_,
    _In_reads_(_Arg71_Len_) const unsigned char*  _Arg71,
    _In_ ULONG _Arg72_Len_,
    _In_reads_(_Arg72_Len_) const unsigned char*  _Arg72,
    _In_ ULONG _Arg73_Len_,
    _In_reads_(_Arg73_Len_) const unsigned char*  _Arg73
    )
{
#define McTemplateU0uuuuuuzzZRz1z1Z2z2z2Z4zr5zr4Z2r3ZRZ1r1Z2r0Zr3R2Zr4R1Zr5R0ssSRs1s1S2s2s2S4sr5sr4S2r3SRS1r1S2r0Sr3R2Sr4R1Sr5R0b1b1B2b2b2B4br5br4B2r3B1r1B2r0Br3R2Br4R1Br5R0kkK2kkK2kkK2kkK2KR2KR1KR0KR2KR1KR0_ARGCOUNT 74

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0uuuuuuzzZRz1z1Z2z2z2Z4zr5zr4Z2r3ZRZ1r1Z2r0Zr3R2Zr4R1Zr5R0ssSRs1s1S2s2s2S4sr5sr4S2r3SRS1r1S2r0Sr3R2Sr4R1Sr5R0b1b1B2b2b2B4br5br4B2r3B1r1B2r0Br3R2Br4R1Br5R0kkK2kkK2kkK2kkK2KR2KR1KR0KR2KR1KR0_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[6],&_Arg5, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[7],
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],_Arg8, (ULONG)(sizeof(WCHAR)*_Arg8_Len_)); // Blob containing 2 concatenated nul-terminated strings

    EventDataDescCreate(&EventData[10],_Arg9, (ULONG)(sizeof(WCHAR)*1));

    EventDataDescCreate(&EventData[11],_Arg10, (ULONG)(sizeof(WCHAR)*1));

    EventDataDescCreate(&EventData[12],_Arg11, (ULONG)(sizeof(WCHAR)*2*1)); // Blob containing 2 concatenated strings; each string has the same length (1)

    EventDataDescCreate(&EventData[13],_Arg12, (ULONG)(sizeof(WCHAR)*2));

    EventDataDescCreate(&EventData[14],_Arg13, (ULONG)(sizeof(WCHAR)*2));

    EventDataDescCreate(&EventData[15],_Arg14, (ULONG)(sizeof(WCHAR)*2*2)); // Blob containing 2 concatenated strings; each string has the same length (2)

    EventDataDescCreate(&EventData[16],_Arg15, (ULONG)(sizeof(WCHAR)*_Arg5));

    EventDataDescCreate(&EventData[17],_Arg16, (ULONG)(sizeof(WCHAR)*_Arg4));

    EventDataDescCreate(&EventData[18],_Arg17, (ULONG)(sizeof(WCHAR)*2*_Arg3)); // Blob containing 2 concatenated strings; each string has the same length (_Arg3)

    EventDataDescCreate(&EventData[19],_Arg18, (ULONG)(sizeof(WCHAR)*_Arg18_Len_)); // Blob containing _Arg2 concatenated nul-terminated strings

    EventDataDescCreate(&EventData[20],_Arg19, (ULONG)(sizeof(WCHAR)*_Arg1*1)); // Blob containing _Arg1 concatenated strings; each string has the same length (1)

    EventDataDescCreate(&EventData[21],_Arg20, (ULONG)(sizeof(WCHAR)*_Arg0*2)); // Blob containing _Arg0 concatenated strings; each string has the same length (2)

    EventDataDescCreate(&EventData[22],_Arg21, (ULONG)(sizeof(WCHAR)*_Arg2*_Arg3)); // Blob containing _Arg2 concatenated strings; each string has the same length (_Arg3)

    EventDataDescCreate(&EventData[23],_Arg22, (ULONG)(sizeof(WCHAR)*_Arg1*_Arg4)); // Blob containing _Arg1 concatenated strings; each string has the same length (_Arg4)

    EventDataDescCreate(&EventData[24],_Arg23, (ULONG)(sizeof(WCHAR)*_Arg0*_Arg5)); // Blob containing _Arg0 concatenated strings; each string has the same length (_Arg5)

    EventDataDescCreate(&EventData[25],
                        (_Arg24 != NULL) ? _Arg24 : "NULL",
                        (_Arg24 != NULL) ? (ULONG)((strlen(_Arg24) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[26],
                        (_Arg25 != NULL) ? _Arg25 : "NULL",
                        (_Arg25 != NULL) ? (ULONG)((strlen(_Arg25) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[27],_Arg26, (ULONG)(sizeof(char)*_Arg26_Len_)); // Blob containing 2 concatenated nul-terminated strings

    EventDataDescCreate(&EventData[28],_Arg27, (ULONG)(sizeof(char)*1));

    EventDataDescCreate(&EventData[29],_Arg28, (ULONG)(sizeof(char)*1));

    EventDataDescCreate(&EventData[30],_Arg29, (ULONG)(sizeof(char)*2*1)); // Blob containing 2 concatenated strings; each string has the same length (1)

    EventDataDescCreate(&EventData[31],_Arg30, (ULONG)(sizeof(char)*2));

    EventDataDescCreate(&EventData[32],_Arg31, (ULONG)(sizeof(char)*2));

    EventDataDescCreate(&EventData[33],_Arg32, (ULONG)(sizeof(char)*2*2)); // Blob containing 2 concatenated strings; each string has the same length (2)

    EventDataDescCreate(&EventData[34],_Arg33, (ULONG)(sizeof(char)*_Arg5));

    EventDataDescCreate(&EventData[35],_Arg34, (ULONG)(sizeof(char)*_Arg4));

    EventDataDescCreate(&EventData[36],_Arg35, (ULONG)(sizeof(char)*2*_Arg3)); // Blob containing 2 concatenated strings; each string has the same length (_Arg3)

    EventDataDescCreate(&EventData[37],_Arg36, (ULONG)(sizeof(char)*_Arg36_Len_)); // Blob containing _Arg2 concatenated nul-terminated strings

    EventDataDescCreate(&EventData[38],_Arg37, (ULONG)(sizeof(char)*_Arg1*1)); // Blob containing _Arg1 concatenated strings; each string has the same length (1)

    EventDataDescCreate(&EventData[39],_Arg38, (ULONG)(sizeof(char)*_Arg0*2)); // Blob containing _Arg0 concatenated strings; each string has the same length (2)

    EventDataDescCreate(&EventData[40],_Arg39, (ULONG)(sizeof(char)*_Arg2*_Arg3)); // Blob containing _Arg2 concatenated strings; each string has the same length (_Arg3)

    EventDataDescCreate(&EventData[41],_Arg40, (ULONG)(sizeof(char)*_Arg1*_Arg4)); // Blob containing _Arg1 concatenated strings; each string has the same length (_Arg4)

    EventDataDescCreate(&EventData[42],_Arg41, (ULONG)(sizeof(char)*_Arg0*_Arg5)); // Blob containing _Arg0 concatenated strings; each string has the same length (_Arg5)

    EventDataDescCreate(&EventData[43],_Arg42, (ULONG)sizeof(char)*1);

    EventDataDescCreate(&EventData[44],_Arg43, (ULONG)sizeof(char)*1);

    EventDataDescCreate(&EventData[45],_Arg44, (ULONG)sizeof(char)*1*2);  // Blob containing 2 concatenated strings; each string has the same length (1)

    EventDataDescCreate(&EventData[46],_Arg45, (ULONG)sizeof(char)*2);

    EventDataDescCreate(&EventData[47],_Arg46, (ULONG)sizeof(char)*2);

    EventDataDescCreate(&EventData[48],_Arg47, (ULONG)sizeof(char)*2*2);  // Blob containing 2 concatenated strings; each string has the same length (2)

    EventDataDescCreate(&EventData[49],_Arg48, (ULONG)sizeof(char)*_Arg5);

    EventDataDescCreate(&EventData[50],_Arg49, (ULONG)sizeof(char)*_Arg4);

    EventDataDescCreate(&EventData[51],_Arg50, (ULONG)sizeof(char)*_Arg3*2);  // Blob containing 2 concatenated strings; each string has the same length (_Arg3)

    EventDataDescCreate(&EventData[52],_Arg51, (ULONG)sizeof(char)*1*_Arg1);  // Blob containing _Arg1 concatenated strings; each string has the same length (1)

    EventDataDescCreate(&EventData[53],_Arg52, (ULONG)sizeof(char)*2*_Arg0);  // Blob containing _Arg0 concatenated strings; each string has the same length (2)

    EventDataDescCreate(&EventData[54],_Arg53, (ULONG)sizeof(char)*_Arg3*_Arg2);  // Blob containing _Arg2 concatenated strings; each string has the same length (_Arg3)

    EventDataDescCreate(&EventData[55],_Arg54, (ULONG)sizeof(char)*_Arg4*_Arg1);  // Blob containing _Arg1 concatenated strings; each string has the same length (_Arg4)

    EventDataDescCreate(&EventData[56],_Arg55, (ULONG)sizeof(char)*_Arg5*_Arg0);  // Blob containing _Arg0 concatenated strings; each string has the same length (_Arg5)

    EventDataDescCreate(&EventData[57],(_Arg56 != NULL) ? _Arg56 : (const void*)"\0\0\0\0\0\0\0", (_Arg56 != NULL) ? MCGEN_GETLENGTHSID(_Arg56) : 8);

    EventDataDescCreate(&EventData[58],(_Arg57 != NULL) ? _Arg57 : (const void*)"\0\0\0\0\0\0\0", (_Arg57 != NULL) ? MCGEN_GETLENGTHSID(_Arg57) : 8);

    EventDataDescCreate(&EventData[59], _Arg58, _Arg58_Len_);

    EventDataDescCreate(&EventData[60],(_Arg59 != NULL) ? _Arg59 : (const void*)"\0\0\0\0\0\0\0", (_Arg59 != NULL) ? MCGEN_GETLENGTHSID(_Arg59) : 8);

    EventDataDescCreate(&EventData[61],(_Arg60 != NULL) ? _Arg60 : (const void*)"\0\0\0\0\0\0\0", (_Arg60 != NULL) ? MCGEN_GETLENGTHSID(_Arg60) : 8);

    EventDataDescCreate(&EventData[62], _Arg61, _Arg61_Len_);

    EventDataDescCreate(&EventData[63],(_Arg62 != NULL) ? _Arg62 : (const void*)"\0\0\0\0\0\0\0", (_Arg62 != NULL) ? MCGEN_GETLENGTHSID(_Arg62) : 8);

    EventDataDescCreate(&EventData[64],(_Arg63 != NULL) ? _Arg63 : (const void*)"\0\0\0\0\0\0\0", (_Arg63 != NULL) ? MCGEN_GETLENGTHSID(_Arg63) : 8);

    EventDataDescCreate(&EventData[65], _Arg64, _Arg64_Len_);

    EventDataDescCreate(&EventData[66],(_Arg65 != NULL) ? _Arg65 : (const void*)"\0\0\0\0\0\0\0", (_Arg65 != NULL) ? MCGEN_GETLENGTHSID(_Arg65) : 8);

    EventDataDescCreate(&EventData[67],(_Arg66 != NULL) ? _Arg66 : (const void*)"\0\0\0\0\0\0\0", (_Arg66 != NULL) ? MCGEN_GETLENGTHSID(_Arg66) : 8);

    EventDataDescCreate(&EventData[68], _Arg67, _Arg67_Len_);

    EventDataDescCreate(&EventData[69], _Arg68, _Arg68_Len_);

    EventDataDescCreate(&EventData[70], _Arg69, _Arg69_Len_);

    EventDataDescCreate(&EventData[71], _Arg70, _Arg70_Len_);

    EventDataDescCreate(&EventData[72], _Arg71, _Arg71_Len_);

    EventDataDescCreate(&EventData[73], _Arg72, _Arg72_Len_);

    EventDataDescCreate(&EventData[74], _Arg73, _Arg73_Len_);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0uuuuuuzzZRz1z1Z2z2z2Z4zr5zr4Z2r3ZRZ1r1Z2r0Zr3R2Zr4R1Zr5R0ssSRs1s1S2s2s2S4sr5sr4S2r3SRS1r1S2r0Sr3R2Sr4R1Sr5R0b1b1B2b2b2B4br5br4B2r3B1r1B2r0Br3R2Br4R1Br5R0kkK2kkK2kkK2kkK2KR2KR1KR0KR2KR1KR0_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0uuuuuuzzZRz1z1Z2z2z2Z4zr5zr4Z2r3ZRZ1r1Z2r0Zr3R2Zr4R1Zr5R0ssSRs1s1S2s2s2S4sr5sr4S2r3SRS1r1S2r0Sr3R2Sr4R1Sr5R0b1b1B2b2b2B4br5br4B2r3B1r1B2r0Br3R2Br4R1Br5R0kkK2kkK2kkK2kkK2KR2KR1KR0KR2KR1KR0_def

//
//Template from manifest : Template7
//
#ifndef McTemplateU0uuuzr0sr1br2KR2_def
#define McTemplateU0uuuzr0sr1br2KR2_def
ETW_INLINE
ULONG
McTemplateU0uuuzr0sr1br2KR2(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned char  _Arg0,
    _In_ const unsigned char  _Arg1,
    _In_ const unsigned char  _Arg2,
    _In_reads_(_Arg0) const WCHAR*  _Arg3,
    _In_reads_(_Arg1) const char*  _Arg4,
    _In_reads_(_Arg2) const unsigned char*  _Arg5,
    _In_ ULONG _Arg6_Len_,
    _In_reads_(_Arg6_Len_) const unsigned char*  _Arg6
    )
{
#define McTemplateU0uuuzr0sr1br2KR2_ARGCOUNT 7

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0uuuzr0sr1br2KR2_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[4],_Arg3, (ULONG)(sizeof(WCHAR)*_Arg0));

    EventDataDescCreate(&EventData[5],_Arg4, (ULONG)(sizeof(char)*_Arg1));

    EventDataDescCreate(&EventData[6],_Arg5, (ULONG)sizeof(char)*_Arg2);

    EventDataDescCreate(&EventData[7], _Arg6, _Arg6_Len_);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0uuuzr0sr1br2KR2_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0uuuzr0sr1br2KR2_def

//
//Template from manifest : Template1
//
#ifndef McTemplateU0zsculhdqixfgtb3jpmykdiwae_def
#define McTemplateU0zsculhdqixfgtb3jpmykdiwae_def
ETW_INLINE
ULONG
McTemplateU0zsculhdqixfgtb3jpmykdiwae(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCSTR  _Arg1,
    _In_ const signed char  _Arg2,
    _In_ const unsigned char  _Arg3,
    _In_ const signed short  _Arg4,
    _In_ const unsigned short  _Arg5,
    _In_ const signed int  _Arg6,
    _In_ const unsigned int  _Arg7,
    _In_ const signed __int64  _Arg8,
    _In_ const unsigned __int64  _Arg9,
    _In_ const float  _Arg10,
    _In_ const double  _Arg11,
    _In_ const signed int  _Arg12,
    _In_reads_(3) const unsigned char*  _Arg13,
    _In_ const GUID*  _Arg14,
    _In_opt_ const void*  _Arg15,
    _In_ const FILETIME*  _Arg16,
    _In_ const SYSTEMTIME*  _Arg17,
    _In_ const SID*  _Arg18,
    _In_ const signed int  _Arg19,
    _In_ const signed __int64  _Arg20,
    _In_ ULONG _Arg21_Len_,
    _In_reads_(_Arg21_Len_) const WCHAR*  _Arg21,
    _In_ ULONG _Arg22_Len_,
    _In_reads_(_Arg22_Len_) const char*  _Arg22,
    _In_ ULONG _Arg23_Len_,
    _In_reads_(_Arg23_Len_) const unsigned char*  _Arg23
    )
{
#define McTemplateU0zsculhdqixfgtb3jpmykdiwae_ARGCOUNT 27

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0zsculhdqixfgtb3jpmykdiwae_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed char)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const signed short)  );

    EventDataDescCreate(&EventData[6],&_Arg5, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const float)  );

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const double)  );

    EventDataDescCreate(&EventData[13],&_Arg12, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[14],_Arg13, (ULONG)sizeof(char)*3);

    EventDataDescCreate(&EventData[15],_Arg14, sizeof(GUID)  );

    EventDataDescCreate(&EventData[16],&_Arg15, sizeof(const void*)  );

    EventDataDescCreate(&EventData[17],_Arg16, sizeof(FILETIME)  );

    EventDataDescCreate(&EventData[18],_Arg17, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[19],(_Arg18 != NULL) ? _Arg18 : (const void*)"\0\0\0\0\0\0\0", (_Arg18 != NULL) ? MCGEN_GETLENGTHSID(_Arg18) : 8);

    EventDataDescCreate(&EventData[20],&_Arg19, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[21],&_Arg20, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[22],&EventData[23].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[23], _Arg21, (USHORT)(sizeof(WCHAR)*_Arg21_Len_));

    EventDataDescCreate(&EventData[24],&EventData[25].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[25], _Arg22, (USHORT)(sizeof(char)*_Arg22_Len_));

    EventDataDescCreate(&EventData[26],&EventData[27].Size, sizeof(USHORT));

    EventDataDescCreate(&EventData[27], _Arg23, (USHORT)(sizeof(char)*_Arg23_Len_));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0zsculhdqixfgtb3jpmykdiwae_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0zsculhdqixfgtb3jpmykdiwae_def

//
//Template from manifest : Template6
//
#ifndef McTemplateU0zz1z2ss1s2b1b2kkk_def
#define McTemplateU0zz1z2ss1s2b1b2kkk_def
ETW_INLINE
ULONG
McTemplateU0zz1z2ss1s2b1b2kkk(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_reads_(1) const WCHAR*  _Arg1,
    _In_reads_(2) const WCHAR*  _Arg2,
    _In_opt_ PCSTR  _Arg3,
    _In_reads_(1) const char*  _Arg4,
    _In_reads_(2) const char*  _Arg5,
    _In_reads_(1) const unsigned char*  _Arg6,
    _In_reads_(2) const unsigned char*  _Arg7,
    _In_ const SID*  _Arg8,
    _In_ const SID*  _Arg9,
    _In_ const SID*  _Arg10
    )
{
#define McTemplateU0zz1z2ss1s2b1b2kkk_ARGCOUNT 11

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0zz1z2ss1s2b1b2kkk_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2],_Arg1, (ULONG)(sizeof(WCHAR)*1));

    EventDataDescCreate(&EventData[3],_Arg2, (ULONG)(sizeof(WCHAR)*2));

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : "NULL",
                        (_Arg3 != NULL) ? (ULONG)((strlen(_Arg3) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[5],_Arg4, (ULONG)(sizeof(char)*1));

    EventDataDescCreate(&EventData[6],_Arg5, (ULONG)(sizeof(char)*2));

    EventDataDescCreate(&EventData[7],_Arg6, (ULONG)sizeof(char)*1);

    EventDataDescCreate(&EventData[8],_Arg7, (ULONG)sizeof(char)*2);

    EventDataDescCreate(&EventData[9],(_Arg8 != NULL) ? _Arg8 : (const void*)"\0\0\0\0\0\0\0", (_Arg8 != NULL) ? MCGEN_GETLENGTHSID(_Arg8) : 8);

    EventDataDescCreate(&EventData[10],(_Arg9 != NULL) ? _Arg9 : (const void*)"\0\0\0\0\0\0\0", (_Arg9 != NULL) ? MCGEN_GETLENGTHSID(_Arg9) : 8);

    EventDataDescCreate(&EventData[11],(_Arg10 != NULL) ? _Arg10 : (const void*)"\0\0\0\0\0\0\0", (_Arg10 != NULL) ? MCGEN_GETLENGTHSID(_Arg10) : 8);

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0zz1z2ss1s2b1b2kkk_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0zz1z2ss1s2b1b2kkk_def

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

#define MSG_keyword_1_0000000000000001       0x10000001L
#define MSG_keyword_1_0000000000000002       0x10000002L
#define MSG_keyword_1_0000000000000004       0x10000003L
#define MSG_keyword_1_0000000000000008       0x10000004L
#define MSG_keyword_1_0000000000000010       0x10000005L
#define MSG_keyword_1_0000000000000020       0x10000006L
#define MSG_keyword_1_0000000000000040       0x10000007L
#define MSG_keyword_1_0000000000000080       0x10000008L
#define MSG_keyword_1_0000000000000100       0x10000009L
#define MSG_keyword_1_0000000000000200       0x1000000AL
#define MSG_keyword_1_0000000000000400       0x1000000BL
#define MSG_keyword_1_0000000000000800       0x1000000CL
#define MSG_keyword_1_0000000000001000       0x1000000DL
#define MSG_keyword_1_0000000000002000       0x1000000EL
#define MSG_keyword_1_0000000000004000       0x1000000FL
#define MSG_keyword_1_0000000000008000       0x10000010L
#define MSG_keyword_1_0000000000010000       0x10000011L
#define MSG_keyword_1_0000000000020000       0x10000012L
#define MSG_keyword_1_0000000000040000       0x10000013L
#define MSG_keyword_1_0000000000080000       0x10000014L
#define MSG_keyword_1_0000000000100000       0x10000015L
#define MSG_keyword_1_0000000000200000       0x10000016L
#define MSG_keyword_1_0000000000400000       0x10000017L
#define MSG_keyword_1_0000000000800000       0x10000018L
#define MSG_keyword_1_0000000001000000       0x10000019L
#define MSG_keyword_1_0000000002000000       0x1000001AL
#define MSG_keyword_1_0000000004000000       0x1000001BL
#define MSG_keyword_1_0000000008000000       0x1000001CL
#define MSG_keyword_1_0000000010000000       0x1000001DL
#define MSG_keyword_1_0000000020000000       0x1000001EL
#define MSG_keyword_1_0000000040000000       0x1000001FL
#define MSG_keyword_1_0000000080000000       0x10000020L
#define MSG_keyword_1_0000000100000000       0x10000021L
#define MSG_keyword_1_0000000200000000       0x10000022L
#define MSG_keyword_1_0000000400000000       0x10000023L
#define MSG_keyword_1_0000000800000000       0x10000024L
#define MSG_keyword_1_1                      0x1000002FL
#define MSG_keyword_2_1                      0x1100002DL
#define MSG_keyword_2_2                      0x1100002EL
#define MSG_keyword_2_3                      0x1100002FL
#define MSG_keyword_3_1                      0x1200002DL
#define MSG_keyword_3_2                      0x1200002EL
#define MSG_keyword_3_3                      0x1200002FL
#define MSG_opcode_1_3                       0x30000067L
#define MSG_opcode_1_1                       0x300000EFL
#define MSG_opcode_2_1                       0x3100000BL
#define MSG_opcode_2_2                       0x31000016L
#define MSG_opcode_3_1                       0x3200000BL
#define MSG_opcode_3_2                       0x32000016L
#define MSG_level_1_5                        0x50000065L
#define MSG_level_1_4                        0x50000066L
#define MSG_level_1_3                        0x50000067L
#define MSG_level_1_1                        0x50000069L
#define MSG_level_1_6                        0x5000006AL
#define MSG_level_1_7                        0x5000006BL
#define MSG_level_1_8                        0x5000006CL
#define MSG_level_1_9                        0x500000FFL
#define MSG_filter_1_4                       0x508002FEL
#define MSG_filter_1_3                       0x5080110BL
#define MSG_filter_1_1                       0x50802221L
#define MSG_filter_1_5                       0x5080FFFFL
#define MSG_level_2_1                        0x51000065L
#define MSG_level_2_2                        0x51000066L
#define MSG_level_2_3                        0x51000067L
#define MSG_level_2_4                        0x51000068L
#define MSG_level_2_5                        0x51000069L
#define MSG_level_2_6                        0x5100006AL
#define MSG_level_2_7                        0x5100006BL
#define MSG_level_2_8                        0x5100006CL
#define MSG_level_2_9                        0x5100006DL
#define MSG_filter_2_2                       0x51800002L
#define MSG_filter_2_1                       0x51800003L
#define MSG_filter_3_2                       0x52800002L
#define MSG_filter_3_1                       0x52800003L
#define MSG_task_1_3                         0x70000065L
#define MSG_task_1_1                         0x70000067L
#define MSG_task_1_4                         0x7000FFFFL
#define MSG_task_2_1                         0x71000065L
#define MSG_task_2_2                         0x71000066L
#define MSG_task_2_3                         0x71000067L
#define MSG_task_3_1                         0x72000065L
#define MSG_task_3_2                         0x72000066L
#define MSG_task_3_3                         0x72000067L
#define MSG_provider_1                       0x90000001L
#define MSG_channel_1_1                      0x90000002L
#define MSG_channel_1_3                      0x90000003L
#define MSG_channel_1_4                      0x90000004L
#define MSG_channel_2_2                      0x91000001L
#define MSG_channel_2_1                      0x91000002L
#define MSG_provider_3                       0x92000001L
#define MSG_channel_3_1                      0x92000002L
#define MSG_provider_4                       0x93000001L
#define MSG_event_1_7                        0xB0000007L
#define MSG_event_1_8                        0xB0000008L
#define MSG_event_1_1                        0xB00B0005L
#define MSG_event_1_3                        0xB0210003L
#define MSG_event_1_4                        0xB02C0002L
#define MSG_event_1_5                        0xB0370001L
#define MSG_event_1_6                        0xB0420006L
#define MSG_event_1_9                        0xB0FE0009L
#define MSG_event_1_10                       0xB0FFFFFFL
#define MSG_event_2_1                        0xB1000001L
#define MSG_event_3_1                        0xB2000001L
#define MSG_valuemap_1_1_1                   0xD0000001L
#define MSG_valuemap_1_1_2                   0xD0000002L
#define MSG_valuemap_1_1_3                   0xD0000003L
#define MSG_valuemap_1_1_4                   0xD0000004L
#define MSG_valuemap_1_2_1                   0xD0000005L
#define MSG_valuemap_1_2_2                   0xD0000006L
#define MSG_valuemap_2_1_2                   0xD1000001L
#define MSG_valuemap_2_1_1                   0xD1000002L
#define MSG_valuemap_2_2_2                   0xD1000003L
#define MSG_valuemap_2_2_1                   0xD1000004L
#define MSG_valuemap_3_1_2                   0xD2000001L
#define MSG_valuemap_3_1_1                   0xD2000002L
#define MSG_valuemap_3_2_2                   0xD2000003L
#define MSG_valuemap_3_2_1                   0xD2000004L
#define MSG_bitmap_1_1_1                     0xF0000001L
#define MSG_bitmap_1_1_2                     0xF0000002L
#define MSG_bitmap_1_1_3                     0xF0000003L
#define MSG_bitmap_1_2_2                     0xF0000004L
#define MSG_bitmap_1_2_1                     0xF0000005L
#define MSG_bitmap_2_1_3                     0xF1000001L
#define MSG_bitmap_2_1_2                     0xF1000002L
#define MSG_bitmap_2_1_1                     0xF1000003L
#define MSG_bitmap_2_2_2                     0xF1000004L
#define MSG_bitmap_2_2_1                     0xF1000005L
#define MSG_bitmap_3_1_3                     0xF2000001L
#define MSG_bitmap_3_1_2                     0xF2000002L
#define MSG_bitmap_3_1_1                     0xF2000003L
#define MSG_bitmap_3_2_2                     0xF2000004L
#define MSG_bitmap_3_2_1                     0xF2000005L
