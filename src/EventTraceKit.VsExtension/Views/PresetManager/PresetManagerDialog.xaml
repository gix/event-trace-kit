<etkc:ThemedDialogWindow
  x:Class="EventTraceKit.VsExtension.Views.PresetManager.PresetManagerDialog"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:sys="clr-namespace:System;assembly=mscorlib"
  xmlns:etkc="clr-namespace:EventTraceKit.VsExtension.Controls"
  xmlns:etkvp="clr-namespace:EventTraceKit.VsExtension.Views.PresetManager"
  xmlns:vsui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
  xmlns:vss="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.14.0"
  xmlns:windows="clr-namespace:EventTraceKit.VsExtension.Windows"
  mc:Ignorable="d"
  d:DataContext="{d:DesignInstance {x:Type etkvp:PresetManagerDesignTimeModel}, IsDesignTimeCreatable=False}"
  x:Name="Root"
  MinWidth="600"
  MinHeight="450"
  Width="900"
  Height="600"
  WindowStartupLocation="CenterOwner"
  ResizeMode="CanResize"
  ShowInTaskbar="False"
  Title="{Binding DisplayName, StringFormat='{}{0} View Editor'}">
  <etkc:ThemedDialogWindow.Resources>
    <sys:Double x:Key="Double0P125">0.125</sys:Double>
    <sys:Double x:Key="Double0P25">0.25</sys:Double>
    <sys:Double x:Key="Double0P375">0.375</sys:Double>
    <sys:Double x:Key="Double0P5">0.5</sys:Double>
    <vsui:AccessKeyRemovingConverter x:Key="AccessKeyRemovingConverter"/>
    <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3 3 L 6 0 Z</Geometry>

    <Style x:Key="ToolBarMenuStyle" TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Type Menu}}">
      <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextActiveBrushKey}}"/>
      <Setter Property="FontFamily" Value="{DynamicResource {x:Static vss:VsFonts.EnvironmentFontFamilyKey}}"/>
      <Setter Property="FontSize" Value="{DynamicResource {x:Static vss:VsFonts.EnvironmentFontSizeKey}}"/>
      <Setter Property="IsMainMenu" Value="False"/>
      <Setter Property="HorizontalAlignment" Value="Center"/>
      <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <DataTemplate DataType="{x:Type etkvp:HeaderDropDownMenu}">
      <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}"
            AutomationProperties.Name="{Binding Header, Converter={StaticResource AccessKeyRemovingConverter}}">
        <Menu.Template>
          <ControlTemplate TargetType="{x:Type Menu}">
            <ItemsPresenter VerticalAlignment="Center"/>
          </ControlTemplate>
        </Menu.Template>
        <MenuItem Header="{Binding Header}" ItemsSource="{Binding Items}"
                  ToolTipService.ShowOnDisabled="True">
          <MenuItem.Template>
            <ControlTemplate TargetType="{x:Type MenuItem}">
              <Grid x:Name="HostingGrid">
                <Border x:Name="Bg" Padding="{TemplateBinding Padding}"
                        Margin="0,1,0,1"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        Background="{TemplateBinding Background}">
                  <Grid x:Name="ContentGrid" SnapsToDevicePixels="True"
                        HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                        MinHeight="20">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Center"
                                      VerticalAlignment="Center" Margin="3,0,6,0"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      Grid.Column="0"
                                      Content="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"/>
                    <Grid Margin="0,0,3,0" Grid.Column="1" HorizontalAlignment="Center"
                          VerticalAlignment="Center">
                      <Path x:Name="Arrow"
                            Fill="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuGlyphBrushKey}}"
                            Data="{StaticResource DownArrowGeometry}"/>
                    </Grid>
                  </Grid>
                </Border>
                <Popup x:Name="PART_Popup" HorizontalOffset="0" VerticalOffset="-2"
                       AllowsTransparency="True" Placement="Bottom"
                       Focusable="False"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                  <vsui:SystemDropShadowChrome x:Name="Shdw" vsui:Color="Transparent" SnapsToDevicePixels="True">
                    <Grid
                      Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuIconBackgroundBrushKey}}">
                      <etkc:VsMenuScrollViewer>
                        <Grid
                          Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBackgroundGradientBrushKey}}"
                          RenderOptions.BitmapScalingMode="{x:Static vsui:DpiHelper.BitmapScalingMode}"
                          RenderOptions.ClearTypeHint="Enabled">
                          <Border x:Name="IconBackground" Width="28"
                                  Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuIconBackgroundBrushKey}}"
                                  HorizontalAlignment="Left"/>
                          <ItemsPresenter Margin="3" KeyboardNavigation.TabNavigation="Cycle"
                                          KeyboardNavigation.DirectionalNavigation="Cycle"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                          Grid.IsSharedSizeScope="True"/>
                        </Grid>
                      </etkc:VsMenuScrollViewer>
                      <Border
                        BorderBrush="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBorderBrushKey}}"
                        BorderThickness="1"/>
                      <Border
                        Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBackgroundGradientBeginBrushKey}}"
                        VerticalAlignment="Top" HorizontalAlignment="Left" Height="2"
                        Margin="{windows:MenuPopupPositioner ElementName=Bg}"/>
                    </Grid>
                  </vsui:SystemDropShadowChrome>
                </Popup>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Foreground"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextInactiveBrushKey}}"/>
                  <Setter TargetName="Arrow" Property="Fill"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextInactiveBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                  <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
                </Trigger>
                <DataTrigger
                  Binding="{Binding AreAnimationsAllowed, Source={x:Static vsui:EnvironmentRenderCapabilities.Current}}"
                  Value="False">
                  <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
                </DataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding (Popup.HasDropShadow), ElementName=PART_Popup}" Value="True"/>
                    <Condition
                      Binding="{Binding AreGradientsAllowed, Source={x:Static vsui:EnvironmentRenderCapabilities.Current}}"
                      Value="True"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                  <Setter TargetName="Shdw" Property="vsui:SystemDropShadowChrome.Color"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.DropShadowBackgroundColorKey}}"/>
                </MultiDataTrigger>
                <Trigger Property="IsHighlighted" Value="True">
                  <Setter Property="Foreground"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextHoverBrushKey}}"/>
                  <Setter TargetName="Bg" Property="BorderBrush"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarBorderBrushKey}}"/>
                  <Setter TargetName="Bg" Property="Background"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}"/>
                  <Setter TargetName="Arrow" Property="Fill"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuMouseOverGlyphBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsSubmenuOpen" Value="True">
                  <Setter Property="Foreground"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextActiveBrushKey}}"/>
                  <Setter TargetName="Bg" Property="BorderBrush"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBorderBrushKey}}"/>
                  <Setter TargetName="Bg" Property="Background"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuBackgroundGradientBeginBrushKey}}"/>
                  <Setter TargetName="Arrow" Property="Fill"
                          Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMenuMouseDownGlyphBrushKey}}"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </MenuItem.Template>
          <MenuItem.ItemContainerStyle>
            <Style TargetType="{x:Type MenuItem}">
              <Setter Property="Header" Value="{Binding DisplayName}"/>
              <Setter Property="IsChecked" Value="{Binding IsChecked}"/>
              <Setter Property="Command" Value="{Binding ExecuteCommand}"/>
            </Style>
          </MenuItem.ItemContainerStyle>
        </MenuItem>
      </Menu>
    </DataTemplate>

    <Style x:Key="AvailableColumnsListBoxItem" TargetType="{x:Type ListBoxItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
      <Setter Property="AutomationProperties.Name" Value="{Binding Name, Mode=OneWay}"/>
      <EventSetter Event="Loaded" Handler="OnAvailableListItemLoaded"/>
      <EventSetter Event="Unloaded" Handler="OnAvailableListItemUnloaded"/>
    </Style>

    <etkvp:PresetManagerColumnContainerStyleSelector x:Key="LayoutListColumnStyleSelector">
      <etkvp:PresetManagerColumnContainerStyleSelector.ConfigurableColumnStyle>
        <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
          <Setter Property="AutomationProperties.Name" Value="{Binding (AutomationProperties.Name), Mode=OneWay}"/>
          <EventSetter Event="Loaded" Handler="OnLayoutListItemLoaded"/>
          <EventSetter Event="Unloaded" Handler="OnLayoutListItemUnloaded"/>
          <EventSetter Event="DragEnter" Handler="OnLayoutListItemDragEnter"/>
          <EventSetter Event="DragOver" Handler="OnLayoutListItemDragOver"/>
          <EventSetter Event="Drop" Handler="OnLayoutListItemDrop"/>
          <Style.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsFrozen}" Value="True"/>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource {x:Static vsui:CommonControlsColors.ButtonDisabledBrushKey}}"/>
            </MultiDataTrigger>
          </Style.Triggers>
        </Style>
      </etkvp:PresetManagerColumnContainerStyleSelector.ConfigurableColumnStyle>
      <etkvp:PresetManagerColumnContainerStyleSelector.SeparatorColumnStyle>
        <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
          <Setter Property="AutomationProperties.Name" Value="{Binding (AutomationProperties.Name), Mode=OneWay}"/>
          <Setter Property="Background" Value="Transparent"/>
          <Setter Property="BorderBrush" Value="{x:Null}"/>
          <Setter Property="BorderThickness" Value="0"/>
          <Setter Property="Margin" Value="0"/>
          <Setter Property="Padding" Value="1"/>
          <Setter Property="VerticalContentAlignment" Value="Center"/>
          <Setter Property="Visibility"
                  Value="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}"/>
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ListViewItem}">
                <Border BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="True">
                  <Border x:Name="InnerBorder" BorderThickness="1" Margin="1">
                    <Border Height="4"
                            Background="{Binding Converter={x:Static etkvp:PresetManagerDialog.SeparatorToColorBrushConverter}}"/>
                  </Border>
                </Border>
                <ControlTemplate.Triggers>
                  <DataTrigger Binding="{Binding IsFrozen}" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsui:CommonControlsColors.ButtonDisabledBrushKey}}"/>
                  </DataTrigger>
                  <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsui:TreeViewColors.SelectedItemActiveBrushKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:TreeViewColors.SelectedItemActiveTextBrushKey}}"/>
                    <Setter TargetName="InnerBorder" Property="BorderBrush" Value="#80FFFFFF"/>
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsSelected" Value="True"/>
                      <Condition Property="Selector.IsSelectionActive" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsui:TreeViewColors.SelectedItemInactiveBrushKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:TreeViewColors.SelectedItemInactiveTextBrushKey}}"/>
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <EventSetter Event="Loaded" Handler="OnLayoutListItemLoaded"/>
          <EventSetter Event="Unloaded" Handler="OnLayoutListItemUnloaded"/>
          <EventSetter Event="DragEnter" Handler="OnLayoutListItemDragEnter"/>
          <EventSetter Event="DragOver" Handler="OnLayoutListItemDragOver"/>
          <EventSetter Event="Drop" Handler="OnLayoutListItemDrop"/>
        </Style>
      </etkvp:PresetManagerColumnContainerStyleSelector.SeparatorColumnStyle>
    </etkvp:PresetManagerColumnContainerStyleSelector>

    <etkvp:PresetManagerColumnDetailsTemplateSelector x:Key="DetailsTemplateSelector">
      <etkvp:PresetManagerColumnDetailsTemplateSelector.LeftFreezableAreaSeparatorColumnTemplate>
        <DataTemplate>
          <StackPanel>
            <TextBlock FontWeight="Bold" Padding="0,0,0,4" Text="Left Freezable Area Separator Column"/>
            <TextBlock TextWrapping="Wrap" Text="This column marks the edge of the left non-scrolling column region."/>
          </StackPanel>
        </DataTemplate>
      </etkvp:PresetManagerColumnDetailsTemplateSelector.LeftFreezableAreaSeparatorColumnTemplate>
      <etkvp:PresetManagerColumnDetailsTemplateSelector.RightFreezableAreaSeparatorColumnTemplate>
        <DataTemplate>
          <StackPanel>
            <TextBlock FontWeight="Bold" Padding="0,0,0,4" Text="Right Freezable Area Separator Column"/>
            <TextBlock TextWrapping="Wrap" Text="This column marks the edge of the right non-scrolling column region."/>
          </StackPanel>
        </DataTemplate>
      </etkvp:PresetManagerColumnDetailsTemplateSelector.RightFreezableAreaSeparatorColumnTemplate>
      <etkvp:PresetManagerColumnDetailsTemplateSelector.ConfigurableColumnTemplate>
        <DataTemplate DataType="{x:Type etkvp:PresetManagerColumnViewModel}">
          <FrameworkTemplate.Resources>
            <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="TextAlignmentValues">
              <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="TextAlignment"/>
              </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
              <Setter Property="VerticalAlignment" Value="Center"/>
              <Setter Property="Padding" Value="0"/>
            </Style>

            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
              <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>

          </FrameworkTemplate.Resources>
          <StackPanel>
            <TextBlock FontWeight="Bold" Padding="0,0,0,4" Text="{Binding Name}"/>
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Label Grid.Row="0" Grid.Column="0" Content="Text Alignment"
                     Margin="0,2,0,2"
                     Target="{x:Reference Name=textAlignmentComboBox}"/>
              <ComboBox x:Name="textAlignmentComboBox" Grid.Row="0" Grid.Column="1"
                        AutomationProperties.Name="Text Alignment"
                        Margin="4,2,0,2"
                        Padding="5,3"
                        VerticalAlignment="Center"
                        ItemsSource="{Binding Source={StaticResource TextAlignmentValues}}"
                        SelectedItem="{Binding TextAlignment, UpdateSourceTrigger=PropertyChanged}"/>

              <Label Grid.Row="1" Grid.Column="0" Content="Width"
                     Margin="0,2,0,2"
                     Target="{x:Reference widthTextBox}"/>
              <TextBox x:Name="widthTextBox" Grid.Row="1" Grid.Column="1"
                       AutomationProperties.Name="Width"
                       Margin="4,2,0,2"
                       VerticalAlignment="Center"
                       Text="{Binding Width, UpdateSourceTrigger=PropertyChanged, Converter={x:Static etkvp:PresetManagerDialog.WidthToStringConverter}}"/>

              <Label Grid.Row="2" Grid.Column="0" Content="Format"
                     Visibility="{Binding CellFormatVisibility, Mode=OneTime}"
                     Target="{x:Reference customFormatComboBox}"/>
              <ComboBox x:Name="customFormatComboBox" Grid.Row="2" Grid.Column="1"
                        AutomationProperties.Name="Format"
                        Margin="4,2,0,2"
                        Padding="5,3"
                        VerticalAlignment="Center"
                        Visibility="{Binding CellFormatVisibility, Mode=OneTime}"
                        DisplayMemberPath="Label"
                        ItemsSource="{Binding SupportedFormats}"
                        SelectedItem="{Binding CellFormat, UpdateSourceTrigger=PropertyChanged}">
                <ItemsControl.ItemContainerStyle>
                  <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                    <Setter Property="AutomationProperties.Name" Value="{Binding Label, Mode=OneTime}"/>
                    <Setter Property="ToolTip" Value="{Binding HelpText, Mode=OneTime}"/>
                  </Style>
                </ItemsControl.ItemContainerStyle>
              </ComboBox>
            </Grid>
          </StackPanel>
        </DataTemplate>
      </etkvp:PresetManagerColumnDetailsTemplateSelector.ConfigurableColumnTemplate>
    </etkvp:PresetManagerColumnDetailsTemplateSelector>

    <Style x:Key="HeaderStyle" TargetType="{x:Type Border}">
      <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsui:HeaderColors.DefaultTextBrushKey}}"/>
      <Setter Property="Background" Value="{DynamicResource {x:Static vsui:HeaderColors.DefaultBrushKey}}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsui:HeaderColors.SeparatorLineBrushKey}}"/>
      <Setter Property="BorderThickness" Value="0,0,0,1"/>
      <Setter Property="Padding" Value="4"/>
    </Style>

    <Style x:Key="HorizontalToolBarThumbStyle" TargetType="{x:Type Thumb}">
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type Thumb}">
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
              </Trigger>
            </ControlTemplate.Triggers>
            <Border Padding="{TemplateBinding Control.Padding}" Background="Transparent" SnapsToDevicePixels="True">
              <Rectangle Fill="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarDragHandleVerticalTextureBrushKey}}"/>
            </Border>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

    <Style x:Key="VsToolBar" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
      <Setter Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarToolBarBorderBrushKey}}"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="FontFamily" Value="{DynamicResource {x:Static vss:VsFonts.EnvironmentFontFamilyKey}}"/>
      <Setter Property="FontSize" Value="{DynamicResource {x:Static vss:VsFonts.EnvironmentFontSizeKey}}"/>
      <Setter Property="Margin" Value="0"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ToolBar}">
            <Grid x:Name="Grid" SnapsToDevicePixels="True">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition x:Name="ShifterColumn" Width="10"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*"/>
                  <RowDefinition x:Name="ShifterRow" Height="10"/>
                </Grid.RowDefinitions>
                <Border x:Name="MainPanelBorder"
                        Background="{TemplateBinding Panel.Background}"
                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                        BorderThickness="{TemplateBinding Border.BorderThickness}"
                        Padding="{TemplateBinding Control.Padding}">
                  <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                    <Thumb x:Name="ToolBarThumb" Style="{StaticResource HorizontalToolBarThumbStyle}" Width="8" Padding="2,3,1,3"/>
                    <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </DockPanel>
                </Border>
              </Grid>
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Property="ToolBar.IsOverflowOpen" Value="True">
                <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="False"/>
              </Trigger>
              <Trigger Property="HeaderedContentControl.Header" Value="{x:Null}">
                <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed"/>
              </Trigger>
              <Trigger Property="ToolBarTray.IsLocked" Value="True">
                <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed"/>
              </Trigger>
              <Trigger Property="ToolBar.Orientation" Value="Vertical">
                <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="8"/>
                <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto"/>
                <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="3,2,3,1"/>
                <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
                <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
                <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
                <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarHorizontalGradientBrushKey}}"/>
                <Setter Property="MinWidth" Value="24"/>
                <Setter Property="MinHeight" Value="0"/>
              </Trigger>
              <Trigger Property="ToolBar.Orientation" Value="Horizontal">
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="MinHeight" Value="24"/>
              </Trigger>
              <Trigger Property="ToolBar.Orientation" Value="Horizontal">
                <Setter TargetName="ShifterRow" Property="RowDefinition.Height" Value="0"/>
              </Trigger>
              <Trigger Property="ToolBar.Orientation" Value="Vertical">
                <Setter TargetName="ShifterColumn" Property="ColumnDefinition.Width" Value="0"/>
              </Trigger>
              <DataTrigger Binding="{Binding Visibility, ElementName=OverflowButton}" Value="Collapsed">
                <Setter TargetName="ShifterRow" Property="RowDefinition.Height" Value="0"/>
                <Setter TargetName="ShifterColumn" Property="ColumnDefinition.Width" Value="0"/>
              </DataTrigger>
              <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextInactiveBrushKey}}"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

    <Style x:Key="ToolBarButtonBaseStyle" TargetType="{x:Type ButtonBase}">
      <Setter Property="Background" Value="Transparent"/>
      <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextActiveBrushKey}}"/>
      <Setter Property="SnapsToDevicePixels" Value="True"/>
      <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ButtonBase}">
            <Border x:Name="Border" BorderThickness="1" Background="Transparent" BorderBrush="Transparent">
              <Grid x:Name="ContainingGrid" MinHeight="20">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Image" Margin="2" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" RecognizesAccessKey="True"/>
                <AccessText x:Name="Text" Margin="7,0,7,0" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="Visible" Text="{TemplateBinding Content}"/>
              </Grid>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextInactiveBrushKey}}"/>
              </Trigger>
              <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarBorderBrushKey}}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextHoverBrushKey}}"/>
              </Trigger>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarBorderBrushKey}}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextHoverBrushKey}}"/>
              </Trigger>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="IsEnabled" Value="True"/>
                  <Condition Property="ToggleButton.IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarSelectedBorderBrushKey}}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarSelectedBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextSelectedBrushKey}}"/>
              </MultiTrigger>
              <Trigger Property="ButtonBase.IsPressed" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarBorderBrushKey}}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextMouseDownBrushKey}}"/>
              </Trigger>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="IsMouseOver" Value="True"/>
                  <Condition Property="IsEnabled" Value="True"/>
                  <Condition Property="ToggleButton.IsChecked" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarHoverOverSelectedIconBorderBrushKey}}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarHoverOverSelectedIconBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarTextHoverOverSelectedBrushKey}}"/>
              </MultiTrigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="VsToolBarButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ToolBarButtonBaseStyle}">
      <Setter Property="Panel.Background" Value="Transparent"/>
      <Setter Property="InputMethod.IsInputMethodSuspended" Value="True"/>
    </Style>
    <Style x:Key="VsToolBarTrayStyle" TargetType="{x:Type ToolBarTray}" BasedOn="{StaticResource {x:Type ToolBarTray}}">
      <Style.Resources>
        <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource VsToolBarButtonStyle}"/>
        <Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource VsToolBar}">
          <Setter Property="Padding" Value="4,2,4,2"/>
          <Setter Property="Margin" Value="0"/>
          <Setter Property="UseLayoutRounding" Value="True"/>
          <Setter Property="BorderThickness" Value="0"/>
          <Setter Property="BorderBrush" Value="{x:Null}"/>
          <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
          <Setter Property="RenderOptions.BitmapScalingMode" Value="{x:Static vsui:DpiHelper.BitmapScalingMode}"/>
        </Style>
      </Style.Resources>
      <Setter Property="IsLocked" Value="True"/>
      <Setter Property="Margin" Value="0"/>
      <Setter Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}"/>
    </Style>
  </etkc:ThemedDialogWindow.Resources>
  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
      <RowDefinition Height="Auto"/>
    </Grid.RowDefinitions>
    <ToolBarTray Grid.Row="0" Style="{StaticResource VsToolBarTrayStyle}">
      <ToolBar>
        <TextBlock Margin="4,0,0,0" VerticalAlignment="Center" Text="{Binding DisplayName}"/>
        <ContentControl Margin="4,0,0,0" Focusable="False" Content="{Binding PresetDropDownMenu}"/>
        <Button Content="Save" Command="{Binding SavePresetCommand}"/>
        <Button Content="Save As…" Command="{Binding SavePresetAsCommand}"/>
        <Button Content="Reset" Command="{Binding ResetPresetCommand}"/>
        <Button Content="Delete" Command="{Binding DeletePresetCommand}"/>
      </ToolBar>
    </ToolBarTray>
    <Grid Grid.Row="1" Margin="8">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="175"
                          MinWidth="{Binding MinWidth, ElementName=Root, Converter={x:Static etkvp:PresetManagerDialog.MultiplierConverter}, ConverterParameter={StaticResource Double0P125}}"
                          MaxWidth="{Binding ActualWidth, ElementName=Root, Converter={x:Static etkvp:PresetManagerDialog.MultiplierConverter}, ConverterParameter={StaticResource Double0P375}}"/>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="500"
                          MinWidth="{Binding MinWidth, ElementName=Root, Converter={x:Static etkvp:PresetManagerDialog.MultiplierConverter}, ConverterParameter={StaticResource Double0P25}}"
                          MaxWidth="{Binding ActualWidth, ElementName=Root, Converter={x:Static etkvp:PresetManagerDialog.MultiplierConverter}, ConverterParameter={StaticResource Double0P5}}"/>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"
                          MinWidth="{Binding MinWidth, ElementName=Root, Converter={x:Static etkvp:PresetManagerDialog.MultiplierConverter}, ConverterParameter={StaticResource Double0P125}}"/>
      </Grid.ColumnDefinitions>

      <Border BorderThickness="1"
              BorderBrush="{DynamicResource {x:Static vsui:ThemedDialogColors.GridLineBrushKey}}">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
          </Grid.RowDefinitions>
          <Border Grid.Row="0" Style="{StaticResource HeaderStyle}">
            <TextBlock Text="Available Columns"
                       TextTrimming="CharacterEllipsis"
                       ToolTip="Available Columns"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"/>
          </Border>

          <etkc:MultiDragListBox
            x:Name="availableList"
            Grid.Row="1"
            ItemsSource="{Binding TemplateColumns}"
            AllowDrop="True"
            SelectionMode="Extended"
            BorderThickness="0"
            Style="{StaticResource {x:Type ListBox}}"
            ItemContainerStyle="{StaticResource AvailableColumnsListBoxItem}">
            <ItemsControl.ItemTemplate>
              <DataTemplate DataType="{x:Type etkvp:PresetManagerColumnViewModel}">
                <TextBlock Text="{Binding Name}"/>
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </etkc:MultiDragListBox>
        </Grid>
      </Border>

      <GridSplitter Grid.Column="1" Width="7"
                    HorizontalAlignment="Left" VerticalAlignment="Stretch"/>

      <etkc:MultiDragListView
        x:Name="layoutList"
        Grid.Column="2"
        AllowDrop="True"
        ItemsSource="{Binding PresetColumns}"
        SelectedItem="{Binding SelectedColumn}"
        BorderThickness="1"
        SelectionMode="Extended"
        ItemContainerStyleSelector="{StaticResource LayoutListColumnStyleSelector}">
        <etkc:MultiDragListView.View>
          <GridView>
            <GridViewColumn Header="Visible">
              <GridViewColumn.CellTemplate>
                <DataTemplate DataType="{x:Type etkvp:PresetManagerColumnViewModel}">
                  <CheckBox AutomationProperties.Name="Visible" IsChecked="{Binding IsVisible}"/>
                </DataTemplate>
              </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <GridViewColumn Header="Name" Width="300">
              <GridViewColumn.CellTemplate>
                <DataTemplate DataType="{x:Type etkvp:PresetManagerColumnViewModel}">
                  <TextBlock Text="{Binding Name}">
                    <TextBlock.Style>
                      <Style TargetType="{x:Type TextBlock}">
                        <Style.Triggers>
                          <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                              <Condition Binding="{Binding IsVisible}" Value="False"/>
                              <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:CommonControlsColors.ButtonDisabledTextBrushKey}}"/>
                          </MultiDataTrigger>
                        </Style.Triggers>
                      </Style>
                    </TextBlock.Style>
                  </TextBlock>
                </DataTemplate>
              </GridViewColumn.CellTemplate>
            </GridViewColumn>
          </GridView>
        </etkc:MultiDragListView.View>
      </etkc:MultiDragListView>

      <GridSplitter Grid.Column="3" Width="7"
                    HorizontalAlignment="Left" VerticalAlignment="Stretch"/>

      <Border Grid.Column="4" BorderThickness="1"
              BorderBrush="{DynamicResource {x:Static vsui:ThemedDialogColors.GridLineBrushKey}}">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
          </Grid.RowDefinitions>
          <Border Grid.Row="0" Style="{StaticResource HeaderStyle}">
            <TextBlock Text="Column Details" TextTrimming="CharacterEllipsis" ToolTip="Column Details"
                   HorizontalAlignment="Center" VerticalAlignment="Center"/>
          </Border>

          <ContentControl Grid.Row="1"
                          Margin="4"
                          Content="{Binding SelectedColumn}"
                          ContentTemplateSelector="{StaticResource DetailsTemplateSelector}"/>
        </Grid>
      </Border>
    </Grid>
    <Border Grid.Row="2" Padding="7"
            Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Button Grid.Column="1" Content="OK" Click="CloseButtonClickHandler" IsDefault="True"/>
        <Button Grid.Column="2" Content="Cancel" Click="CancelButtonClickHandler" IsCancel="True" Margin="7,1,1,1"/>
        <Button Grid.Column="3" Content="Apply" Click="ApplyButtonClickHandler" IsEnabled="{Binding CanApply}" Margin="7,1,1,1"/>
      </Grid>
    </Border>
  </Grid>
</etkc:ThemedDialogWindow>
