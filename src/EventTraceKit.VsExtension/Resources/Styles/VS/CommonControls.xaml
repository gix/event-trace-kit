<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vsfx="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.14.0"
                    xmlns:vsp="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
                    xmlns:etkc="clr-namespace:EventTraceKit.VsExtension.Controls"
                    xmlns:etkr="clr-namespace:EventTraceKit.VsExtension.Resources">
  <Style x:Key="{x:Static etkr:ResourceKeys.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ButtonStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.CheckBoxStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ComboBoxStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.HyperlinkStyleKey}" TargetType="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ThemedDialogHyperlinkStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.LabelStyleKey}" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ThemedDialogLabelStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.ListBoxStyleKey}" TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ThemedDialogListBoxStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.ProgressBarStyleKey}" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ProgressBarStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ThemedDialogRadioButtonStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.ScrollBarStyleKey}" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ScrollBarStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.ScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ScrollViewerStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.TextBoxStyleKey}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.TextBoxStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.TreeViewStyleKey}" TargetType="{x:Type TreeView}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ThemedDialogTreeViewStyleKey}}"/>
  <Style x:Key="{x:Static etkr:ResourceKeys.TreeViewItemStyleKey}" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ThemedDialogTreeViewItemStyleKey}}"/>

  <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.TextBoxStyleKey}}">
    <Setter Property="Padding" Value="2"/>
    <Setter Property="Margin" Value="1"/>
  </Style>

  <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.ButtonStyleKey}}">
    <Setter Property="MinWidth" Value="73"/>
    <Setter Property="MinHeight" Value="21"/>
    <Setter Property="Margin" Value="1"/>
    <Setter Property="Padding" Value="15,0"/>
  </Style>

  <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.CheckBoxStyleKey}}"/>

  <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.ComboBoxStyleKey}}">
    <Setter Property="MinHeight" Value="21"/>
    <Setter Property="Margin" Value="1"/>
  </Style>

  <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.LabelStyleKey}}"/>
  <Style TargetType="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.HyperlinkStyleKey}}"/>
  <Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.ProgressBarStyleKey}}"/>
  <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.RadioButtonStyleKey}}"/>
  <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.ScrollBarStyleKey}}"/>
  <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.ScrollViewerStyleKey}}"/>

  <Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.TreeViewStyleKey}}"/>
  <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.TreeViewItemStyleKey}}"/>

  <Style x:Key="{x:Type GridSplitter}" TargetType="{x:Type GridSplitter}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="PreviewStyle">
      <Setter.Value>
        <Style TargetType="{x:Type Control}">
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Fill="{DynamicResource {x:Static vsfx:VsBrushes.ButtonShadowKey}}"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="ListBoxItemTemplate" TargetType="{x:Type ListBoxItem}">
    <Border SnapsToDevicePixels="True" Background="{TemplateBinding Background}"
            Padding="{TemplateBinding Padding}" Margin="{TemplateBinding Margin}">
      <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    </Border>
    <ControlTemplate.Triggers>
      <!-- Selected -->
      <Trigger Property="IsSelected" Value="True">
        <!-- A subset of TreeViewColors are used for applying styles to the ListView.  A TreeView
             has a superset of the colors required by a ListView (for expanders). -->
        <Setter Property="Background"
                Value="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemActiveBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemActiveTextBrushKey}}"/>
      </Trigger>

      <!-- Selected but not active (control focused) -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="Selector.IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background"
                Value="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemInactiveBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemInactiveTextBrushKey}}"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="ListBoxItem.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ListBoxItem}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource ListBoxItem.FocusVisual}"/>
    <Setter Property="Margin" Value="0"/>
    <Setter Property="Padding" Value="2"/>
    <Setter Property="Template" Value="{StaticResource ListBoxItemTemplate}"/>
    <Setter Property="Foreground"
            Value="{DynamicResource {x:Static vsp:EnvironmentColors.CommandBarTextActiveBrushKey}}"/>
  </Style>

  <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Static etkr:ResourceKeys.ListBoxStyleKey}}">
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsp:ThemedDialogColors.GridLineBrushKey}}"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border x:Name="Bd"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True"
                  Padding="{TemplateBinding Padding}">
            <ScrollViewer Padding="{TemplateBinding Padding}" Focusable="False">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <!--FIXME-->
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="True"/>
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderHeaderFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="0"
                       StrokeThickness="1"
                       Stroke="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"
                       StrokeDashArray="1 2"
                       SnapsToDevicePixels="True"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="16"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Path x:Name="Glyph"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Stroke="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"
                    StrokeThickness="1"
                    SnapsToDevicePixels="True"
                                Margin="0,1,0,0"
                    Data="M 0.5 0.5 L 4.5 4.5 L 0.5 8.5 Z"/>
              <ContentPresenter Grid.Column="1"
                                Margin="4,0,0,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                SnapsToDevicePixels="True"
                                RecognizesAccessKey="True"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Data" Value="M 5.5 0.5 L 0.5 5.5 L 5.5 5.5 Z"/>
              <Setter TargetName="Glyph" Property="Fill" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Glyph" Property="Stroke" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Stroke" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextInactiveKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="16"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Path x:Name="Glyph"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Stroke="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"
                    StrokeThickness="2"
                    SnapsToDevicePixels="True"
                    Data="M 0.5 0.5 L 4.5 4.5 L 0.5 8.5 Z"/>
              <ContentPresenter Grid.Column="1"
                                Margin="4,0,0,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                SnapsToDevicePixels="True"
                                RecognizesAccessKey="True"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Data" Value="M 5.5 5.5 L 0.5 0.5 L 5.5 0.5 Z"/>
              <Setter TargetName="Glyph" Property="Fill" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Glyph" Property="Stroke" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Stroke" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextInactiveKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
              <Grid.RowDefinitions>
                <RowDefinition Height="16"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <Path x:Name="Glyph"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Stroke="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"
                    StrokeThickness="2"
                    SnapsToDevicePixels="True"
                    Data="M 8.5 0.5 L 4.5 4.5 L 0.5 0.5 Z"/>
              <ContentPresenter Grid.Row="1"
                                Margin="0,4,0,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Top"
                                SnapsToDevicePixels="True"
                                RecognizesAccessKey="True"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Data" Value="M 0.5 5.5 L 5.5 0.5 L 5.5 5.5 Z"/>
              <Setter TargetName="Glyph" Property="Fill" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Glyph" Property="Stroke" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Stroke" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextInactiveKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent" SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="16"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <Path x:Name="Glyph"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Stroke="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"
                    StrokeThickness="2"
                    SnapsToDevicePixels="True"
                    Data="M 0.5 4.5 L 4.5 0.5 L 8.5 4.5 Z"/>
              <ContentPresenter Grid.Row="1"
                                Margin="0,4,0,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Top"
                                SnapsToDevicePixels="True"
                                RecognizesAccessKey="True"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Data" Value="M 5.5 0.5 L 0.5 5.5 L 0.5 0.5 Z"/>
              <Setter TargetName="Glyph" Property="Fill" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Glyph" Property="Stroke" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Stroke" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextInactiveKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  SnapsToDevicePixels="True">
            <DockPanel>
              <ToggleButton x:Name="HeaderSite"
                            DockPanel.Dock="Top"
                            Margin="1"
                            MinWidth="0"
                            MinHeight="0"
                            Style="{StaticResource ExpanderDownHeaderStyle}"
                            FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                            IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            Content="{TemplateBinding Header}"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                            Foreground="{TemplateBinding Foreground}"
                            Padding="{TemplateBinding Padding}"
                            FontFamily="{TemplateBinding FontFamily}"
                            FontSize="{TemplateBinding FontSize}"
                            FontStyle="{TemplateBinding FontStyle}"
                            FontStretch="{TemplateBinding FontStretch}"
                            FontWeight="{TemplateBinding FontWeight}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
              <ContentPresenter x:Name="ExpandSite"
                                DockPanel.Dock="Bottom"
                                Visibility="Collapsed"
                                Focusable="False"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="{TemplateBinding Padding}"/>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
              <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right"/>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left"/>
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderRightHeaderStyle}"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top"/>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom"/>
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderUpHeaderStyle}"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left"/>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right"/>
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextInactiveKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type etkc:ThemedDialogWindow}">
    <Setter Property="Background" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowKey}}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.WindowTextKey}}"/>
  </Style>

  <Style x:Key="ImageButton" TargetType="{x:Type Button}">
    <Setter Property="Width" Value="16"/>
    <Setter Property="Height" Value="16"/>
    <Setter Property="MaxHeight" Value="32"/>
    <Setter Property="MaxWidth" Value="32"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="Margin" Value="4,0,0,0"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsp:CommonControlsColors.ButtonHoverBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>
