<?xml version="1.0" encoding="utf-8"?>
<Project>
  <ItemDefinitionGroup>
    <ClCompile>
      <!-- Enable exceptions and RTTI -->
      <ExceptionHandling>Sync</ExceptionHandling>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <!-- C++/CLI does not support synchronous exceptions. -->
      <ExceptionHandling Condition="'$(CLRSupport)' == 'true'">Async</ExceptionHandling>

      <!-- Create debug symbols for all build types -->
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>

      <!-- Enable Just My Code debugging for debug builds -->
      <SupportJustMyCode Condition="'$(IsDebugBuild)' != 'false'">true</SupportJustMyCode>

      <!-- Run-Time Error Checks for debug builds -->
      <BasicRuntimeChecks Condition="'$(IsDebugBuild)' != 'false'">EnableFastChecks</BasicRuntimeChecks>
      <BasicRuntimeChecks Condition="'$(CLRSupport)' == 'true'">Default</BasicRuntimeChecks>

      <!-- Optimization -->
      <Optimization Condition="'$(IsDebugBuild)' != 'false'">Disabled</Optimization>
      <InlineFunctionExpansion Condition="'$(IsDebugBuild)' != 'false'">Disabled</InlineFunctionExpansion>
      <WholeProgramOptimization Condition="'$(IsDebugBuild)' != 'false'">false</WholeProgramOptimization>

      <Optimization Condition="'$(IsDebugBuild)' == 'false'">MaxSpeed</Optimization>
      <InlineFunctionExpansion Condition="'$(IsDebugBuild)' == 'false'">Default</InlineFunctionExpansion>
      <AdditionalOptions Condition="'$(IsDebugBuild)' == 'false'">%(AdditionalOptions) /Ob3</AdditionalOptions>
      <OmitFramePointers Condition="'$(IsDebugBuild)' == 'false'">false</OmitFramePointers>
      <WholeProgramOptimization Condition="'$(IsDebugBuild)' == 'false'">true</WholeProgramOptimization>

      <!-- Diagnostics -->
      <WarningLevel>Level4</WarningLevel>
      <DiagnosticsFormat>Caret</DiagnosticsFormat>

      <!-- C4324: 'struct_name' : structure was padded due to __declspec(align())
           This warning can be safely ignored. It is just a note that the type
           is smaller than its alignment. -->
      <DisableSpecificWarnings>%(DisableSpecificWarnings);4324</DisableSpecificWarnings>

      <DisableSpecificWarnings>4200;4251;4275;4351;4458;4481;4505;4512;%(DisableSpecificWarnings)</DisableSpecificWarnings>

      <!-- C4013: 'function' undefined; assuming extern returning int -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4013</TreatSpecificWarningsAsErrors>

      <!-- C4099: 'identifier' : type name first seen using 'objecttype1' now seen using 'objecttype2' -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4099;</TreatSpecificWarningsAsErrors>

      <!-- C4150: deletion of pointer to incomplete type 'type'; no destructor called
           While allowed, this is dangerous. The standard says:
             If the object being deleted has incomplete class type at the point
             of deletion and the complete class has a non-trivial destructor or
             a deallocation function, the behavior is undefined.
           In other words, if and only if the destructor turns out to be trivial,
           it is legal. But the compiler does not have enough information when
           this warning is emitted. -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4150;</TreatSpecificWarningsAsErrors>

      <!-- C4172: returning address of local variable or temporary -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4172</TreatSpecificWarningsAsErrors>

      <!-- C4477: 'function' : format string 'string' requires an argument of type 'type', but variadic argument number has type 'type' -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4477</TreatSpecificWarningsAsErrors>

      <!-- C4715: 'function' : not all control paths return a value -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4715</TreatSpecificWarningsAsErrors>


      <AdditionalIncludeDirectories>$(MSBuildThisFileDirectory)..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>

      <!-- Enforce unique output paths -->
      <ProgramDataBaseFileName Condition="'$(ConfigurationType)' == 'StaticLibrary'">$(TargetDir)$(TargetName).pdb</ProgramDataBaseFileName>
      <ObjectFileName>$(IntDir)%(RelativeDir)</ObjectFileName>
      <AssemblerListingLocation>$(IntDir)%(RelativeDir)</AssemblerListingLocation>

      <!-- Make the compiler emit individual COMDAT sections for functions and
           global data to enable linker optimizations. -->
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <AdditionalOptions>%(AdditionalOptions) /Gw</AdditionalOptions>

      <!-- Enable faster PDB generation. -->
      <AdditionalOptions>%(AdditionalOptions) /Zf</AdditionalOptions>

      <!-- Use UTF-8 for all files. -->
      <AdditionalOptions>%(AdditionalOptions) /utf-8</AdditionalOptions>

      <!-- Standard Conformance -->
      <LanguageStandard>stdcpplatest</LanguageStandard>
      <ConformanceMode>true</ConformanceMode>
      <!-- C++/CLI only supports C++17 -->
      <LanguageStandard Condition="'$(CLRSupport)' != 'false'">stdcpp17</LanguageStandard>

      <!-- Conformance: Enforce the C++11 requirement that all functions declared
           inline must have a definition available in the same translation unit
           if they are used. -->
      <RemoveUnreferencedCodeData>true</RemoveUnreferencedCodeData>

      <!-- Conformance: Use external linkage for constexpr variables. -->
      <AdditionalOptions>%(AdditionalOptions) /Zc:externConstexpr</AdditionalOptions>

      <!-- Conformance: Assume that operator new throws std::bad_alloc instead
           of returning a null pointer. Avoids unnecessary null checks for
           allocation. -->
      <AdditionalOptions>%(AdditionalOptions) /Zc:throwingNew</AdditionalOptions>

      <!-- Two-phase name lookup is not supported for C++/CLI. -->
      <AdditionalOptions Condition="'$(CLRSupport)' != 'false'">%(AdditionalOptions) /Zc:twoPhase-</AdditionalOptions>


      <!-- Target Windows 8 -->
      <PreprocessorDefinitions>%(PreprocessorDefinitions);_WIN32_WINNT=0x0602</PreprocessorDefinitions>

      <!-- Windows SDK -->
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32_LEAN_AND_MEAN;VC_EXTRALEAN;NOMINMAX</PreprocessorDefinitions>

      <!-- CoreCRT options -->

      <PreprocessorDefinitions>%(PreprocessorDefinitions);__STDC_WANT_LIB_EXT1__</PreprocessorDefinitions>

      <PreprocessorDefinitions>%(PreprocessorDefinitions);_CRT_STDIO_ISO_WIDE_SPECIFIERS</PreprocessorDefinitions>

      <PreprocessorDefinitions>%(PreprocessorDefinitions);_SCL_SECURE_NO_WARNINGS</PreprocessorDefinitions>
    </ClCompile>

    <Lib>
      <TargetMachine Condition="'$(Platform)'=='Win32'">MachineX86</TargetMachine>
      <TargetMachine Condition="'$(Platform)'=='x64'">MachineX64</TargetMachine>
    </Lib>
    <Lib Condition="'$(IsDebugBuild)'=='false'">
      <LinkTimeCodeGeneration>true</LinkTimeCodeGeneration>
    </Lib>

    <Link Condition="'$(IsDebugBuild)'!='false'">
      <GenerateDebugInformation>DebugFastLink</GenerateDebugInformation>
    </Link>
    <Link Condition="'$(IsDebugBuild)'=='false'">
      <GenerateDebugInformation>DebugFull</GenerateDebugInformation>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <LinkTimeCodeGeneration>UseFastLinkTimeCodeGeneration</LinkTimeCodeGeneration>
      <ImageHasSafeExceptionHandlers Condition="'$(Platform)'=='Win32'">true</ImageHasSafeExceptionHandlers>
      <SetChecksum>true</SetChecksum>
    </Link>

    <ResourceCompile>
      <ResourceOutputFileName>$(IntDir)%(RelativeDir)%(Filename).res</ResourceOutputFileName>
    </ResourceCompile>

    <FxCompile>
      <ObjectFileOutput>$(IntDir)%(RelativeDir)%(Filename).cso</ObjectFileOutput>
    </FxCompile>
  </ItemDefinitionGroup>
</Project>
